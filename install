#!/bin/bash
set -e
uv venv --python 3.11
uv pip install -e . --refresh-package fastled
# This is needed to force the installation to finalize.
uv run python -c "import os; _ = os.getcwd()"
set +e

# if ./activate exists, remove it
if [ -f activate ]; then
    rm activate
fi
# symlink activate to .venv/bin/activate on linux/mac and .venv/Scripts/activate on windows
if [[ "$OSTYPE" == "linux-gnu"* || "$OSTYPE" == "darwin"* ]]; then
    ln -s .venv/bin/activate activate
else
    ln -s .venv/Scripts/activate activate
fi

echo "Setting up C++ development environment..."

# Build tests to generate compile_commands.json for clangd
echo "Building C++ tests to generate compile_commands.json..."
uv run ci/cpp_test_run.py --compile-only --clang --test test_function

# Copy compile_commands.json to project root for clangd IntelliSense
if [ -f tests/.build/compile_commands.json ]; then
    echo "Copying compile_commands.json for clangd support..."
    cp tests/.build/compile_commands.json compile_commands.json
    echo "‚úÖ clangd support enabled - IntelliSense should work in VSCode"
else
    echo "‚ö†Ô∏è  Warning: compile_commands.json not found. Tests may not have built successfully."
fi

echo "Setting up JavaScript development environment..."

# Install fast JavaScript linter (Node.js + ESLint)
echo "Installing fast JavaScript linter (Node.js + ESLint)..."
if uv run ci/setup-js-linting-fast.py; then
    echo "‚úÖ Fast JavaScript linting enabled - 53x faster than Deno!"
else
    echo "‚ö†Ô∏è  Warning: JavaScript linter setup failed. You can retry with: uv run ci/setup-js-linting-fast.py"
fi

echo "üéâ Installation complete!"
echo ""
echo "To use:"
echo "  - Run tests: bash test"
echo "  - Run linting: bash lint (Python, C++, and JavaScript)"
echo "  - Debug in VSCode: Open test file and press F5"
echo "  - clangd IntelliSense: Should work automatically in VSCode"
