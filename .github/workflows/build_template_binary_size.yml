name: Build Template

on:
  workflow_call:
    inputs:
      board:
        type: string
        required: true
      max_size:
        type: number
        required: true
      max_size_apa102:
        type: number
        required: false


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: pip install uv

      - name: Calculate max_size_apa102
        id: apa102_size
        run: |
          if [[ -z "${{ inputs.max_size_apa102 }}" ]]; then
            echo "MAX_SIZE_APA102=$(printf "%.0f" $(echo "${{ inputs.max_size }} * 1.1" | bc))" >> $GITHUB_OUTPUT
          else
            echo "MAX_SIZE_APA102=$(printf "%.0f" ${{ inputs.max_size_apa102 }})" >> $GITHUB_OUTPUT
          fi

      - name: Compile Board for ${{ inputs.board }} with example Blink
        run: uv run ci/ci-compile.py ${{ inputs.board }} --examples Blink

      - name: Check Compiled Program Size for ${{ inputs.board }}
        run: uv run ci/ci-check-compiled-size.py ${{ inputs.board }} --max-size ${{ inputs.max_size }}

      - name: Inspect Binary
        if: always()
        continue-on-error: true
        run: |
          uv run ci/inspect_binary.py --first

      - name: Inspect Elf
        if: always()
        continue-on-error: true
        run: |
          uv run ci/inspect_elf.py --first

      - name: Compile Board for ${{ inputs.board }} with example Apa102
        run: uv run ci/ci-compile.py ${{ inputs.board }} --examples Apa102

      - name: Check Compiled Program Size for ${{ inputs.board }} (Apa102)
        run: uv run ci/ci-check-compiled-size.py ${{ inputs.board }} --max-size ${{ steps.apa102_size.outputs.MAX_SIZE_APA102 }}

      - name: Inspect Binary
        if: always()
        continue-on-error: true
        run: |
          uv run ci/inspect_binary.py --first

      - name: Inspect Elf
        if: always()
        continue-on-error: true
        run: |
          uv run ci/inspect_elf.py --first

      - name: Generate timestamp and random hex
        id: generate_id
        run: |
          echo "timestamp=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
          echo "random_hex=$(openssl rand -hex 3)" >> $GITHUB_OUTPUT

      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ steps.generate_id.outputs.timestamp }}-${{ github.sha }}-${{ steps.generate_id.outputs.random_hex }}
          path: build.log

      - name: Check build status
        if: failure()
        run: exit 1
