name: Build Template

on:
  workflow_call:
    inputs:
      board:
        type: string
        required: true
      max_size:
        type: number
        required: true


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: pip install uv

      - name: Compile Board
        run: uv run ci/ci-compile.py --board ${{ inputs.board }} --examples Blink

      - name: Check Compiled Program Size for ${{ inputs.board }} is less than the limit of ${{ inputs.max_size }}
        run: |
          import subprocess
          import re
          import sys

          def run_command(cmd):
              result = subprocess.run(cmd, capture_output=True, text=True)
              return result.stdout.strip()

          output = run_command(['uv', 'run', 'ci/compiled_size.py', '--board', '${{ inputs.board }}'])
          size_match = re.search(r': *(\d+)', output)

          if not size_match:
              print("Error: Unable to extract size from output")
              print("::error::Failed to determine compiled size")
              sys.exit(1)

          size = int(size_match.group(1))
          max_size = ${{ inputs.max_size }}

          if size > max_size:
              print(f"${{ inputs.board }} size {size} is greater than max size {max_size}")
              print("::error::Compiled size exceeds maximum allowed size")
              sys.exit(1)
          else:
              print(f"${{ inputs.board }} size {size} is within the limit of {max_size}")
        shell: python

      - name: Inspect Binary
        continue-on-error: true
        run: |
          uv run ci/inspect_binary.py --first

      - name: Generate timestamp and random hex
        id: generate_id
        run: |
          echo "timestamp=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
          echo "random_hex=$(openssl rand -hex 3)" >> $GITHUB_OUTPUT

      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ steps.generate_id.outputs.timestamp }}-${{ github.sha }}-${{ steps.generate_id.outputs.random_hex }}
          path: build.log

      - name: Check build status
        if: failure()
        run: exit 1
