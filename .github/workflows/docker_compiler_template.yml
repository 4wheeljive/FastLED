name: Docker Compiler Platforms

on:
  push:
    paths:
      - 'ci/docker/**'
      - '.github/workflows/docker_compiler_template.yml'
  workflow_dispatch:
    inputs:
      skip_platforms:
        description: 'Skip platform images build'
        type: boolean
        default: false
      delay_minutes:
        description: 'Delay before building platforms (minutes)'
        type: number
        default: 0
  schedule:
    # Platforms: monthly at 3:00 AM UTC (1 hour after base)
    - cron: '0 3 1 * *'

env:
  BASE_IMAGE: niteris/fastled-compiler-base

jobs:
  credentials:
    runs-on: ubuntu-latest
    outputs:
      docker_username: ${{ steps.credentials.outputs.docker_username }}
      docker_password: ${{ steps.credentials.outputs.docker_password }}
      registry_avr: ${{ steps.credentials.outputs.registry_avr }}
      registry_esp: ${{ steps.credentials.outputs.registry_esp }}
      registry_teensy: ${{ steps.credentials.outputs.registry_teensy }}
      registry_stm32: ${{ steps.credentials.outputs.registry_stm32 }}
      registry_rp: ${{ steps.credentials.outputs.registry_rp }}
      registry_nrf52: ${{ steps.credentials.outputs.registry_nrf52 }}
      registry_sam: ${{ steps.credentials.outputs.registry_sam }}
    steps:
      - name: Output encoded credentials
        id: credentials
        env:
          docker_username: niteris
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "docker_username=$(echo -n "niteris" | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "docker_password=$(echo $docker_password | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "registry_avr=$(echo -n 'niteris/fastled-compiler-avr' | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "registry_esp=$(echo -n 'niteris/fastled-compiler-esp' | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "registry_teensy=$(echo -n 'niteris/fastled-compiler-teensy' | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "registry_stm32=$(echo -n 'niteris/fastled-compiler-stm32' | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "registry_rp=$(echo -n 'niteris/fastled-compiler-rp' | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "registry_nrf52=$(echo -n 'niteris/fastled-compiler-nrf52' | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "registry_sam=$(echo -n 'niteris/fastled-compiler-sam' | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT

  # ============================================================================
  # PLATFORM IMAGES BUILD
  # ============================================================================
  wait-for-base:
    if: github.event.inputs.skip_platforms != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for base image to settle
        run: |
          delay_minutes=${{ github.event.inputs.delay_minutes }}
          if [ -z "$delay_minutes" ] || [ "$delay_minutes" = "null" ]; then
            delay_minutes=10
          fi
          echo "Waiting ${delay_minutes} minutes for base image to settle in registry..."
          sleep $((${delay_minutes} * 60))

  build-platforms:
    name: ðŸ”¨ fastled-compiler-${{ matrix.group.name }}
    if: github.event.inputs.skip_platforms != 'true'
    needs: [credentials, wait-for-base]
    strategy:
      fail-fast: false
      matrix:
        group:
          - name: avr
            platforms: uno,attiny85,attiny88,attiny1616,attiny4313,yun-32u4
            registry: registry_avr
          - name: esp
            platforms: esp32dev,esp32c2,esp32c3,esp32c5,esp32c6,esp32h2,esp32p4,esp32s2,esp32s3,esp32wroom,esp8266
            registry: registry_esp
          - name: teensy
            platforms: teensy30,teensy31,teensy40,teensy41,teensyLC
            registry: registry_teensy
          - name: stm32
            platforms: bluepill,blackpill,stm103tb
            registry: registry_stm32
          - name: rp
            platforms: rp2040,rp2040_earle,rp2350,rp2350B
            registry: registry_rp
          - name: nrf52
            platforms: nrf52840_dk,nrf52_xiaoblesense,adafruit_feather_nrf52840_sense,adafruit_xiaoblesense
            registry: registry_nrf52
          - name: sam
            platforms: due,digix,giga_r1
            registry: registry_sam
        arch:
          - runs_on: ubuntu-24.04
            platform: linux/amd64
          - runs_on: ubuntu-24.04-arm
            platform: linux/arm64
    uses: ./.github/workflows/docker_build_compiler.yml
    with:
      runs_on: ${{ matrix.arch.runs_on }}
      platform: ${{ matrix.arch.platform }}
      dockerfile: Dockerfile.template
      group: ${{ matrix.group.name }}
      platforms: ${{ matrix.group.platforms }}
      tag: latest
    secrets:
      env_vars: |
        docker_username=${{ needs.credentials.outputs.docker_username }}
        docker_password=${{ needs.credentials.outputs.docker_password }}
        docker_registry_image=${{ needs.credentials.outputs[matrix.group.registry] }}

  merge-platforms:
    if: github.event.inputs.skip_platforms != 'true'
    runs-on: ubuntu-24.04
    needs: build-platforms
    strategy:
      matrix:
        group:
          - name: avr
            registry: niteris/fastled-compiler-avr
          - name: esp
            registry: niteris/fastled-compiler-esp
          - name: teensy
            registry: niteris/fastled-compiler-teensy
          - name: stm32
            registry: niteris/fastled-compiler-stm32
          - name: rp
            registry: niteris/fastled-compiler-rp
          - name: nrf52
            registry: niteris/fastled-compiler-nrf52
          - name: sam
            registry: niteris/fastled-compiler-sam
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.group.name }}-*
          merge-multiple: true

      - name: Verify digests were downloaded
        run: |
          if [ ! -d /tmp/digests ] || [ -z "$(ls -A /tmp/digests)" ]; then
            echo "ERROR: No digests found! Build jobs likely failed."
            exit 1
          fi
          echo "Found digests:"
          ls -la /tmp/digests/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.group.registry }}
          tags: type=raw,value=latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: niteris
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ matrix.group.registry }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ matrix.group.registry }}:latest
