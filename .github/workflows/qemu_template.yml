name: ESP32 QEMU Test Template

on:
  workflow_call:
    inputs:
      platform:
        description: 'ESP32 platform to test (esp32dev, esp32c3, etc.)'
        required: true
        type: string
      platform_display:
        description: 'Display name for the platform (e.g., ESP32-DEV, ESP32-C3)'
        required: true
        type: string
      sketch:
        description: 'Arduino sketch/example to test (e.g., BlinkParallel, Blink, etc.)'
        required: true
        type: string

permissions:
  contents: read
  actions: read
  id-token: write
  pull-requests: read

jobs:
  qemu_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout trusted base branch code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch || 'master' }}
          path: trusted

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          path: pr-code

      - name: Merge safe source files from PR
        run: |
          # Copy ONLY safe source files from PR, never executable scripts
          if [ -d "pr-code/src" ]; then
            cp -r pr-code/src/* trusted/src/ 2>/dev/null || true
          fi
          if [ -d "pr-code/examples" ]; then
            cp -r pr-code/examples/* trusted/examples/ 2>/dev/null || true
          fi
          if [ -f "pr-code/platformio.ini" ]; then
            cp pr-code/platformio.ini trusted/
          fi
          if [ -f "pr-code/library.json" ]; then
            cp pr-code/library.json trusted/
          fi
          if [ -f "pr-code/library.properties" ]; then
            cp pr-code/library.properties trusted/
          fi
          if [ -f "pr-code/CMakeLists.txt" ]; then
            cp pr-code/CMakeLists.txt trusted/
          fi
        shell: bash

      - name: Set working directory to trusted
        run: echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE/trusted" >> $GITHUB_ENV

      - name: Pin python version
        working-directory: trusted
        run: |
          echo "3.11" >> .python-version

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          version: "0.8.0"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "trusted/.python-version"

      - name: Install CCACHE
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y ccache
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install ccache
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ccache
          fi
        shell: bash

      - name: Setup CCACHE
        run: |
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=400M" >> $GITHUB_ENV
          ccache --version
          ccache --show-stats
          ccache --zero-stats
        shell: bash

      - name: Cache CCACHE directory
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Install Dependencies
        working-directory: trusted
        run: |
          # Install Python dependencies needed for compilation
          uv sync
          # Install esptool for flash image creation
          uv pip install esptool

      - name: Create build directory for QEMU
        working-directory: trusted
        run: |
          mkdir -p qemu-build
          echo "Created qemu-build directory for ${{ inputs.platform }} binaries"

      - name: Build ${{ inputs.platform }} firmware
        working-directory: trusted
        run: |
          echo "Building ${{ inputs.sketch }} for ${{ inputs.platform }}"

          # Build the firmware using standard platform board
          uv run ci/ci-compile.py ${{ inputs.platform }} --examples ${{ inputs.sketch }} -o qemu-build/firmware.bin

          echo "Build completed. Contents of qemu-build directory:"
          ls -la qemu-build/

          # Now we need to find and copy the bootloader and partitions files
          # These are typically in the PlatformIO build directory
          echo "Looking for bootloader and partition files..."

          # Find the PlatformIO build directory
          PIO_BUILD_DIR=".build/pio/${{ inputs.platform }}"

          # The actual build artifacts are in .pio/build/${{ inputs.platform }} within the PIO_BUILD_DIR
          PIO_ARTIFACTS_DIR="$PIO_BUILD_DIR/.pio/build/${{ inputs.platform }}"

          if [ -d "$PIO_BUILD_DIR" ]; then
            echo "Found PlatformIO build directory: $PIO_BUILD_DIR"
            echo "Checking artifacts directory: $PIO_ARTIFACTS_DIR"

            # Copy bootloader.bin if it exists
            if [ -f "$PIO_ARTIFACTS_DIR/bootloader.bin" ]; then
              cp "$PIO_ARTIFACTS_DIR/bootloader.bin" qemu-build/
              echo "✅ Copied bootloader.bin from artifacts directory"
            elif [ -f "$PIO_BUILD_DIR/bootloader.bin" ]; then
              cp "$PIO_BUILD_DIR/bootloader.bin" qemu-build/
              echo "✅ Copied bootloader.bin from build directory"
            else
              # Try to find bootloader in subdirectories
              BOOTLOADER=$(find "$PIO_BUILD_DIR" -name "bootloader.bin" 2>/dev/null | head -1)
              if [ -n "$BOOTLOADER" ]; then
                cp "$BOOTLOADER" qemu-build/bootloader.bin
                echo "✅ Found and copied bootloader.bin from $BOOTLOADER"
              else
                echo "⚠️ bootloader.bin not found, will try default ${{ inputs.platform }} bootloader"
                # Download default bootloader if needed
                if [ "${{ inputs.platform }}" = "esp32dev" ]; then
                  wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
                elif [ "${{ inputs.platform }}" = "esp32c3" ]; then
                  wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32c3/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
                elif [ "${{ inputs.platform }}" = "esp32s3" ]; then
                  wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32s3/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
                else
                  wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
                fi
                echo "✅ Downloaded default ${{ inputs.platform }} bootloader"
              fi
            fi

            # Copy partitions.bin if it exists
            if [ -f "$PIO_ARTIFACTS_DIR/partitions.bin" ]; then
              cp "$PIO_ARTIFACTS_DIR/partitions.bin" qemu-build/
              echo "✅ Copied partitions.bin from artifacts directory"
            elif [ -f "$PIO_BUILD_DIR/partitions.bin" ]; then
              cp "$PIO_BUILD_DIR/partitions.bin" qemu-build/
              echo "✅ Copied partitions.bin from build directory"
            else
              # Try to find partitions in subdirectories
              PARTITIONS=$(find "$PIO_BUILD_DIR" -name "partitions.bin" 2>/dev/null | head -1)
              if [ -n "$PARTITIONS" ]; then
                cp "$PARTITIONS" qemu-build/partitions.bin
                echo "✅ Found and copied partitions.bin from $PARTITIONS"
              else
                echo "⚠️ partitions.bin not found in build artifacts"
              fi
            fi

            # Always create QEMU-optimized partitions.csv (required by tobozo/esp32-qemu-sim)
            # Force QEMU-compatible partition layout to avoid memory overlap issues
            echo "🔧 Creating QEMU-optimized partition table (override PlatformIO layout)"
            printf '# Name,   Type, SubType, Offset,  Size, Flags\nnvs,      data, nvs,     0x9000,  0x5000,\notadata,  data, ota,     0xe000,  0x2000,\napp0,     app,  ota_0,   0x10000, 0x200000,\nspiffs,   data, spiffs,  0x210000,0x1f0000,\n' > qemu-build/partitions.csv
            echo "✅ Created QEMU-optimized partitions.csv (otadata at 0xe000 to avoid overlap)"
          else
            echo "⚠️ PlatformIO build directory not found, using defaults"
            # Download default bootloader
            if [ "${{ inputs.platform }}" = "esp32dev" ]; then
              wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
            elif [ "${{ inputs.platform }}" = "esp32c3" ]; then
              wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32c3/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
            elif [ "${{ inputs.platform }}" = "esp32s3" ]; then
              wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32s3/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
            else
              wget -q https://github.com/espressif/arduino-esp32/raw/master/tools/sdk/esp32/bin/bootloader_dio_80m.bin -O qemu-build/bootloader.bin
            fi
            echo "✅ Downloaded default ${{ inputs.platform }} bootloader"

            # Create QEMU-optimized partition table (otadata at 0xe000 to avoid overlap)
            printf '# Name,   Type, SubType, Offset,  Size, Flags\nnvs,      data, nvs,     0x9000,  0x5000,\notadata,  data, ota,     0xe000,  0x2000,\napp0,     app,  ota_0,   0x10000, 0x200000,\nspiffs,   data, spiffs,  0x210000,0x1f0000,\n' > qemu-build/partitions.csv
            echo "✅ Created QEMU-optimized partitions.csv (otadata at 0xe000 to avoid overlap)"

            # Create default boot_app0.bin (required by tobozo/esp32-qemu-sim)
            dd if=/dev/zero bs=1 count=8192 | tr '\000' '\377' > qemu-build/boot_app0.bin
            echo "✅ Created default boot_app0.bin"
          fi

          # Ensure boot_app0.bin exists if we have PIO_BUILD_DIR and it wasn't already created
          if [ -d "$PIO_BUILD_DIR" ] && [ ! -f "qemu-build/boot_app0.bin" ]; then
            if [ -f "$PIO_ARTIFACTS_DIR/boot_app0.bin" ]; then
              cp "$PIO_ARTIFACTS_DIR/boot_app0.bin" qemu-build/
              echo "✅ Copied boot_app0.bin from artifacts directory"
            elif [ -f "$PIO_BUILD_DIR/boot_app0.bin" ]; then
              cp "$PIO_BUILD_DIR/boot_app0.bin" qemu-build/
              echo "✅ Copied boot_app0.bin from build directory"
            else
              # Try to find boot_app0 in subdirectories
              BOOT_APP0=$(find "$PIO_BUILD_DIR" -name "boot_app0.bin" 2>/dev/null | head -1)
              if [ -n "$BOOT_APP0" ]; then
                cp "$BOOT_APP0" qemu-build/boot_app0.bin
                echo "✅ Found and copied boot_app0.bin from $BOOT_APP0"
              else
                echo "⚠️ boot_app0.bin not found, creating default"
                # Create a minimal boot_app0.bin (8KB of 0xFF)
                dd if=/dev/zero bs=1 count=8192 | tr '\000' '\377' > qemu-build/boot_app0.bin
                echo "✅ Created default boot_app0.bin"
              fi
            fi
          fi

          # Find and copy spiffs.bin (optional but recommended)
          if [ -d "$PIO_BUILD_DIR" ]; then
            if [ -f "$PIO_ARTIFACTS_DIR/spiffs.bin" ]; then
              cp "$PIO_ARTIFACTS_DIR/spiffs.bin" qemu-build/
              echo "✅ Copied spiffs.bin from artifacts directory"
            elif [ -f "$PIO_BUILD_DIR/spiffs.bin" ]; then
              cp "$PIO_BUILD_DIR/spiffs.bin" qemu-build/
              echo "✅ Copied spiffs.bin from build directory"
            else
              SPIFFS=$(find "$PIO_BUILD_DIR" -name "spiffs.bin" 2>/dev/null | head -1)
              if [ -n "$SPIFFS" ]; then
                cp "$SPIFFS" qemu-build/spiffs.bin
                echo "✅ Found and copied spiffs.bin from $SPIFFS"
              else
                echo "⚠️ spiffs.bin not found (optional)"
              fi
            fi
          fi

          echo "Final contents of qemu-build directory:"
          ls -la qemu-build/

          echo "=== Detailed build directory analysis ==="
          echo "PlatformIO build directory structure:"
          if [ -d "$PIO_BUILD_DIR" ]; then
            find "$PIO_BUILD_DIR" -type f -name "*.bin" -o -name "*.csv" | head -20
          fi

          echo "=== File sizes and verification ==="
          for file in qemu-build/*.bin qemu-build/*.csv; do
            if [ -f "$file" ]; then
              echo "$(basename "$file"): $(stat -c%s "$file") bytes"
            fi
          done

          # Verify firmware.bin exists
          if [ ! -f "qemu-build/firmware.bin" ]; then
            echo "❌ firmware.bin not found after build"
            exit 1
          fi
          echo "✅ firmware.bin size: $(stat -c%s qemu-build/firmware.bin) bytes"

          # Verify debug-enabled build by checking for Serial output strings in firmware
          echo "=== Build verification: checking for debug strings ==="
          if strings qemu-build/firmware.bin | grep -q "${{ inputs.sketch }} setup starting"; then
            echo "✅ Debug string '${{ inputs.sketch }} setup starting' found in firmware"
          else
            echo "⚠️  Debug string '${{ inputs.sketch }} setup starting' not found in firmware"
          fi

          if strings qemu-build/firmware.bin | grep -q "Starting loop iteration"; then
            echo "✅ Debug string 'Starting loop iteration' found in firmware"
          else
            echo "⚠️  Debug string 'Starting loop iteration' not found in firmware"
          fi

          # Verify firmware was built successfully
          echo "=== Firmware build verification ==="
          if [ -f "qemu-build/firmware.bin" ] && [ -s "qemu-build/firmware.bin" ]; then
            echo "✅ Firmware binary created successfully"
            echo "Firmware size: $(wc -c < qemu-build/firmware.bin) bytes"
          else
            echo "❌ Firmware binary missing or empty"
          fi

          # Validate flash mode for QEMU compatibility
          echo "=== Flash mode validation ==="
          if [ -d ".build/pio/${{ inputs.platform }}" ]; then
            FLASH_ARGS_FILE=$(find .build/pio/${{ inputs.platform }} -name "flash_args" 2>/dev/null | head -1)
            if [ -n "$FLASH_ARGS_FILE" ]; then
              echo "Found flash_args: $FLASH_ARGS_FILE"
              if grep -q "flash_mode dio" "$FLASH_ARGS_FILE"; then
                echo "✅ DIO flash mode detected - QEMU compatible"
              elif grep -q "flash_mode qio" "$FLASH_ARGS_FILE"; then
                echo "⚠️  WARNING: QIO flash mode detected - may cause QEMU boot issues"
                echo "Flash args content:"
                cat "$FLASH_ARGS_FILE"
              else
                echo "ℹ️  Flash mode not explicitly detected"
                cat "$FLASH_ARGS_FILE"
              fi
            else
              echo "⚠️  flash_args file not found"
            fi
          fi

      - name: Pre-QEMU verification
        working-directory: trusted
        run: |
          echo "=== Pre-QEMU verification ==="
          echo "Build folder path: $(pwd)/qemu-build"
          echo "Build folder exists: $(test -d qemu-build && echo 'YES' || echo 'NO')"
          echo "Build folder absolute path: $(realpath qemu-build 2>/dev/null || echo 'FAILED')"

          echo "=== Required files verification ==="
          required_files=("firmware.bin" "bootloader.bin" "partitions.bin" "partitions.csv" "boot_app0.bin")
          for file in "${required_files[@]}"; do
            if [ -f "qemu-build/$file" ]; then
              echo "✅ $file: $(stat -c%s qemu-build/$file) bytes"
            else
              echo "❌ $file: MISSING"
            fi
          done

          echo "=== All files in qemu-build ==="
          ls -la qemu-build/

          # Create flash.bin for QEMU if it doesn't exist
          if [ ! -f "qemu-build/flash.bin" ]; then
            echo "=== Creating flash.bin for QEMU ==="
            if [ -f "qemu-build/firmware.bin" ] && [ -f "qemu-build/bootloader.bin" ] && [ -f "qemu-build/partitions.bin" ]; then
              # Use esptool to create proper flash image if available
              if command -v esptool.py >/dev/null 2>&1; then
                echo "Using esptool.py to create flash image..."
                # Determine correct chip and offsets based on platform
                if [ "${{ inputs.platform }}" = "esp32dev" ]; then
                  esptool.py --chip esp32 merge_bin -o qemu-build/flash.bin \
                    --flash_mode dio --flash_freq 80m --flash_size 4MB \
                    0x1000 qemu-build/bootloader.bin \
                    0x8000 qemu-build/partitions.bin \
                    0xe000 qemu-build/boot_app0.bin \
                    0x10000 qemu-build/firmware.bin
                elif [ "${{ inputs.platform }}" = "esp32c3" ] || [ "${{ inputs.platform }}" = "esp32s3" ]; then
                  esptool.py --chip ${{ inputs.platform }} merge_bin -o qemu-build/flash.bin \
                    --flash_mode dio --flash_freq 80m --flash_size 4MB \
                    0x0 qemu-build/bootloader.bin \
                    0x8000 qemu-build/partitions.bin \
                    0xe000 qemu-build/boot_app0.bin \
                    0x10000 qemu-build/firmware.bin
                else
                  esptool.py --chip esp32 merge_bin -o qemu-build/flash.bin \
                    --flash_mode dio --flash_freq 80m --flash_size 4MB \
                    0x1000 qemu-build/bootloader.bin \
                    0x8000 qemu-build/partitions.bin \
                    0xe000 qemu-build/boot_app0.bin \
                    0x10000 qemu-build/firmware.bin
                fi
                echo "✅ Created flash.bin using esptool"
              else
                echo "esptool.py not available, creating simple flash image..."
                # Create 4MB flash image filled with 0xFF
                dd if=/dev/zero bs=1M count=4 | tr '\000' '\377' > qemu-build/flash.bin
                # Write firmware at offset 0x10000 (64KB)
                dd if=qemu-build/firmware.bin of=qemu-build/flash.bin bs=1 seek=65536 conv=notrunc
                echo "✅ Created basic flash.bin"
              fi
            else
              echo "⚠️  Missing required files for flash.bin creation"
            fi
          else
            echo "✅ flash.bin already exists"
          fi

          echo "=== Final qemu-build contents ==="
          ls -la qemu-build/

      - name: Run ${{ inputs.platform_display }} in QEMU
        id: qemu
        uses: tobozo/esp32-qemu-sim@v1.0.5
        with:
          build-folder: trusted/qemu-build
          flash-size: 4
          psram: "disabled"
          qemu-timeout: "120"
          timeout-interrupt-regex: "Test finished.*completed.*iterations|Starting loop iteration 2"
          debug: true
          chip: "${{ inputs.platform }}"

      - name: Display QEMU output
        if: always()
        run: |
          echo "=== QEMU Action Results ==="
          echo "QEMU action conclusion: ${{ steps.qemu.conclusion }}"
          echo "QEMU action outcome: ${{ steps.qemu.outcome }}"

          echo "=== QEMU Serial Output ==="
          if [ -n "${{ steps.qemu.outputs.serial-output }}" ]; then
            echo "Serial output length: $(echo '${{ steps.qemu.outputs.serial-output }}' | wc -c) characters"
            echo "Serial output lines: $(echo '${{ steps.qemu.outputs.serial-output }}' | wc -l) lines"
            echo "${{ steps.qemu.outputs.serial-output }}"
          else
            echo "❌ No serial output captured from QEMU"
          fi

          echo "=== QEMU Debug Information ==="
          if [ -n "${{ steps.qemu.outputs.qemu-log }}" ]; then
            echo "QEMU log:"
            echo "${{ steps.qemu.outputs.qemu-log }}"
          else
            echo "No QEMU log available"
          fi

      - name: Validate ${{ inputs.sketch }} output
        run: |
          echo "=== Validating ${{ inputs.sketch }} output in QEMU logs ==="

          # Check if QEMU step succeeded
          if [ "${{ steps.qemu.conclusion }}" != "success" ]; then
            echo "❌ QEMU action failed with conclusion: ${{ steps.qemu.conclusion }}"
            echo "❌ QEMU action outcome: ${{ steps.qemu.outcome }}"
            exit 1
          fi

          # Save output to file for easier processing
          # The tobozo action creates logs.txt with the QEMU output
          if [ -f "logs.txt" ]; then
            cp logs.txt qemu_output.log
            echo "✅ Found QEMU logs in logs.txt ($(wc -l < logs.txt) lines)"
          else
            echo "❌ No logs.txt file found from tobozo action"
            echo "Looking for alternative log sources..."
            # Check for any log files that might contain QEMU output
            find . -name "*.log" -o -name "*.txt" | head -10
            echo "" > qemu_output.log
          fi

          # Check if we actually got any output
          if [ ! -s qemu_output.log ]; then
            echo "❌ No serial output captured from QEMU - empty or missing output"
            echo "This indicates QEMU may not have started properly or ${{ inputs.platform_display }} may not be booting"
            echo ""
            echo "QEMU Debug Information:"
            echo "  QEMU conclusion: ${{ steps.qemu.conclusion }}"
            echo "  QEMU outcome: ${{ steps.qemu.outcome }}"
            echo "  Looking for log files..."
            find . -name "*.log" -o -name "*.txt" -type f | while read logfile; do
              echo "  Found: $logfile ($(wc -l < "$logfile") lines)"
              if [ -s "$logfile" ]; then
                echo "    Preview:"
                head -5 "$logfile" | sed 's/^/      /'
              fi
            done
            echo ""
            echo "Possible causes:"
            echo "  1. ${{ inputs.platform_display }} firmware failed to boot (flash mode incompatibility)"
            echo "  2. Serial communication not properly configured"
            echo "  3. QEMU emulation issues with the current firmware"
            echo "  4. Bootloader/partition configuration problems"
            exit 1
          fi

          echo "✅ QEMU output file created with $(wc -l < qemu_output.log) lines"

          # Check for crash patterns
          if grep -q -E "(guru meditation|abort\(\)|LoadProhibited|IllegalInstruction)" qemu_output.log; then
            echo "❌ ${{ inputs.platform_display }} crashed during execution"
            echo "Crash indicators found in QEMU log"
            exit 1
          fi

          # Validate debug output is present (now using Serial.print instead of FL_WARN)
          if grep -q "${{ inputs.sketch }} setup starting" qemu_output.log; then
            echo "✅ Debug output detected"
            echo "Setup messages found:"
            grep "${{ inputs.sketch }} setup starting\|Initialized.*LED strips\|Setup complete" qemu_output.log | head -10
          else
            echo "❌ No debug output detected"
            echo "Expected Serial.print messages not found in QEMU log"
            exit 1
          fi

          # Validate sketch startup
          if grep -q "${{ inputs.sketch }} setup starting" qemu_output.log; then
            echo "✅ ${{ inputs.sketch }} setup started"
          else
            echo "❌ ${{ inputs.sketch }} startup message not found"
            exit 1
          fi

          # Check for LED strip initialization
          if grep -q "Initialized 4 LED strips" qemu_output.log; then
            echo "✅ 4 LED strips initialized"
          else
            echo "⚠️  LED strip initialization message not found"
          fi

          # Check for loop execution
          if grep -q "Starting loop iteration" qemu_output.log; then
            echo "✅ Loop execution detected"
          else
            echo "⚠️  No loop execution messages found"
          fi

          # Check for test completion
          if grep -q "Test finished.*completed.*iterations" qemu_output.log; then
            echo "✅ Test completion detected"
          else
            echo "⚠️  Test completion not detected (may need more time)"
          fi

          # Validate boot success - check for ESP32 boot indicators or our application output
          if grep -q -E "(rst:|boot:|ESP32|${{ inputs.sketch }}|ets_main\.c|cpu_start\.c)" qemu_output.log; then
            echo "✅ ${{ inputs.platform_display }} boot/application output detected"
          else
            echo "❌ No ${{ inputs.platform_display }} boot indicators or application output found"
            echo "Output content preview:"
            head -10 qemu_output.log | cat -A
            echo "Full output:"
            cat qemu_output.log
            exit 1
          fi

          echo "=== ${{ inputs.sketch }} validation complete ==="
        shell: bash

      - name: Upload QEMU logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}-qemu-failure-${{ inputs.sketch }}-${{ github.sha }}
          path: |
            qemu_output.log
            trusted/qemu-build/
          include-hidden-files: true

      - name: Upload QEMU logs on success
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}-qemu-success-${{ inputs.sketch }}-${{ github.sha }}
          path: qemu_output.log

      - name: Summary
        if: always()
        run: |
          echo "=== ${{ inputs.platform_display }} QEMU Test Summary ==="
          echo "Platform: ${{ inputs.platform }} (standard configuration)"
          echo "Example: ${{ inputs.sketch }}"
          echo "Status: ${{ job.status }}"
          if [ -f "qemu_output.log" ]; then
            echo "QEMU output lines: $(wc -l < qemu_output.log)"
            echo "Debug message count: $(grep -c '${{ inputs.sketch }} setup starting\|Starting loop iteration' qemu_output.log || echo 0)"
            echo "Loop iterations: $(grep -c 'Starting loop iteration' qemu_output.log || echo 0)"
          fi