================================================================================
                  FASTLED RUNTIME LOGGING SYSTEM
                         Quick Start Guide
================================================================================

WHAT IT IS
────────────────────────────────────────────────────────────────────────────
Runtime category-based logging for FastLED subsystems with:
  ✓ Zero overhead when disabled (compile-time stripping)
  ✓ Runtime toggle capability (without recompilation)
  ✓ 7 categories: SPI, RMT, VIDEO, I2S, LCD, UART, TIMING
  ✓ Stream-style formatting (like FL_WARN)
  ✓ 4 bytes total runtime state


HOW TO USE
────────────────────────────────────────────────────────────────────────────

1. CONFIGURE BUILD WITH LOGGING ENABLED

   In platformio.ini:
   build_flags = -DFASTLED_LOG_SPI_ENABLED

   Or multiple categories:
   build_flags =
       -DFASTLED_LOG_SPI_ENABLED
       -DFASTLED_LOG_I2S_ENABLED
       -DFASTLED_LOG_TIMING_ENABLED

   For all categories (debug):
   build_flags = -DFASTLED_LOG_ALL_ENABLED


2. USE LOGGING IN YOUR SKETCH

   In setup():
   fl::LogState::enable(fl::LogCategory::SPI);

   In your code:
   FL_LOG_SPI("Debug: value=" << value);


3. TOGGLE AT RUNTIME

   // Turn on SPI logging
   fl::LogState::enable(fl::LogCategory::SPI);

   // Turn off SPI logging
   fl::LogState::disable(fl::LogCategory::SPI);

   // Check status
   if (fl::LogState::isEnabled(fl::LogCategory::SPI)) {
       // SPI logging is on
   }

   // Enable/disable all
   fl::LogState::enableAll();
   fl::LogState::disableAll();


AVAILABLE MACROS
────────────────────────────────────────────────────────────────────────────
FL_LOG_SPI(msg)      - SPI operations
FL_LOG_RMT(msg)      - RMT peripheral (ESP32)
FL_LOG_VIDEO(msg)    - Video/framebuffer
FL_LOG_I2S(msg)      - I2S streaming
FL_LOG_LCD(msg)      - LCD displays
FL_LOG_UART(msg)     - Serial/UART
FL_LOG_TIMING(msg)   - Performance timing

All support stream-style formatting:
FL_LOG_SPI("value: " << x << " status: " << status);


COMPLETE EXAMPLE
────────────────────────────────────────────────────────────────────────────

#include "FastLED.h"

CRGB leds[60];

void setup() {
    Serial.begin(115200);
    FastLED.addLeds<NEOPIXEL, 5>(leds, 60);

    // Enable SPI logging
    fl::LogState::enable(fl::LogCategory::SPI);
}

void loop() {
    // Your FastLED code...
    // SPI operations will output diagnostic messages to Serial
}


KEY FEATURES
────────────────────────────────────────────────────────────────────────────

ZERO OVERHEAD WHEN DISABLED
  // Without -DFASTLED_LOG_SPI_ENABLED:
  FL_LOG_SPI("msg");  // Compiles to nothing (0 bytes, 0 cycles)

RUNTIME CONTROL (when compiled in)
  // With -DFASTLED_LOG_SPI_ENABLED:
  FL_LOG_SPI("msg");  // Runtime check: if (LogState::isEnabled(...))
  // Can toggle on/off without recompilation!

PLATFORM-AWARE OUTPUT
  - Respects Serial on Arduino
  - Uses printf on ESP32
  - Respects memory constraints (SKETCH_HAS_LOTS_OF_MEMORY)

BACKWARD COMPATIBLE
  - FL_DBG_SPI still works (now uses new system)
  - FASTLED_DBG_SPI_ENABLED still supported
  - No breaking changes


COMPARISON: FL_DBG vs FL_LOG_*
────────────────────────────────────────────────────────────────────────────
                          FL_DBG          FL_LOG_*
────────────────────────────────────────────────────────────────────────────
Purpose                   General debug   Category-specific
Selective enable          No              Yes (per-category)
Runtime toggle            No              Yes
Default state             Variable        Always disabled
Memory (~5KB vs 4 bytes)   5KB             4 bytes
────────────────────────────────────────────────────────────────────────────

Use FL_DBG for ad-hoc debugging
Use FL_LOG_* for structured subsystem diagnostics


FILES CREATED
────────────────────────────────────────────────────────────────────────────
src/fl/log.h                      - Header with macros and LogState class
src/fl/log.cpp                    - Implementation (runtime state)
src/fl/README.md                  - Complete documentation (updated)
src/fl/dbg.h                      - Integration (updated)
LOGGING_SYSTEM_SUMMARY.md         - Implementation overview
LOGGING_QUICK_START.txt           - This file


MORE INFORMATION
────────────────────────────────────────────────────────────────────────────
See:
  • src/fl/log.h - Extensive inline documentation (350+ lines)
  • src/fl/README.md - Full documentation with detailed examples
  • LOGGING_SYSTEM_SUMMARY.md - Implementation details


VERIFICATION
────────────────────────────────────────────────────────────────────────────
✓ All 110 tests pass
✓ No compilation errors
✓ Backward compatible with existing code
✓ Integrated into src/fl/dbg.h
✓ Ready for use

================================================================================
