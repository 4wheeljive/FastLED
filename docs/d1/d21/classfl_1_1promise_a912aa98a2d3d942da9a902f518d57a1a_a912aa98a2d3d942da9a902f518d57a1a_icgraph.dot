digraph "fl::promise::valid"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="fl::promise::valid",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Check if promise is valid."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="fl::await_top_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d36/namespacefl_a422168cc1b8dc2e0a10dfedf921ac003.html#a422168cc1b8dc2e0a10dfedf921ac003",tooltip="Synchronously wait for a promise to complete (ONLY safe in top-level contexts)"];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="test_await_approach",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/dec/_net_test_real_8h_a75e6549812ad7bff897e0c92a225878a.html#a75e6549812ad7bff897e0c92a225878a",tooltip=" "];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="loop",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/dec/_net_test_real_8h_afe461d27b9c48d5921c00d521181f12f.html#afe461d27b9c48d5921c00d521181f12f",tooltip=" "];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="test_json_await",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/dec/_net_test_real_8h_a648cd3d90f8e240cbbfe5cb934057124.html#a648cd3d90f8e240cbbfe5cb934057124",tooltip="APPROACH 4: JSON Response with await pattern   Same JSON handling but using await_top_level for synch..."];
  Node5 -> Node4 [id="edge5_Node000005_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node6 [id="edge6_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="fl::promise::catch_",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a29ec0450db3375d4df384ce5c16def5b.html#a29ec0450db3375d4df384ce5c16def5b",tooltip="Register error callback - returns reference for chaining."];
  Node1 -> Node7 [id="edge7_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="fl::FetchManager::cleanup\l_completed_promises",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d35/classfl_1_1_fetch_manager_a812860476db2eb58c04be44261113083.html#a812860476db2eb58c04be44261113083",tooltip=" "];
  Node7 -> Node8 [id="edge8_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="fl::FetchManager::update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d3/d35/classfl_1_1_fetch_manager_a54544b6df1aaf16db800dc35ac76f1a4.html#a54544b6df1aaf16db800dc35ac76f1a4",tooltip="Update this async runner (called during async pumping)"];
  Node1 -> Node9 [id="edge9_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="fl::promise::complete\l_with_error",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a3d15b9a9e5f7d5fcb30290bdf9f3b5c9.html#a3d15b9a9e5f7d5fcb30290bdf9f3b5c9",tooltip="Complete the promise with an error (used by networking library)"];
  Node1 -> Node10 [id="edge10_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="fl::promise::complete\l_with_error",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a9146f8afd246fdddfd7a7529faced6a6.html#a9146f8afd246fdddfd7a7529faced6a6",tooltip=" "];
  Node1 -> Node11 [id="edge11_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="fl::promise::complete\l_with_value",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a251e362c322085e16453015de6e8177b.html#a251e362c322085e16453015de6e8177b",tooltip="Complete the promise with a result (used by networking library)"];
  Node1 -> Node12 [id="edge12_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="fl::promise::complete\l_with_value",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a6025e98c5bdfdf75468ec7da64180c04.html#a6025e98c5bdfdf75468ec7da64180c04",tooltip=" "];
  Node1 -> Node13 [id="edge13_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="fl::promise::error",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a13a94578149cb4f8e85f643492411bf5.html#a13a94578149cb4f8e85f643492411bf5",tooltip="Get the error (only valid if is_rejected() returns true)"];
  Node13 -> Node2 [id="edge14_Node000013_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node9 [id="edge15_Node000013_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node14 [id="edge16_Node000013_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="fl::promise::reject",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a40828f23712ac6dbabc9cd2f7d7634b6.html#a40828f23712ac6dbabc9cd2f7d7634b6",tooltip="Create a rejected promise with error."];
  Node14 -> Node15 [id="edge17_Node000014_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="fl::make_rejected_promise",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d36/namespacefl_aa8ba9adac097cc1e555a10bb31fb26d2.html#aa8ba9adac097cc1e555a10bb31fb26d2",tooltip="Convenience function to create a rejected promise (const char* overload)"];
  Node14 -> Node16 [id="edge18_Node000014_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="fl::make_rejected_promise",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d36/namespacefl_acede2a4bd76cfec481b34ef8d266b80e.html#acede2a4bd76cfec481b34ef8d266b80e",tooltip="Convenience function to create a rejected promise."];
  Node14 -> Node17 [id="edge19_Node000014_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="fl::promise::reject",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_ad3f1732ddc0bc7d3f0d4a6d43725e985.html#ad3f1732ddc0bc7d3f0d4a6d43725e985",tooltip="Create a rejected promise with error message."];
  Node1 -> Node18 [id="edge20_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="fl::promise::is_completed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_afd67743e54c389fdb8e8662b545018c4.html#afd67743e54c389fdb8e8662b545018c4",tooltip="Check if promise is completed (resolved or rejected)"];
  Node18 -> Node2 [id="edge21_Node000018_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node7 [id="edge22_Node000018_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node19 [id="edge23_Node000001_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="fl::promise::is_rejected",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a6bee62457e687f145951ea922594cd61.html#a6bee62457e687f145951ea922594cd61",tooltip="Check if promise is rejected (completed with error)"];
  Node1 -> Node20 [id="edge24_Node000001_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="fl::promise::is_resolved",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a35fe98fffd99be1d59765514b0d360d2.html#a35fe98fffd99be1d59765514b0d360d2",tooltip="Check if promise is resolved (completed successfully)"];
  Node20 -> Node2 [id="edge25_Node000020_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node21 [id="edge26_Node000001_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="fl::promise::then",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_ae10342734273b14abe3ba660f1a713ce.html#ae10342734273b14abe3ba660f1a713ce",tooltip="Register success callback - returns reference for chaining."];
  Node1 -> Node8 [id="edge27_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node22 [id="edge28_Node000001_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="fl::promise::update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a20e3006272cac1616befc01daf0f8d6e.html#a20e3006272cac1616befc01daf0f8d6e",tooltip="Update promise state in main loop - should be called periodically This processes pending callbacks wh..."];
  Node22 -> Node2 [id="edge29_Node000022_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 -> Node8 [id="edge30_Node000022_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node23 [id="edge31_Node000001_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="fl::promise::value",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a915f95ce14f79b1a74c7c4b74053fdda.html#a915f95ce14f79b1a74c7c4b74053fdda",tooltip="Get the result value (only valid if is_resolved() returns true)"];
  Node23 -> Node2 [id="edge32_Node000023_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node11 [id="edge33_Node000023_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node12 [id="edge34_Node000023_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node24 [id="edge35_Node000023_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="fl::promise::resolve",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_a3e0fb912621e186951d09a10640f407b.html#a3e0fb912621e186951d09a10640f407b",tooltip="Create a resolved promise with value."];
  Node24 -> Node25 [id="edge36_Node000024_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="fl::execute_fetch_request",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$d4/d36/namespacefl_a614354323511a444f4f3d295d6a41db8.html#a614354323511a444f4f3d295d6a41db8",tooltip="Internal helper to execute a fetch request and return a promise."];
  Node24 -> Node36 [id="edge37_Node000024_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="fl::make_resolved_promise",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d4/d36/namespacefl_a50da6c7601ccf62e8c9c47a92a646cc4.html#a50da6c7601ccf62e8c9c47a92a646cc4",tooltip="Convenience function to create a resolved promise."];
  Node23 -> Node37 [id="edge38_Node000023_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="fl::promise::resolve",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d1/d21/classfl_1_1promise_aab796029d311b31bcb2b818ce8f4f89a.html#aab796029d311b31bcb2b818ce8f4f89a",tooltip="Create a resolved promise with value (move version)"];
}
