# ================================================================================================
# FastLED Unit Test Compilation Flags Configuration
# ================================================================================================
# 
# This file centralizes ALL compilation flags used by the unit test build system to ensure
# consistent and maintainable build configuration.
#
# Key Features:
# - Single source of truth for all compiler flags, defines, and build settings
# - Support for different build modes (quick, debug)
# - Consistent flags across all test compilation
# - Platform-specific flag handling
#
# Architecture:
# - [all] section: Common flags shared by ALL test compilation
# - [build_modes.*] sections: Build-specific flags (debug/quick)
# - [linking.*] sections: Linker-specific flags for different targets
# - [strict_mode] section: Additional warning flags for strict compilation
#
# ================================================================================================

[all]
# ================================================================================================
# UNIVERSAL COMPILATION FLAGS
# ================================================================================================
# These flags are applied to ALL test compilation targets.
# They provide the foundation for consistent compilation across the test suite.

# Core preprocessor defines that control FastLED behavior
defines = [
    # FastLED Test Configuration
    "-DFASTLED_UNIT_TEST=1",                    # Identify as unit test build
    "-DFASTLED_FORCE_NAMESPACE=1",              # Force namespace usage to avoid conflicts
    "-DFASTLED_USE_PROGMEM=0",                  # Disable PROGMEM usage in tests
    "-DSTUB_PLATFORM",                          # Use stub platform for testing
]

# Core compiler flags that control compilation behavior
compiler_flags = [
    # Language Standard and Compatibility
    "-std=gnu++17",                             # Use GNU C++17 standard with extensions
    "-fpermissive",                             # Allow some non-conforming code patterns
    
    # Warning Configuration
    "-Wall",                                    # Enable all warnings
    "-Wextra",                                  # Enable extra warnings
    "-Werror=return-type",                      # Error on missing return statements
    
    # Thread Safety and Runtime Behavior
    "-fno-threadsafe-statics",                  # Disable thread-safe static initialization
    "-fno-exceptions",                          # Disable C++ exceptions
    "-fno-rtti",                                # Disable RTTI
    
    # PCH Support
    "-fpch-instantiate-templates",              # Required for proper PCH template handling
]

# Include directory flags
include_flags = [
    "-I.",                                      # Current directory
    "-Isrc",                                    # FastLED source directory
    "-Itests",                                  # Test directory
]

[build_modes.debug]
# ================================================================================================
# DEBUG BUILD MODE
# ================================================================================================
# Optimized for debugging experience with maximum debug information and runtime checking.

flags = [
    # Debug Information Generation
    "-g3",                                      # Maximum debug info
    "-fno-inline",                              # Disable function inlining for clearer debugging
    "-O0",                                      # No optimization for clearest debugging
]

link_flags = [
    # Debug Info and Error Detection
    "-g",                                       # Include debug symbols
]

[build_modes.quick]
# ================================================================================================
# QUICK BUILD MODE  
# ================================================================================================
# Optimized for fastest iteration during development. Prioritizes compilation speed.

flags = [
    # Optimization Control - Optimized for build speed
    "-O1",                                      # Light optimization
    "-g0",                                      # No debug info
    
    # Aggressive Build Speed Optimizations
    "-fno-inline-functions",                    # Disable function inlining
    "-fno-vectorize",                           # Disable vectorization optimizations 
    "-fno-unroll-loops",                        # Disable loop unrolling
    "-fno-strict-aliasing",                     # Disable strict aliasing assumptions
    "-fno-merge-constants",                     # Don't merge identical constants
    "-fno-merge-all-constants",                 # Don't merge all constants
    
    # Template and Instantiation Optimizations  
    "-fno-delayed-template-parsing",            # Parse templates immediately
    "-fmax-type-align=4",                       # Limit type alignment
]

link_flags = [
    # Optimization for Link Speed
    "-Wl,--gc-sections",                        # Remove unused code sections
    "-O1",                                      # Light optimization for linker
]

[linking.base]
# ================================================================================================
# BASE LINKING FLAGS
# ================================================================================================
# Common linking flags shared by ALL test linking operations.

flags = [
    # Note: Linker selection is set dynamically: -fuse-ld={linker} (mold/lld)
    "-pthread",                                 # Enable POSIX threads support
]

[linking.windows]
# ================================================================================================
# WINDOWS-SPECIFIC LINKING FLAGS
# ================================================================================================
# Linking flags specific to Windows builds using Clang/LLVM.

flags = [
    # Windows Subsystem and Entry Point
    "-Wl,/SUBSYSTEM:CONSOLE",                  # Console application
    "-Wl,/ENTRY:mainCRTStartup",               # Entry point
    
    # System Libraries
    "-Wl,msvcrt.lib",                         # C runtime library
    "-Wl,legacy_stdio_definitions.lib",        # Legacy stdio functions
    "-Wl,kernel32.lib",                        # Windows kernel functions
    "-Wl,user32.lib",                          # Windows user interface
    "-Wl,libcmt.lib",                          # Static C Runtime Library
    "-Wl,libvcruntime.lib",                    # VC++ Runtime
    "-Wl,libucrt.lib"                          # Universal CRT
]

[linking.unix]
# ================================================================================================
# UNIX-SPECIFIC LINKING FLAGS
# ================================================================================================
# Linking flags specific to Unix-like systems (Linux, macOS).

flags = [
    # System Libraries
    "-pthread",                                # POSIX threads support
    "-ldl",                                    # Dynamic linking support
    "-lm",                                     # Math library

    # Debug Mode Only
    "-fsanitize=address",                      # Address sanitizer (debug mode)
    "-fsanitize=undefined"                     # Undefined behavior sanitizer (debug mode)
]

[strict_mode]
# ================================================================================================
# STRICT MODE COMPILATION
# ================================================================================================
# Additional warning flags enabled in strict mode for enhanced code quality checking.

flags = [
    # Error Escalation
    "-Werror",                                  # Treat all warnings as errors
    
    # Enhanced Warning Detection
    "-Wextra",                                  # Enable extra warning checks
    
    # Type Safety and Conversion Warnings
    "-Wconversion",                             # Warn about implicit type conversions
    "-Wsign-conversion",                        # Warn about signed/unsigned conversions
    
    # Code Quality Warnings
    "-Wunused",                                 # Warn about unused variables, functions, etc.
    "-Wuninitialized",                          # Warn about uninitialized variable usage
    "-Wdouble-promotion",                       # Warn about float->double promotions
    
    # Format and Safety Warnings
    "-Wformat=2",                               # Enhanced format string checking
    "-Wcast-align",                             # Warn about alignment-breaking casts
    "-Wcast-qual",                              # Warn about qualifier-removing casts
]

# ================================================================================================
# BUILD TOOLS CONFIGURATION
# ================================================================================================
# Configuration for build tools (compilers, archivers, linkers, utilities)
# These tools can be customized for different platforms or build environments

[tools]
# Core build tools
compiler = "clang++"           # C++ compiler (used by CompilerOptions)
archiver = "ar"               # Archive tool for static libraries (used by CompilerOptions)
# linker = "ld"               # Linker tool (optional, auto-detected if not specified)

# Additional build tools for comprehensive build support
c_compiler = "clang"          # C compiler (for mixed C/C++ projects)
objcopy = "objcopy"          # Object copy utility (for firmware/embedded builds)
nm = "nm"                    # Symbol table utility (for analysis and debugging)
strip = "strip"              # Strip utility (for release builds)
ranlib = "ranlib"            # Archive indexer (for static library optimization)
