#include "test.h"
#include "fl/codec/jpeg.h"
#include "fl/bytestreammemory.h"
#include "fx/frame.h"

using namespace fl;

// Test JPEG data: 2x2 image with Red, Blue, Green, Black pixels
// Generated with PIL: Red (255,0,0), Blue (0,0,255), Green (0,255,0), Black (0,0,0)
const uint8_t test_jpeg_2x2[] = {
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,
    0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x03, 0x02, 0x02, 0x02, 0x02, 0x05, 0x04,
    0x04, 0x03, 0x04, 0x06, 0x05, 0x06, 0x06, 0x06, 0x05, 0x06, 0x06, 0x06, 0x07, 0x09, 0x08, 0x06,
    0x07, 0x09, 0x07, 0x06, 0x06, 0x08, 0x0B, 0x08, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x06, 0x08,
    0x0B, 0x0C, 0x0B, 0x0A, 0x0C, 0x09, 0x0A, 0x0A, 0x0A, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x05, 0x03, 0x03, 0x05, 0x0A, 0x07, 0x06, 0x07, 0x0A, 0x0A, 0x0A, 0x0A,
    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0xFF, 0xC0,
    0x00, 0x11, 0x08, 0x00, 0x02, 0x00, 0x02, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11,
    0x01, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05,
    0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
    0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23,
    0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17,
    0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
    0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A,
    0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
    0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
    0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
    0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5,
    0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1,
    0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xC4, 0x00, 0x1F, 0x01, 0x00, 0x03,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x11, 0x00,
    0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00,
    0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13,
    0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15,
    0x62, 0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27,
    0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
    0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
    0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,
    0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
    0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4,
    0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE2,
    0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
    0xFA, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xFC,
    0x52, 0xFD, 0xAF, 0xB5, 0x6D, 0x57, 0x46, 0xFD, 0xAC, 0xFE, 0x28, 0xE9, 0x1A, 0x46, 0xA7, 0x71,
    0x69, 0x69, 0x69, 0xF1, 0x17, 0x5B, 0x86, 0xD6, 0xD6, 0xDA, 0x66, 0x8E, 0x38, 0x63, 0x5B, 0xF9,
    0x95, 0x51, 0x15, 0x48, 0x0A, 0xA0, 0x00, 0x00, 0x1C, 0x00, 0x31, 0x45, 0x14, 0x57, 0xF6, 0xFF,
    0x00, 0x09, 0xFF, 0x00, 0xC9, 0x2D, 0x80, 0xFF, 0x00, 0xAF, 0x34, 0xBF, 0xF4, 0x88, 0x9F, 0x35,
    0x5F, 0xF8, 0xF2, 0xF5, 0x7F, 0x99, 0xFF, 0xD9
};
const size_t test_jpeg_2x2_size = 696;

// Test JPEG decoder availability
TEST_CASE("JPEG availability") {
    bool jpegSupported = Jpeg::isSupported();

    // JPEG is now implemented via TJpg_Decoder
    CHECK(jpegSupported);
}

// Test JPEG decoder creation
TEST_CASE("JPEG decoder creation") {
    JpegDecoderConfig config;
    config.format = PixelFormat::RGB888;
    config.quality = JpegDecoderConfig::Medium;

    fl::string error_msg;
    auto decoder = Jpeg::createDecoder(config, &error_msg);

    // JPEG is now implemented, should return valid decoder
    CHECK(decoder != nullptr);
    CHECK_FALSE(decoder->isReady());
}

// Test JPEG decoder with null stream
TEST_CASE("JPEG decoder with null stream") {
    JpegDecoderConfig config;
    auto decoder = Jpeg::createDecoder(config);

    CHECK(decoder != nullptr);

    // Should fail with null stream
    CHECK_FALSE(decoder->begin(fl::ByteStreamPtr()));
    CHECK(decoder->hasError());
}

// Test JPEG decoder lifecycle
TEST_CASE("JPEG decoder lifecycle") {
    JpegDecoderConfig config;
    auto decoder = Jpeg::createDecoder(config);

    CHECK(decoder != nullptr);

    // Create a simple test stream
    fl::u8 testData[] = {0xFF, 0xD8, 0xFF, 0xE0}; // JPEG header
    auto stream = fl::make_shared<fl::ByteStreamMemory>(sizeof(testData));
    stream->write(testData, sizeof(testData));

    // Test lifecycle
    CHECK_FALSE(decoder->isReady());

    // Begin should fail with incomplete JPEG data (only 4 bytes)
    CHECK_FALSE(decoder->begin(stream));

    // End should work
    decoder->end();
    CHECK_FALSE(decoder->isReady());
}

// Test JPEG configuration options
TEST_CASE("JPEG configuration") {
    // Test different quality settings
    {
        JpegDecoderConfig config(JpegDecoderConfig::Low, PixelFormat::RGB565);
        CHECK(config.quality == JpegDecoderConfig::Low);
        CHECK(config.format == PixelFormat::RGB565);
    }

    {
        JpegDecoderConfig config(JpegDecoderConfig::High, PixelFormat::RGBA8888);
        CHECK(config.quality == JpegDecoderConfig::High);
        CHECK(config.format == PixelFormat::RGBA8888);
    }

    // Test default constructor
    {
        JpegDecoderConfig config;
        CHECK(config.quality == JpegDecoderConfig::Medium);
        CHECK(config.format == PixelFormat::RGB888);
        CHECK(config.useHardwareAcceleration == true);
        CHECK(config.maxWidth == 1920);
        CHECK(config.maxHeight == 1080);
    }
}

// Test JPEG decoding with real image data
TEST_CASE("JPEG decoder with real 2x2 image") {
    JpegDecoderConfig config;
    config.format = PixelFormat::RGB888;  // Use RGB888 for easy color verification
    auto decoder = Jpeg::createDecoder(config);

    CHECK(decoder != nullptr);

    // Create stream with actual JPEG data
    auto stream = fl::make_shared<fl::ByteStreamMemory>(test_jpeg_2x2_size);
    fl::size bytesWritten = stream->write(test_jpeg_2x2, test_jpeg_2x2_size);
    if (bytesWritten != test_jpeg_2x2_size) {
        FAIL("Failed to write all JPEG data to stream. Expected: " << test_jpeg_2x2_size << ", Written: " << bytesWritten);
    }

    // Check if stream has data after writing
    if (!stream->available(1)) {
        FAIL("Stream reports no data available after writing " << bytesWritten << " bytes");
    }
    if (!stream->available(test_jpeg_2x2_size)) {
        FAIL("Stream doesn't have all " << test_jpeg_2x2_size << " bytes available after writing");
    }

    // Begin decoding
    if (!decoder->begin(stream)) {
        fl::string error_msg;
        if (decoder->hasError(&error_msg)) {
            FAIL("Decoder begin failed: " << error_msg);
        } else {
            FAIL("Decoder begin failed with no error message");
        }
    }
    CHECK(decoder->isReady());

    // Decode the image
    fl::DecodeResult result = decoder->decode();
    if (result != fl::DecodeResult::Success) {
        fl::string decode_error_msg;
        if (decoder->hasError(&decode_error_msg)) {
            FAIL("Decoder decode failed: " << decode_error_msg);
        } else {
            FAIL("Decoder decode failed with no error message");
        }
    }

    // Get the decoded frame
    Frame frame = decoder->getCurrentFrame();
    CHECK(frame.isValid());
    CHECK(frame.getWidth() == 2);
    CHECK(frame.getHeight() == 2);
    CHECK(frame.getFormat() == PixelFormat::RGB888);

    // For now, just verify that we got a valid frame
    // Note: The actual pixel data verification would require access to the frame's pixel buffer
    // This test confirms the decoder works end-to-end with real JPEG data

    decoder->end();
    CHECK_FALSE(decoder->isReady());
}