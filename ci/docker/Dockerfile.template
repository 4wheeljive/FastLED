# syntax=docker/dockerfile:1.7

# PlatformIO Platform-Specific Image for FastLED
# This image builds on the base image and pre-caches platform-specific toolchains
# (e.g., avr-gcc for Arduino Uno, xtensa-esp32-elf-gcc for ESP32, etc.)

# Use FastLED PlatformIO base image (contains uv, PlatformIO, and all Python dependencies)
FROM fastled-platformio:latest

# Accept platform name as build argument
ARG PLATFORM_NAME
ENV PLATFORM_NAME=${PLATFORM_NAME}

# Copy build script for dependency caching
# Using a script file makes Docker layer caching more deterministic
COPY build.sh /tmp/build.sh

# Run initial compilation to pre-download and BAKE-IN all platform dependencies
# This downloads platform toolchains, framework files, and libraries INTO THE IMAGE
# Everything is stored in ~/.platformio/packages and ~/.platformio/platforms
# These files become part of the Docker image layers (NOT an external cache)
# Runs: bash compile <platform> Blink to download everything
RUN chmod +x /tmp/build.sh && \
    /tmp/build.sh

# The platform toolchains are now BAKED INTO the image at ~/.platformio
# /fastled remains pristine with library source downloaded from GitHub
# At runtime, mount your local FastLED code to update /fastled


# Create output directory for compiled binaries
RUN mkdir -p /fastled/output

# Copy entrypoint script for handling output directory
COPY entrypoint.sh /usr/local/bin/fastled-entrypoint.sh
RUN chmod +x /usr/local/bin/fastled-entrypoint.sh

# Set working directory to FastLED root
WORKDIR /fastled

# Set entrypoint to handle output directory
ENTRYPOINT ["/usr/local/bin/fastled-entrypoint.sh"]

# Default command - can be overridden at runtime
CMD ["/bin/bash"]

# Metadata labels (can be overridden with --label flags during build)
LABEL maintainer="FastLED Team"
LABEL description="PlatformIO Docker image with pre-cached dependencies for FastLED"
LABEL version="1.0.0"
