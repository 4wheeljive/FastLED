# ================================================================================================
# FastLED Build Flags Configuration
# ================================================================================================
# 
# This file centralizes ALL compilation flags used by both sketch compilation and libfastled 
# compilation to ensure they remain synchronized and compatible across the entire build system.

[tools]
# Build tool configuration
compiler = "sccache"
archiver = "ar"
c_compiler = "clang"
objcopy = "objcopy"
nm = "nm"
strip = "strip"
ranlib = "ranlib"

[all]
# Universal compilation flags
compiler_flags = [
    "clang++",  # Actual compiler after sccache
    "-std=gnu++17",
    "-fpermissive",
    "-Wall",
    "-Wextra",
    "-fno-exceptions",
    "-fno-rtti",
]

defines = [
    "STUB_PLATFORM",
    "FASTLED_UNIT_TEST=1",
]

include_flags = [
    "-I.",
    "-Isrc",
    "-Itests",
]

[linking.base]
flags = [
    "-pthread",
]

[build_modes.quick]
flags = [
    "-O1",
    "-g0",
    "-fno-inline-functions",
    "-fno-vectorize",
    "-fno-unroll-loops",
    "-fno-strict-aliasing",
]

link_flags = []

[strict_mode]
flags = [
    "-Werror",
    "-Wextra",
    "-Wconversion",
    "-Wsign-conversion",
    "-Wunused",
    "-Wuninitialized",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wcast-align",
    "-Wcast-qual",
    "-Werror=return-type",
]

[test]
# Test-specific preprocessor defines
defines = [
    # FastLED Test Configuration
    "-DFASTLED_UNIT_TEST=1",                    # Identify as unit test build
    "-DFASTLED_FORCE_NAMESPACE=1",              # Force namespace usage to avoid conflicts
    "-DFASTLED_USE_PROGMEM=0",                  # Disable PROGMEM usage in tests
    "-DSTUB_PLATFORM",                          # Use stub platform for testing
    "-DARDUINO=10808",                          # Arduino version compatibility
    "-DFASTLED_USE_STUB_ARDUINO",               # Use stub Arduino implementation
    "-DSKETCH_HAS_LOTS_OF_MEMORY=1",            # Assume lots of memory available
    "-DFASTLED_STUB_IMPL",                      # Use stub implementations
    "-DFASTLED_USE_JSON_UI=1",                  # Enable JSON UI features
    "-DFASTLED_TESTING",                        # Enable testing features
    "-DFASTLED_NO_AUTO_NAMESPACE",              # Disable automatic namespace
    "-DFASTLED_NO_PINMAP",                      # Disable pin mapping
    "-DHAS_HARDWARE_PIN_SUPPORT",               # Enable hardware pin support
    "-DFASTLED_DEBUG_LEVEL=1",                  # Set debug level
    "-DDOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS", # Doctest configuration
]

# Test-specific compiler flags
compiler_flags = [
    # Language Standard and Compatibility
    "-std=c++17",                               # Base C++17 standard
    "-std=gnu++17",                             # Use GNU C++17 standard with extensions
    "-fpermissive",                             # Allow some non-conforming code patterns
    
    # Warning Configuration
    "-Wall",                                    # Enable all warnings
    "-Wextra",                                  # Enable extra warnings
    "-Werror=return-type",                      # Error on missing return statements
    
    # Thread Safety and Runtime Behavior
    "-fno-threadsafe-statics",                  # Disable thread-safe static initialization
    "-fno-exceptions",                          # Disable C++ exceptions
    "-fno-rtti",                                # Disable RTTI
    
    # PCH Support
    "-fpch-instantiate-templates",              # Required for proper PCH template handling
]

# Test-specific include flags
include_flags = [
    "-I.",                                      # Current directory
    "-Isrc",                                    # FastLED source directory
    "-Itests",                                  # Test directory
]

[linking.windows]
# ================================================================================================
# WINDOWS-SPECIFIC LINKING FLAGS
# ================================================================================================
# Linking flags specific to Windows builds using Clang/LLVM.

flags = [
    # Windows Subsystem and Entry Point
    "-Wl,/SUBSYSTEM:CONSOLE",                  # Console application
    "-Wl,/ENTRY:mainCRTStartup",               # Entry point
    
    # System Libraries
    "-Wl,msvcrt.lib",                         # C runtime library
    "-Wl,legacy_stdio_definitions.lib",        # Legacy stdio functions
    "-Wl,kernel32.lib",                        # Windows kernel functions
    "-Wl,user32.lib",                          # Windows user interface
    "-Wl,libcmt.lib",                          # Static C Runtime Library
    "-Wl,libvcruntime.lib",                    # VC++ Runtime
    "-Wl,libucrt.lib"                          # Universal CRT
]

[linking.unix]
# ================================================================================================
# UNIX-SPECIFIC LINKING FLAGS
# ================================================================================================
# Linking flags specific to Unix-like systems (Linux, macOS).

flags = [
    # Core Libraries
    "-pthread",                                 # POSIX threads support
    "-lm",                                     # Math library
    "-ldl",                                    # Dynamic loading library
    
    # Platform-specific libraries (added as needed)
    # Note: Additional platform-specific flags can be added here
]
