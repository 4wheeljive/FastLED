#!/bin/bash

set -e

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            echo "Usage: bash lint [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help   Show this help message"
            echo ""
            echo "This script runs comprehensive linting for Python, C++, and JavaScript."
            echo "JavaScript linting is now included by default (it's fast!)."
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Unset VIRTUAL_ENV to avoid warnings about mismatched paths
unset VIRTUAL_ENV


echo "🚀 Running FastLED Comprehensive Linting Suite"
echo "=============================================="

# Python linting
echo ""
echo "📝 PYTHON LINTING"
echo "------------------"
echo "Running ruff check (linting)"
uv run ruff check --fix test.py
uv run ruff check --fix ci --exclude ci/tmp/ --exclude ci/wasm/
uv run ruff check --fix dev/dev.py
echo "Running ruff format (formatting + import sorting)"
uv run ruff format test.py
uv run ruff format ci --exclude ci/tmp/ --exclude ci/wasm/
uv run ruff format dev/dev.py
echo "Running pyright ci"
# Check if pyright needs to run using intelligent caching
if uv run python ci/pyright-cached.py ci --threads; then
    # Cache hit - pyright was skipped or ran successfully
    true
else
    # Cache miss or error - fall back to regular pyright
    echo "Falling back to regular pyright..."
    uv run pyright ci --threads
fi

export CLANG_FORMAT_STYLE="{SortIncludes: false}"

# C++ linting
echo ""
echo "🔧 C++ LINTING"
echo "---------------"
folders=(
    #"src/lib8tion"
    #"src/platforms/stub"
    #"src/platforms/apollo3"  # clang-format breaks apollo3
    #"src/platforms/esp/8266"  # clang-format breaks esp8266
    #"src/platforms/arm" # clang-format breaks arm
    #"src/fx"
    #"src/fl"
    #"src/platforms/wasm"
)

for folder in "${folders[@]}"; do
  echo "Running clang-format on $folder"
  uv run ci/run-clang-format.py -i -r "$folder" || uv run ci/run-clang-format.py -i -r "$folder"
done

# JavaScript linting and enhanced checking (now included by default)
echo ""
echo "🌐 JAVASCRIPT LINTING & TYPE CHECKING"
echo "--------------------------------------"

if [ -f "ci/js/lint-js" ] && [ -f ".js-tools/deno/deno" ]; then
    echo "Running JavaScript linting"
    ci/js/lint-js
    
    echo "Running JavaScript enhanced linting & type checking"
    ci/js/check-js
    
    # Run JavaScript enhancement analysis for additional insights
    if [ -f "scripts/enhance-js-typing.py" ]; then
        echo "Running JavaScript enhancement analysis"
        python3 scripts/enhance-js-typing.py --approach summary 2>/dev/null || echo "  ℹ️  Enhancement analysis completed (some warnings expected)"
    fi
else
    echo "⚠️  JavaScript linting tools not found. Run: uv run ci/setup-js-linting.py"
fi

echo ""
echo "🎉 All linting completed!"
echo "========================="
echo ""
echo "💡 FOR AI AGENTS:"
echo "  - Use 'bash lint' for comprehensive linting (Python, C++, and JavaScript)"
echo "  - JavaScript linting is now included by default (it's fast!)"
echo "  - Use 'bash lint --help' for usage information"
