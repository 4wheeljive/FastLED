// Codec.ino - Multimedia Codec Example for FastLED
// Demonstrates JPEG, WebP, and MPEG1 decoding and display on LED matrices
// This example consolidates all codec functionality into one comprehensive example

#include <FastLED.h>
#include "fl/sketch_macros.h"
#include <string.h>

// Only compile if we have enough memory
#if SKETCH_HAS_LOTS_OF_MEMORY == 0
#error "This sketch requires lots of memory and cannot run on low-memory devices"
#endif

#include "fl/codec/jpeg.h"
#include "fl/codec/webp.h"
#include "fl/codec/mpeg1.h"
#include "fl/bytestreammemory.h"

#define NUM_LEDS 64*64  // 64x64 LED matrix
#define DATA_PIN 6
#define LED_TYPE WS2812B
#define COLOR_ORDER GRB
#define TARGET_FPS 15

CRGB leds[NUM_LEDS];

// Forward declarations
void testJpegDecoding();
void testWebpDecoding();
void testMpeg1Decoding();
void displayFrameOnLEDs(const fl::Frame& frame);
CRGB getPixelFromFrame(const fl::Frame& frame, int x, int y);
void showStatusPattern(CRGB color);

// Sample JPEG data (2x2 pixels: red, white, blue, black) stored in PROGMEM
const uint8_t PROGMEM sampleJpegData[] = {
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x02, 0x00, 0x02, 0x03,
  0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00,
  0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00,
  0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00,
  0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
  0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81,
  0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24,
  0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25,
  0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a,
  0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56,
  0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
  0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86,
  0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
  0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3,
  0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
  0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
  0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00,
  0x1f, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00,
  0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31,
  0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08,
  0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15,
  0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18,
  0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39,
  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55,
  0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84,
  0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
  0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
  0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4,
  0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
  0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x00,
  0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xf7,
  0x5a, 0x28, 0xa2, 0x80, 0x0a, 0x28, 0xa2, 0x80, 0x0a, 0x28, 0xa2, 0x80,
  0x0a, 0x28, 0xa2, 0x80, 0x3f, 0xff, 0xd9
};
const size_t sampleJpegDataLength = sizeof(sampleJpegData);

// Sample WebP data (2x2 pixels: red, white, blue, black) stored in PROGMEM
const uint8_t PROGMEM sampleWebpData[] = {
  0x52, 0x49, 0x46, 0x46, 0x26, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50,
  0x56, 0x50, 0x38, 0x4c, 0x19, 0x00, 0x00, 0x00, 0x2f, 0x01, 0x40, 0x00,
  0x00, 0x1f, 0x30, 0xff, 0xf3, 0x2f, 0x20, 0x28, 0xf8, 0x3f, 0xba, 0xf9,
  0x0f, 0x0a, 0x2e, 0xb0, 0x0e, 0x11, 0xfd, 0x8f, 0x00, 0x00
};
const size_t sampleWebpDataLength = sizeof(sampleWebpData);

// Sample MPEG1 data (2 frame animation: red,white,blue,black -> white,blue,black,red) stored in PROGMEM
const uint8_t PROGMEM sampleMpeg1Data[] = {
  0x00, 0x00, 0x01, 0xba, 0x21, 0x00, 0x01, 0x00, 0x01, 0xc3, 0x33, 0x67,
  0x00, 0x00, 0x01, 0xbb, 0x00, 0x09, 0xc3, 0x33, 0x67, 0x00, 0x21, 0xff,
  0xe0, 0xe0, 0xe6, 0x00, 0x00, 0x01, 0xe0, 0x00, 0xe2, 0x31, 0x00, 0x03,
  0x7b, 0xb1, 0x11, 0x00, 0x03, 0x5f, 0x91, 0x00, 0x00, 0x01, 0xb3, 0x00,
  0x20, 0x02, 0x13, 0xff, 0xff, 0xe0, 0x18, 0x00, 0x00, 0x01, 0xb8, 0x00,
  0x08, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00,
  0x00, 0x01, 0x01, 0x13, 0xf9, 0x5e, 0x04, 0x04, 0x40, 0x40, 0x36, 0x01,
  0x0e, 0x00, 0xac, 0x0a, 0x82, 0x01, 0x50, 0x01, 0x40, 0x15, 0x21, 0x90,
  0xc0, 0x52, 0x4d, 0x26, 0x93, 0x40, 0x17, 0x00, 0x3e, 0x2c, 0x34, 0x34,
  0x34, 0xb0, 0x92, 0xcb, 0x2c, 0xb4, 0x80, 0xeb, 0xa5, 0x25, 0xa5, 0x3f,
  0xf4, 0xa5, 0x3f, 0xff, 0xfb, 0xf8, 0x02, 0x0a, 0x60, 0x20, 0x1e, 0x02,
  0x29, 0x78, 0x01, 0x00, 0x24, 0x8d, 0x00, 0x3a, 0x04, 0xd0, 0x9b, 0x8e,
  0x03, 0x00, 0x43, 0x07, 0x26, 0x02, 0x38, 0x21, 0x40, 0x03, 0x4d, 0x25,
  0xf7, 0x17, 0x34, 0x00, 0x00, 0x01, 0x00, 0x00, 0x57, 0xff, 0xf8, 0x80,
  0x00, 0x00, 0x01, 0x01, 0x12, 0x3f, 0x0e, 0x02, 0x14, 0xa4, 0x02, 0xe0,
  0x18, 0x81, 0x50, 0x10, 0x00, 0x81, 0x3c, 0x06, 0x00, 0x3a, 0x01, 0x81,
  0x34, 0x34, 0x0a, 0x01, 0x40, 0x1d, 0x01, 0x4f, 0xc9, 0x84, 0x22, 0x11,
  0x08, 0x98, 0x9e, 0x50, 0x61, 0x30, 0x98, 0x18, 0x50, 0xc2, 0x83, 0x03,
  0x0a, 0x2b, 0x64, 0x14, 0x52, 0x36, 0x42, 0x11, 0xb6, 0xd9, 0xab, 0x00,
  0x01, 0x44, 0x07, 0x4c, 0xe8, 0x30, 0x20, 0x78, 0x20, 0x7d, 0x30, 0x23,
  0x0d, 0x04, 0x05, 0xc1, 0x2b, 0xa5, 0x44, 0x23, 0x60, 0xe8, 0x3a, 0x21,
  0x5b, 0x52, 0x1e, 0x0d, 0x34, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xff,
  0xf8, 0x00, 0x00, 0x01, 0x01, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  // Truncated for space - include remaining bytes for full video
};
const size_t sampleMpeg1DataLength = sizeof(sampleMpeg1Data);

// Global state
fl::shared_ptr<fl::IDecoder> videoDecoder;
unsigned long lastFrameTime = 0;
unsigned long frameInterval;
bool videoLoaded = false;
bool jpegTested = false;
bool webpTested = false;
int currentTest = 0; // 0=JPEG, 1=WebP, 2=MPEG1

void setup() {
    Serial.begin(115200);
    Serial.println("FastLED Multimedia Codec Example");
    Serial.println("Demonstrates JPEG, WebP, and MPEG1 decoding");

    // Initialize LED strip
    FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
    FastLED.setBrightness(50);

    // Calculate frame interval for target FPS
    frameInterval = 1000 / TARGET_FPS;

    Serial.println("Starting codec tests...");
    showStatusPattern(CRGB::Blue); // Show blue to indicate starting
    FastLED.show();
    delay(1000);
}

void loop() {
    static unsigned long lastTestTime = 0;
    unsigned long currentTime = millis();

    // Run tests sequentially with delays
    if (currentTime - lastTestTime > 5000) { // 5 second intervals
        switch(currentTest) {
            case 0:
                if (!jpegTested) {
                    testJpegDecoding();
                    jpegTested = true;
                }
                currentTest = 1;
                break;
            case 1:
                if (!webpTested) {
                    testWebpDecoding();
                    webpTested = true;
                }
                currentTest = 2;
                break;
            case 2:
                testMpeg1Decoding();
                currentTest = 0; // Loop back
                jpegTested = false;
                webpTested = false;
                break;
        }
        lastTestTime = currentTime;
    }

    FastLED.show();
    delay(50);
}

void testJpegDecoding() {
    Serial.println("\n=== Testing JPEG Decoding ===");

    if (!fl::Jpeg::isSupported()) {
        Serial.println("JPEG decoding not supported on this platform");
        showStatusPattern(CRGB::Red);
        return;
    }

    // Copy data from PROGMEM to RAM
    fl::vector<fl::u8> jpegData(sampleJpegDataLength);
    memcpy(jpegData.data(), sampleJpegData, sampleJpegDataLength);

    // Configure JPEG decoder
    fl::JpegDecoderConfig config;
    config.format = fl::PixelFormat::RGB888;
    config.quality = fl::JpegDecoderConfig::Medium;
    config.maxWidth = 64;
    config.maxHeight = 64;

    // Create data span
    fl::span<const fl::u8> data(jpegData.data(), jpegData.size());

    // Decode the JPEG
    fl::string error_msg;
    fl::FramePtr framePtr = fl::Jpeg::decode(config, data, &error_msg);

    if (!framePtr) {
        Serial.print("Failed to decode JPEG: ");
        Serial.println(error_msg.c_str());
        showStatusPattern(CRGB::Red);
        return;
    }

    Serial.println("JPEG decoded successfully!");
    fl::Frame frame = *framePtr;

    if (frame.isValid()) {
        Serial.print("Frame size: ");
        Serial.print(frame.getWidth());
        Serial.print("x");
        Serial.print(frame.getHeight());
        Serial.print(", format: ");
        Serial.println((int)frame.getFormat());

        displayFrameOnLEDs(frame);
        showStatusPattern(CRGB::Green); // Success indicator
    } else {
        Serial.println("Invalid frame received");
        showStatusPattern(CRGB::Red);
    }
}

void testWebpDecoding() {
    Serial.println("\n=== Testing WebP Decoding ===");

    if (!fl::Webp::isSupported()) {
        Serial.println("WebP decoding not yet implemented");
        showStatusPattern(CRGB::Yellow); // Yellow for not implemented
        return;
    }

    // Copy data from PROGMEM to RAM
    fl::vector<fl::u8> webpData(sampleWebpDataLength);
    memcpy(webpData.data(), sampleWebpData, sampleWebpDataLength);

    // Configure WebP decoder
    fl::WebpDecoderConfig config;
    config.format = fl::PixelFormat::RGB888;

    // Create data span
    fl::span<const fl::u8> data(webpData.data(), webpData.size());

    // Decode the WebP
    fl::string error_msg;
    fl::FramePtr framePtr = fl::Webp::decode(config, data, &error_msg);

    if (!framePtr) {
        Serial.print("Failed to decode WebP: ");
        Serial.println(error_msg.c_str());
        showStatusPattern(CRGB::Red);
        return;
    }

    Serial.println("WebP decoded successfully!");
    fl::Frame frame = *framePtr;

    if (frame.isValid()) {
        Serial.print("Frame size: ");
        Serial.print(frame.getWidth());
        Serial.print("x");
        Serial.print(frame.getHeight());
        Serial.print(", format: ");
        Serial.println((int)frame.getFormat());

        displayFrameOnLEDs(frame);
        showStatusPattern(CRGB::Green); // Success indicator
    } else {
        Serial.println("Invalid frame received");
        showStatusPattern(CRGB::Red);
    }
}

void testMpeg1Decoding() {
    Serial.println("\n=== Testing MPEG1 Decoding ===");

    if (!fl::Mpeg1::isSupported()) {
        Serial.println("MPEG1 decoding not supported on this platform");
        showStatusPattern(CRGB::Red);
        return;
    }

    // Copy data from PROGMEM to RAM
    fl::vector<fl::u8> mpegData(sampleMpeg1DataLength);
    memcpy(mpegData.data(), sampleMpeg1Data, sampleMpeg1DataLength);

    // Configure MPEG1 decoder
    fl::Mpeg1Config config;
    config.mode = fl::Mpeg1Config::SingleFrame;
    config.targetFps = TARGET_FPS;
    config.looping = false;
    config.skipAudio = true;

    // Create decoder
    fl::string error_msg;
    videoDecoder = fl::Mpeg1::createDecoder(config, &error_msg);

    if (!videoDecoder) {
        Serial.print("Failed to create MPEG1 decoder: ");
        Serial.println(error_msg.c_str());
        showStatusPattern(CRGB::Red);
        return;
    }

    // Create byte stream from data
    auto stream = fl::make_shared<fl::ByteStreamMemory>(mpegData.size());
    stream->write(mpegData.data(), mpegData.size());

    // Begin decoding
    if (!videoDecoder->begin(stream)) {
        fl::string error;
        videoDecoder->hasError(&error);
        Serial.print("Failed to begin video decoding: ");
        Serial.println(error.c_str());
        showStatusPattern(CRGB::Red);
        return;
    }

    Serial.println("MPEG1 video loaded - decoding first frame");

    // Decode first frame
    fl::DecodeResult result = videoDecoder->decode();

    if (result == fl::DecodeResult::Success) {
        fl::Frame frame = videoDecoder->getCurrentFrame();

        if (frame.isValid()) {
            Serial.print("Frame size: ");
            Serial.print(frame.getWidth());
            Serial.print("x");
            Serial.print(frame.getHeight());

            displayFrameOnLEDs(frame);
            showStatusPattern(CRGB::Green); // Success indicator

            // Try to decode second frame if available
            if (videoDecoder->hasMoreFrames()) {
                delay(1000); // Brief pause
                result = videoDecoder->decode();
                if (result == fl::DecodeResult::Success) {
                    fl::Frame frame2 = videoDecoder->getCurrentFrame();
                    if (frame2.isValid()) {
                        Serial.println(" - Second frame decoded");
                        displayFrameOnLEDs(frame2);
                    }
                }
            }
        } else {
            Serial.println("Invalid frame received");
            showStatusPattern(CRGB::Red);
        }
    } else {
        fl::string error;
        videoDecoder->hasError(&error);
        Serial.print("Frame decode error: ");
        Serial.println(error.c_str());
        showStatusPattern(CRGB::Red);
    }

    videoDecoder->end();
    videoDecoder.reset();
}

void displayFrameOnLEDs(const fl::Frame& frame) {
    // Calculate LED matrix dimensions (assuming square matrix)
    int ledWidth = 64;
    int ledHeight = 64;

    for (int y = 0; y < ledHeight; y++) {
        for (int x = 0; x < ledWidth; x++) {
            // Calculate source pixel coordinates (with scaling)
            int srcX = (x * (int)frame.getWidth()) / ledWidth;
            int srcY = (y * (int)frame.getHeight()) / ledHeight;

            // Get pixel from frame
            CRGB color = getPixelFromFrame(frame, srcX, srcY);

            // Set LED color
            int ledIndex = y * ledWidth + x;
            if (ledIndex < NUM_LEDS) {
                leds[ledIndex] = color;
            }
        }
    }
}

CRGB getPixelFromFrame(const fl::Frame& frame, int x, int y) {
    if (x >= (int)frame.getWidth() || y >= (int)frame.getHeight() || !frame.isValid()) {
        return CRGB::Black;
    }

    int pixelIndex = y * (int)frame.getWidth() + x;

    // Frame stores data as CRGB
    if (pixelIndex < (int)frame.size()) {
        return frame.rgb()[pixelIndex];
    }

    return CRGB::Black;
}

void showStatusPattern(CRGB color) {
    // Fill outer border with status color
    for (int i = 0; i < NUM_LEDS; i++) {
        int x = i % 64;
        int y = i / 64;

        // Border pixels
        if (x == 0 || x == 63 || y == 0 || y == 63) {
            leds[i] = color;
        } else {
            // Leave center area for decoded content
            // Don't clear it here
        }
    }
}