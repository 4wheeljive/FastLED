FL_PROGMEM const struct HSpr_35disk {
  uint16_t datasize = 148;
  uint16_t frames = 1;
  uint16_t duration = 0;
  uint8_t flags = 0;
  uint8_t palette_entries = 12;
  uint8_t crgb[0] = {
    // 0x00, 0x00, 0x00,  // original palette index 11
    // 0x00, 0x44, 0x77,  // original palette index 10
    // 0x96, 0x00, 0x18,  // original palette index 4
    // 0x00, 0x69, 0xb3,  // original palette index 9
    // 0xdf, 0x00, 0x29,  // original palette index 5
    // 0xff, 0xff, 0xff,  // original palette index 8
    // 0xbf, 0xbf, 0xbf,  // original palette index 7
    // 0xd9, 0xd9, 0xd9,  // original palette index 1
    // 0x8c, 0x8c, 0x8c,  // original palette index 2
    // 0xb3, 0xb3, 0xb3,  // original palette index 6
    // 0xa6, 0xa6, 0xa6,  // original palette index 0
    // 0x80, 0x80, 0x80,  // original palette index 3
  };
  uint8_t hs_data[148] = {
    0x00, 0x03, 0xa2, 0x5d, 0xf2, 0xd0, 0x08, 0xc4, 0x02, 0xd3, 0xb3, 0xef, 0xc0, 0x25, 0x3f, 0xff,
    0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xf6, 0x7b, 0x3d, 0x9c, 0x66, 0x33, 0x19, 0xb3, 0xd9, 0xec, 0xf4,
    0xda, 0x6d, 0x36, 0x03, 0x01, 0x80, 0x80, 0x40, 0x60, 0x30, 0x20, 0x00, 0x88, 0x0c, 0x06, 0x01,
    0x01, 0x81, 0xc0, 0x60, 0x80, 0x01, 0x00, 0xc0, 0x40, 0x20, 0x50, 0x50, 0x00, 0x80, 0xf0, 0x20,
    0x78, 0x28, 0x30, 0x00, 0x40, 0x7c, 0x80, 0x3c, 0x20, 0x7c, 0x7c, 0x1c, 0x3c, 0x1e, 0x0e, 0x0f,
    0x0b, 0x08, 0x08, 0x06, 0x83, 0xc2, 0x01, 0xe1, 0x00, 0x60, 0x80, 0x01, 0xc1, 0x60, 0xe0, 0x60,
    0x01, 0x80, 0xf0, 0xa1, 0xf1, 0xd0, 0x18, 0x4c, 0x26, 0x0d, 0x0a, 0x84, 0xc2, 0x41, 0x00, 0x81,
    0xe1, 0xe0, 0x70, 0x30, 0x90, 0x30, 0x78, 0x88, 0x30, 0x3c, 0x10, 0x84, 0x10, 0x3c, 0x1b, 0x40,
    0x14, 0x0e, 0x03, 0x0a, 0x81, 0xc0, 0xc6, 0x01, 0x01, 0xe0, 0xd8, 0x40, 0xa0, 0x30, 0xb0, 0x00,
    0x50, 0x48, 0x28, 0x00,
  };
} HSpr_35disk;

// "8bit_avatar" (GIF orig:397 raw_payload:1328 shrunk_payload:288 total:296 bytes)
// Compared to GIF: 74.56% 	Compared to raw: 22.29%
// using GIF index 15 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 15; loop = 0; transparency = 15; )

FL_PROGMEM const struct HSpr_8bit_avatar {
	uint16_t datasize = 288;
	uint16_t frames = 5;
	uint16_t duration = 500;
	uint8_t flags = 0;
	uint8_t palette_entries = 16;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 15
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xcc, 0xcc, 0xcc,  // original palette index 7
		// 0x88, 0x88, 0x88,  // original palette index 6
		// 0xff, 0x00, 0x00,  // original palette index 1
		// 0xff, 0x6d, 0x6d,  // original palette index 11
		// 0x55, 0x55, 0x55,  // original palette index 12
		// 0xbb, 0xbb, 0xbb,  // original palette index 4
		// 0x99, 0x99, 0x99,  // original palette index 13
		// 0x22, 0x22, 0x22,  // original palette index 10
		// 0xff, 0xff, 0xff,  // original palette index 2
		// 0xdd, 0xdd, 0xdd,  // original palette index 8
		// 0x66, 0x66, 0x66,  // original palette index 9
		// 0x44, 0x44, 0x44,  // original palette index 3
		// 0x77, 0x77, 0x77,  // original palette index 5
		// 0xee, 0xee, 0xee,  // original palette index 14
	};
	uint8_t hs_data[288] = {
		0x00, 0x05, 0xe6, 0x73, 0x39, 0x98, 0x8c, 0x46, 0x23, 0xff, 0x00, 0x80, 0x7f, 0xed, 0xb6, 0xda, 
		0xad, 0x56, 0xab, 0xbb, 0xdd, 0xee, 0xf3, 0x39, 0x9c, 0xcc, 0x8a, 0x45, 0x22, 0xff, 0xff, 0xff, 
		0xfd, 0xde, 0xef, 0x76, 0xcd, 0x66, 0xb3, 0x51, 0x28, 0x94, 0x4b, 0xbd, 0xde, 0xef, 0xee, 0xf7, 
		0x7b, 0xa0, 0x20, 0x06, 0xb0, 0x28, 0x18, 0x3f, 0xf8, 0x3c, 0xe8, 0x02, 0x64, 0x10, 0x0a, 0x28, 
		0x10, 0x0e, 0x0a, 0x0a, 0x06, 0x05, 0x0a, 0x08, 0x07, 0x04, 0x05, 0x03, 0x02, 0x85, 0x07, 0x86, 
		0x00, 0x05, 0x07, 0x8f, 0x82, 0x0c, 0x04, 0x83, 0x85, 0x83, 0xc8, 0x04, 0x03, 0xa0, 0x05, 0x03, 
		0x86, 0x84, 0x02, 0x28, 0x89, 0x80, 0x34, 0x41, 0xa0, 0xf0, 0x28, 0x40, 0x38, 0x54, 0x26, 0x15, 
		0x07, 0x81, 0xc2, 0xe1, 0x60, 0xf1, 0x30, 0x30, 0x58, 0x38, 0x54, 0x18, 0x1e, 0x22, 0x19, 0x0a, 
		0x86, 0x80, 0xc1, 0x42, 0x44, 0x02, 0x61, 0x10, 0xa8, 0x54, 0x2a, 0x18, 0x0e, 0x13, 0x0c, 0x85, 
		0x43, 0xa0, 0xd0, 0x30, 0xf8, 0xa8, 0x39, 0x70, 0x1c, 0x2e, 0x1c, 0x0f, 0x10, 0x6c, 0x09, 0x0b, 
		0x81, 0x83, 0xc4, 0x43, 0x85, 0xe3, 0xa0, 0x30, 0x38, 0x7c, 0x2a, 0x16, 0x4f, 0x14, 0x00, 0x57, 
		0x0e, 0x87, 0x43, 0x87, 0x20, 0xa1, 0x30, 0xc0, 0x40, 0x38, 0x74, 0x3a, 0x1b, 0x01, 0x4c, 0x82, 
		0x85, 0x40, 0xe0, 0x30, 0xd8, 0x38, 0x20, 0x24, 0x2a, 0x1d, 0x01, 0x85, 0x43, 0x61, 0xb0, 0xe8, 
		0x50, 0x3c, 0x1c, 0x36, 0x1b, 0x02, 0x87, 0x43, 0x61, 0x30, 0x18, 0x52, 0x3c, 0x1c, 0x34, 0x1e, 
		0x09, 0x4c, 0x0a, 0x1a, 0xe6, 0x06, 0x08, 0x08, 0x0f, 0x1b, 0x0b, 0x84, 0x83, 0xc5, 0x43, 0xa1, 
		0xd0, 0x71, 0xe0, 0x20, 0x78, 0x92, 0xa8, 0x40, 0x78, 0xa8, 0x6c, 0x36, 0x19, 0x0a, 0x17, 0x8b, 
		0x01, 0x82, 0x84, 0x43, 0x81, 0xe3, 0x52, 0xe0, 0x81, 0xe7, 0x21, 0x70, 0x60, 0x78, 0xa8, 0x3c, 
		0x1e, 0x17, 0x0f, 0x37, 0x8d, 0x87, 0xc3, 0x01, 0xe2, 0x80, 0x1f, 0xc0, 0x1f, 0xc0, 0x03, 0x80, 
	};
} HSpr_8bit_avatar;

// "16x16_oric" (GIF orig:3947 raw_payload:6752 shrunk_payload:3053 total:3061 bytes)
// Compared to GIF: 77.55% 	Compared to raw: 45.33%
// using GIF index 30 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 30; loop = 0; transparency = 30; )

FL_PROGMEM const struct HSpr_16x16_oric {
	uint16_t datasize = 3053;
	uint16_t frames = 26;
	uint16_t duration = 40;
	uint8_t flags = 0;
	uint8_t palette_entries = 32;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 30
		// 0xff, 0xff, 0xff,  // original palette index 31
		// 0xc6, 0xc6, 0xc6,  // original palette index 15
		// 0x8c, 0x8c, 0x8c,  // original palette index 12
		// 0x7b, 0x7b, 0x7b,  // original palette index 11
		// 0xa5, 0xa5, 0xa5,  // original palette index 14
		// 0xe7, 0xe7, 0xe7,  // original palette index 17
		// 0x29, 0x29, 0x29,  // original palette index 7
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x21, 0x00, 0x00,  // original palette index 5
		// 0xff, 0x00, 0x00,  // original palette index 21
		// 0xf7, 0xb5, 0xb5,  // original palette index 19
		// 0x08, 0x00, 0x00,  // original palette index 1
		// 0xd6, 0x00, 0x00,  // original palette index 16
		// 0xff, 0x6b, 0x6b,  // original palette index 24
		// 0xff, 0xf7, 0xf7,  // original palette index 29
		// 0x08, 0x08, 0x08,  // original palette index 2
		// 0xff, 0x29, 0x29,  // original palette index 22
		// 0x5a, 0x4a, 0x4a,  // original palette index 10
		// 0xff, 0x7b, 0x7b,  // original palette index 25
		// 0xf7, 0x00, 0x00,  // original palette index 18
		// 0xf7, 0xf7, 0xf7,  // original palette index 20
		// 0x10, 0x10, 0x10,  // original palette index 3
		// 0xff, 0xe7, 0xe7,  // original palette index 27
		// 0x42, 0x42, 0x42,  // original palette index 9
		// 0xff, 0x5a, 0x5a,  // original palette index 23
		// 0x39, 0x39, 0x39,  // original palette index 8
		// 0x21, 0x21, 0x21,  // original palette index 6
		// 0xff, 0xd6, 0xd6,  // original palette index 26
		// 0x94, 0x29, 0x29,  // original palette index 13
		// 0xff, 0xef, 0xef,  // original palette index 28
		// 0x18, 0x18, 0x18,  // original palette index 4
	};
	uint8_t hs_data[3053] = {
		0x00, 0x02, 0xff, 0xff, 0xff, 0xfc, 0x6e, 0x37, 0x1b, 0x19, 0x8c, 0xc6, 0x5e, 0xef, 0x77, 0xbd, 
		0x2e, 0x97, 0x4b, 0xe7, 0xf3, 0xf9, 0xe5, 0x32, 0x99, 0x48, 0x5c, 0x14, 0x84, 0x34, 0x0a, 0x01, 
		0x00, 0xfb, 0xed, 0x76, 0xb0, 0x88, 0x04, 0x03, 0xac, 0x0b, 0x05, 0x6b, 0xb5, 0xff, 0xfe, 0xff, 
		0x78, 0x44, 0x22, 0x11, 0xff, 0x94, 0xca, 0x6b, 0x54, 0xaa, 0x57, 0xfe, 0xf7, 0x7b, 0xfb, 0x87, 
		0x41, 0x7d, 0xfe, 0xf1, 0x08, 0x84, 0x43, 0xff, 0xe7, 0xf3, 0xd0, 0xa8, 0x54, 0x2f, 0xfd, 0x6a, 
		0xb5, 0x39, 0x9c, 0xce, 0x64, 0x32, 0x19, 0x0f, 0xff, 0xad, 0xd6, 0xca, 0x4a, 0x65, 0x3f, 0xff, 
		0x7f, 0xbe, 0x31, 0x18, 0x8c, 0x40, 0x40, 0x01, 0x60, 0x50, 0x38, 0x24, 0x16, 0x0c, 0x0b, 0x0c, 
		0x0d, 0x05, 0x07, 0x23, 0x02, 0x84, 0x42, 0x61, 0x50, 0xa8, 0x54, 0x2c, 0x1c, 0x0e, 0x0a, 0x0d, 
		0x07, 0x08, 0x86, 0x43, 0x61, 0x50, 0xa8, 0x74, 0x3c, 0x3a, 0x0e, 0x21, 0x08, 0x88, 0x40, 0xe0, 
		0xd0, 0xf8, 0x8c, 0x2a, 0x15, 0x0d, 0x89, 0x07, 0x81, 0xc4, 0xa1, 0x10, 0x88, 0x14, 0x06, 0x03, 
		0x13, 0x85, 0x42, 0xa2, 0x90, 0x90, 0x40, 0x38, 0xac, 0x5a, 0x10, 0x16, 0x05, 0x0b, 0x8a, 0x0f, 
		0x01, 0x45, 0xa1, 0x10, 0x48, 0x0c, 0x06, 0x0d, 0x08, 0x84, 0x40, 0xe0, 0x31, 0x72, 0x58, 0x28, 
		0x9c, 0x06, 0x30, 0x19, 0x07, 0x15, 0x84, 0x42, 0x20, 0x83, 0xc0, 0x71, 0x98, 0x0c, 0x06, 0x34, 
		0x0f, 0x07, 0x01, 0x83, 0xc2, 0x23, 0x70, 0xe8, 0x54, 0x2a, 0x23, 0x0f, 0x80, 0xc0, 0xa1, 0x10, 
		0x88, 0x28, 0x3c, 0x14, 0x0c, 0xf2, 0x12, 0x39, 0x01, 0x83, 0x41, 0xe1, 0x11, 0x68, 0xa8, 0x3c, 
		0x14, 0x56, 0x24, 0x4b, 0x05, 0x1d, 0x82, 0x44, 0xa2, 0x01, 0xe0, 0xb0, 0x18, 0xf0, 0xf0, 0x14, 
		0x75, 0x22, 0x0e, 0x20, 0x0e, 0x09, 0x01, 0x8c, 0x8f, 0x01, 0x46, 0x22, 0xd1, 0x68, 0xdc, 0x11, 
		0x80, 0x15, 0x10, 0x0a, 0x15, 0x11, 0x8c, 0x80, 0x03, 0xc0, 0x61, 0x60, 0xe0, 0x40, 0x01, 0x50, 
		0x18, 0x9c, 0x38, 0x00, 0x31, 0xfa, 0x36, 0x2a, 0x6f, 0x06, 0xfd, 0x15, 0x18, 0x84, 0x3f, 0x46, 
		0x83, 0xc1, 0x3f, 0x46, 0x03, 0xc1, 0x3f, 0x46, 0x46, 0x21, 0x0f, 0xd1, 0xb1, 0x88, 0x43, 0xf4, 
		0x68, 0x7c, 0x13, 0xf4, 0x58, 0x7c, 0x13, 0xf4, 0x68, 0x3c, 0x13, 0xf4, 0x60, 0x3c, 0x13, 0xf4, 
		0x60, 0x3c, 0x13, 0xf4, 0x60, 0x3c, 0x13, 0xf4, 0x64, 0x12, 0x30, 0xfd, 0x1b, 0x19, 0x0e, 0x82, 
		0x00, 0x0d, 0x7e, 0x8d, 0x7f, 0x84, 0x7e, 0x8a, 0x7f, 0x82, 0x7e, 0x8c, 0x39, 0x82, 0x7e, 0x8c, 
		0x3a, 0x82, 0x7e, 0x8c, 0x89, 0x2d, 0x01, 0x3f, 0x45, 0xc1, 0x20, 0x2f, 0xd1, 0x11, 0xf6, 0xe8, 
		0x30, 0x78, 0x27, 0xe8, 0xc8, 0xd8, 0x48, 0x13, 0xf4, 0x5c, 0x5a, 0x10, 0xfd, 0x0b, 0x15, 0x87, 
		0xc1, 0x9f, 0xa1, 0x20, 0x91, 0xb7, 0xe8, 0x98, 0xfb, 0xf4, 0x14, 0x12, 0x0a, 0xfd, 0x1b, 0x04, 
		0x80, 0xbf, 0x46, 0xc1, 0x20, 0x2f, 0xd1, 0xb0, 0x30, 0x78, 0x37, 0xe8, 0xa7, 0xfa, 0x27, 0xe8, 
		0xc8, 0xac, 0x05, 0xfa, 0x36, 0x21, 0x04, 0x7e, 0x8d, 0x08, 0x82, 0x7e, 0x8c, 0x89, 0x3f, 0x47, 
		0x45, 0x61, 0x0f, 0xd0, 0x43, 0xc0, 0x6f, 0xd0, 0xd0, 0x28, 0x43, 0xf4, 0x6c, 0x42, 0x10, 0xfd, 
		0x1d, 0x16, 0x7e, 0x8e, 0x8c, 0x3f, 0x46, 0xc2, 0x21, 0x0f, 0xd1, 0xb0, 0x78, 0x43, 0xf4, 0x6c, 
		0x0a, 0x10, 0xfd, 0x1b, 0x01, 0x82, 0x3f, 0x46, 0xbf, 0xd0, 0xc0, 0xe0, 0x6f, 0xd1, 0x70, 0x18, 
		0x0b, 0xf4, 0x6c, 0x54, 0x1e, 0x09, 0xfa, 0x0e, 0x32, 0x6d, 0x04, 0x00, 0x07, 0x12, 0x80, 0xbf, 
		0x46, 0xbf, 0x81, 0x3f, 0x46, 0x42, 0x20, 0x6f, 0xd1, 0xb0, 0x88, 0x2b, 0xf4, 0x6c, 0x5a, 0x2a, 
		0xfd, 0x1b, 0x02, 0x80, 0xc2, 0xa2, 0x30, 0x18, 0x78, 0x9c, 0x1b, 0xf4, 0x2c, 0x06, 0x02, 0xfd, 
		0x07, 0x1b, 0x7e, 0x88, 0x82, 0xc0, 0x5f, 0xa3, 0x63, 0x66, 0x20, 0x4f, 0xd1, 0x70, 0x88, 0x24, 
		0x7e, 0x20, 0xfd, 0x17, 0x18, 0x89, 0x3f, 0x87, 0x3f, 0xd0, 0x41, 0x5e, 0xa1, 0x1f, 0xa1, 0xdf, 
		0xe0, 0x9f, 0xa3, 0x20, 0xef, 0xd1, 0xd1, 0xb8, 0x43, 0xf4, 0x6c, 0x6e, 0x10, 0xfd, 0x1a, 0x0f, 
		0x06, 0xfd, 0x16, 0x0f, 0x04, 0xfd, 0x19, 0x1b, 0x84, 0x3f, 0x46, 0xc6, 0xe1, 0x10, 0xf1, 0x38, 
		0x47, 0xe8, 0x78, 0xdc, 0x22, 0x03, 0x06, 0x83, 0xbf, 0x45, 0x46, 0xe1, 0x0f, 0xd1, 0xb1, 0xb7, 
		0xe8, 0xe8, 0x3c, 0x22, 0x0e, 0xfd, 0x19, 0x12, 0x8c, 0x3f, 0xd7, 0xbc, 0xc1, 0xbf, 0x44, 0xc0, 
		0x60, 0x2f, 0xd1, 0xb0, 0x40, 0x78, 0x27, 0xe8, 0xb0, 0x78, 0x27, 0xe8, 0xc8, 0x24, 0x55, 0xfa, 
		0x36, 0x09, 0x03, 0x7e, 0x8d, 0x82, 0x46, 0x9f, 0xa2, 0xc9, 0xe0, 0xa3, 0x6f, 0xd1, 0xb0, 0x48, 
		0x3b, 0xf4, 0x6c, 0x12, 0x24, 0xfd, 0x1b, 0x04, 0x0f, 0x03, 0x7e, 0x8a, 0x82, 0x40, 0x5f, 0xa2, 
		0x8d, 0xe0, 0xe0, 0x2f, 0xd1, 0xb0, 0x58, 0x0b, 0xfd, 0x8b, 0xf4, 0x5b, 0xfc, 0x13, 0xf4, 0x64, 
		0x06, 0x0c, 0xfd, 0x1b, 0x02, 0x8b, 0x3f, 0x46, 0xc6, 0xc0, 0xe0, 0x9f, 0xa2, 0xc5, 0x00, 0x9f, 
		0xa3, 0x21, 0x11, 0xb7, 0xe8, 0xd8, 0x44, 0x49, 0xfa, 0x36, 0x11, 0x18, 0x7e, 0x8d, 0x84, 0x44, 
		0x1f, 0xa7, 0x60, 0x90, 0x87, 0xe8, 0xd8, 0xaa, 0x88, 0x13, 0xf4, 0x5c, 0x06, 0x2a, 0xff, 0x5e, 
		0xfd, 0x1b, 0x01, 0x83, 0x3f, 0x46, 0xc6, 0x14, 0x00, 0x9f, 0xa2, 0xe1, 0x00, 0xf0, 0x4f, 0xd1, 
		0x8e, 0xd0, 0x8f, 0xd1, 0x30, 0x44, 0xe8, 0x77, 0xe8, 0x68, 0xa8, 0x3c, 0x13, 0xf4, 0x5a, 0xf4, 
		0x1b, 0xf4, 0x5b, 0x34, 0x23, 0xf4, 0x54, 0x18, 0x1e, 0x0d, 0xfa, 0x08, 0x3e, 0x10, 0x8c, 0x0a, 
		0x0e, 0x81, 0x04, 0xfd, 0x17, 0x08, 0x88, 0x17, 0xc3, 0x0f, 0x01, 0x3f, 0x41, 0xa0, 0x01, 0xbf, 
		0x45, 0x40, 0x60, 0x51, 0x27, 0xfb, 0x27, 0xe8, 0xa8, 0x29, 0x88, 0x1b, 0xf4, 0x50, 0x00, 0x2b, 
		0xf4, 0x48, 0x2c, 0x13, 0xf4, 0x64, 0x1a, 0x02, 0xfd, 0x1a, 0x8a, 0x04, 0xfd, 0x18, 0xd7, 0x04, 
		0xfd, 0x19, 0x01, 0x80, 0xbf, 0x46, 0x8b, 0xc1, 0x3f, 0x46, 0x03, 0xc1, 0x3f, 0x46, 0x13, 0xc1, 
		0xbf, 0x45, 0xc4, 0xa0, 0x8f, 0xd1, 0xa6, 0xa0, 0x4f, 0xd1, 0x91, 0xb8, 0x83, 0xfd, 0x83, 0xf4, 
		0x64, 0x16, 0x0c, 0xfd, 0x3a, 0x0d, 0x04, 0xfd, 0x19, 0x06, 0x82, 0x3f, 0x46, 0xa0, 0xc1, 0x3f, 
		0x46, 0x40, 0x60, 0x2f, 0xd1, 0xb0, 0x18, 0x0b, 0xf4, 0x68, 0x3c, 0x13, 0xf4, 0x60, 0x3c, 0x13, 
		0xf4, 0x64, 0x04, 0x76, 0x09, 0xfa, 0x2e, 0x25, 0x1f, 0x7e, 0x83, 0x07, 0x83, 0x7e, 0x85, 0x84, 
		0x42, 0x1f, 0xa2, 0xe3, 0xf1, 0x08, 0xdc, 0x49, 0xfe, 0xbd, 0xfa, 0x34, 0xe0, 0x09, 0xfa, 0x32, 
		0x31, 0x06, 0x7e, 0x8d, 0x84, 0x45, 0x9f, 0xa3, 0x62, 0x11, 0xf7, 0xe8, 0xe8, 0x33, 0xf4, 0x6c, 
		0x06, 0x02, 0xfd, 0x1a, 0x21, 0x04, 0xfd, 0x18, 0x00, 0x06, 0xfd, 0x16, 0x1f, 0x0c, 0xfd, 0x11, 
		0x12, 0x81, 0x3f, 0x46, 0xa0, 0x41, 0x3f, 0x46, 0x42, 0x1f, 0xa3, 0xa0, 0x50, 0x17, 0xfb, 0x67, 
		0xe8, 0x68, 0x0c, 0x06, 0x0f, 0x10, 0x7e, 0x8b, 0x4e, 0x84, 0x7e, 0x8a, 0x4e, 0x84, 0x7e, 0x8a, 
		0x07, 0x84, 0x7e, 0x8a, 0x17, 0x84, 0x8c, 0x3f, 0x44, 0x83, 0xc2, 0x47, 0xdf, 0xa2, 0x41, 0xe1, 
		0x1f, 0xa6, 0x81, 0xe1, 0x1f, 0xa2, 0x81, 0xe1, 0x1d, 0x80, 0xdf, 0xa1, 0x8d, 0xe1, 0x1f, 0xa2, 
		0xa2, 0xb0, 0x17, 0xe8, 0x78, 0xdb, 0xf4, 0x24, 0x05, 0xfe, 0xbe, 0x26, 0xfe, 0x1d, 0x01, 0x7f, 
		0x0e, 0x80, 0xbf, 0x87, 0x03, 0xc1, 0x45, 0x50, 0xe0, 0x9f, 0xc2, 0x01, 0xe0, 0x9f, 0xc3, 0x01, 
		0xe0, 0xa3, 0x10, 0x88, 0xfb, 0x78, 0x48, 0x3c, 0x13, 0xf8, 0x60, 0x3c, 0x13, 0xf8, 0x60, 0x3c, 
		0x13, 0xf8, 0x60, 0x3c, 0x13, 0xf8, 0x61, 0xfc, 0x1b, 0xf8, 0x58, 0x3c, 0x1b, 0xf8, 0x5c, 0x05, 
		0xfc, 0x1a, 0x3f, 0x16, 0x8f, 0x8b, 0x82, 0x3f, 0xc7, 0xc0, 0x5f, 0xc3, 0xa0, 0x2f, 0xe2, 0x80, 
		0x00, 0x50, 0x68, 0x2c, 0x12, 0x0a, 0x86, 0x09, 0x07, 0x88, 0x33, 0x41, 0x41, 0xa3, 0x06, 0x00, 
		0x91, 0x80, 0x88, 0x28, 0xd9, 0xc4, 0x14, 0x0a, 0x2c, 0x71, 0x0d, 0x16, 0x81, 0x40, 0x81, 0xe0, 
		0xa2, 0xb1, 0xb3, 0xd8, 0x28, 0x34, 0x06, 0x0d, 0x04, 0x88, 0x47, 0xe0, 0x50, 0x30, 0x78, 0x28, 
		0x18, 0x38, 0x11, 0x10, 0x24, 0x0a, 0x0d, 0x01, 0x82, 0x83, 0xc1, 0x46, 0x21, 0x11, 0xb4, 0xc8, 
		0x20, 0x00, 0x51, 0x58, 0x28, 0x24, 0x7e, 0x11, 0x12, 0x70, 0x09, 0x07, 0x82, 0x83, 0xc2, 0x23, 
		0x00, 0xf1, 0x91, 0x28, 0x44, 0x40, 0xf4, 0x10, 0x1e, 0x1e, 0x05, 0x08, 0x84, 0x41, 0xc2, 0x00, 
		0xe2, 0xad, 0x20, 0x43, 0xf0, 0x6f, 0x00, 0x71, 0x08, 0x94, 0x12, 0x25, 0x1f, 0x84, 0x42, 0x20, 
		0x50, 0x44, 0x78, 0x30, 0x80, 0x30, 0x00, 0x48, 0x24, 0x56, 0x25, 0x12, 0x8c, 0x41, 0x4f, 0x20, 
		0xe2, 0x51, 0xb8, 0x84, 0x6c, 0x5c, 0x09, 0xfe, 0x3e, 0x32, 0xff, 0x1d, 0x0a, 0x7f, 0x8d, 0x87, 
		0x43, 0x91, 0x02, 0x60, 0xd0, 0x58, 0x24, 0x16, 0x0d, 0x01, 0x82, 0x45, 0x60, 0x30, 0x76, 0x68, 
		0x38, 0x34, 0x60, 0xc0, 0x12, 0x30, 0xba, 0x04, 0x71, 0x07, 0x02, 0x8b, 0x1c, 0x43, 0x20, 0x81, 
		0x24, 0x41, 0xc6, 0xcf, 0x60, 0xa0, 0xd0, 0x18, 0x34, 0x12, 0x21, 0x10, 0x84, 0x40, 0xc1, 0xe0, 
		0xa0, 0x60, 0xe0, 0x44, 0x40, 0x8b, 0xa0, 0x50, 0x50, 0x78, 0x28, 0xd4, 0x22, 0x37, 0x15, 0x2a, 
		0x85, 0x84, 0x45, 0xa2, 0xa4, 0xf0, 0x51, 0xb2, 0x30, 0x20, 0x00, 0x58, 0xb4, 0x08, 0x9e, 0x0e, 
		0x0f, 0x08, 0x8c, 0x03, 0xc3, 0x01, 0xc1, 0x03, 0xc1, 0x44, 0xa1, 0x11, 0x07, 0x80, 0x31, 0x78, 
		0x30, 0xf8, 0x42, 0x30, 0x28, 0x38, 0x40, 0x1c, 0x56, 0x24, 0x48, 0x04, 0x7f, 0x06, 0xf0, 0x05, 
		0x10, 0x89, 0x41, 0x22, 0x51, 0xf7, 0x98, 0x30, 0x78, 0x38, 0xa8, 0x40, 0x10, 0x00, 0x24, 0x12, 
		0x31, 0x12, 0x89, 0x46, 0x20, 0xa7, 0x90, 0x71, 0x28, 0xfc, 0x5a, 0x3f, 0x12, 0x81, 0x3f, 0xd7, 
		0xc5, 0x54, 0xe1, 0x80, 0x00, 0xe0, 0xd0, 0x58, 0x24, 0x16, 0x11, 0x10, 0x82, 0x45, 0x60, 0x2b, 
		0x10, 0x40, 0xd0, 0x51, 0x83, 0x10, 0x68, 0x92, 0x44, 0x1c, 0x06, 0x05, 0x16, 0x7e, 0x85, 0x89, 
		0x00, 0xc1, 0x03, 0xc1, 0x25, 0x41, 0x42, 0x20, 0x90, 0x68, 0x0c, 0x1a, 0x03, 0x15, 0x84, 0x42, 
		0x20, 0x60, 0xf0, 0x50, 0x30, 0x70, 0x22, 0x20, 0x45, 0xd0, 0x28, 0x28, 0x3c, 0x14, 0x69, 0x70, 
		0x09, 0xbe, 0x12, 0x21, 0x08, 0x8b, 0x45, 0x49, 0xe0, 0xa3, 0x64, 0x60, 0x4d, 0xf0, 0x90, 0x88, 
		0xb3, 0x84, 0x24, 0x1e, 0x10, 0xf9, 0x04, 0x00, 0x05, 0x1b, 0x03, 0x83, 0x07, 0x82, 0x89, 0x42, 
		0x22, 0x0f, 0x00, 0x70, 0x18, 0x29, 0x78, 0x10, 0x3c, 0x19, 0x18, 0x14, 0x1c, 0x20, 0x0c, 0x76, 
		0x0a, 0x36, 0x6b, 0x05, 0x04, 0x80, 0xbc, 0x01, 0x44, 0x22, 0x50, 0x48, 0x91, 0x7c, 0x19, 0x30, 
		0x14, 0x12, 0x03, 0x15, 0x08, 0x02, 0x00, 0x02, 0x80, 0xc0, 0x60, 0x91, 0x88, 0x94, 0x4a, 0x31, 
		0x05, 0x3c, 0x83, 0x89, 0x47, 0xe2, 0x11, 0xb7, 0xfb, 0x18, 0xaa, 0x9c, 0x20, 0x00, 0x2c, 0x18, 
		0xfc, 0x0a, 0x11, 0x10, 0x82, 0x45, 0x60, 0x2b, 0x10, 0x40, 0xd0, 0x51, 0x83, 0x10, 0x48, 0x42, 
		0xe8, 0x11, 0xc4, 0x1c, 0x0a, 0x2c, 0x0b, 0x09, 0x02, 0x89, 0x28, 0x81, 0x03, 0xc1, 0x25, 0x41, 
		0x42, 0x20, 0x90, 0x64, 0x48, 0x38, 0x44, 0x22, 0x06, 0x0f, 0x05, 0x03, 0x07, 0x02, 0x6f, 0x82, 
		0x13, 0x82, 0x84, 0x42, 0x20, 0xa0, 0xf0, 0x51, 0xa5, 0xc0, 0x20, 0x78, 0x28, 0xdc, 0x62, 0x21, 
		0x08, 0x8b, 0x31, 0x41, 0x2d, 0x01, 0x44, 0x9f, 0xe0, 0xc8, 0x80, 0xa2, 0xce, 0x10, 0x90, 0x77, 
		0xc8, 0x31, 0x78, 0x28, 0xd8, 0x1c, 0x18, 0x3c, 0x14, 0x4a, 0x11, 0x10, 0x78, 0x02, 0x84, 0x41, 
		0x10, 0x40, 0x83, 0xe1, 0x08, 0xc0, 0xa0, 0xf0, 0x62, 0x78, 0x38, 0x39, 0x20, 0x11, 0xfc, 0x1b, 
		0xc0, 0x14, 0x42, 0x24, 0x5f, 0x0a, 0x3c, 0x04, 0x77, 0x04, 0x10, 0x05, 0x08, 0x7c, 0x83, 0x82, 
		0x46, 0x22, 0x51, 0x20, 0x38, 0x38, 0x0c, 0x0a, 0x24, 0xff, 0x61, 0x01, 0x7f, 0x82, 0x8a, 0xa9, 
		0xc1, 0x00, 0x03, 0xc2, 0xde, 0x60, 0xe2, 0x10, 0x48, 0xa9, 0xd4, 0x13, 0x34, 0x14, 0x1a, 0x31, 
		0x01, 0x07, 0x83, 0x7a, 0x82, 0x48, 0x83, 0x80, 0xc0, 0xa2, 0xd0, 0x80, 0x78, 0x28, 0x94, 0x0a, 
		0x24, 0xa2, 0x04, 0x0f, 0x04, 0x95, 0x05, 0x08, 0x81, 0x46, 0x11, 0x20, 0xe1, 0x10, 0x88, 0x18, 
		0x3c, 0x14, 0x0d, 0x30, 0x0a, 0x08, 0x0f, 0x06, 0xa1, 0x05, 0x05, 0x07, 0x82, 0x8d, 0x2e, 0x01, 
		0x44, 0xa3, 0x10, 0x88, 0xdc, 0x62, 0x21, 0x08, 0x8b, 0x45, 0x49, 0xe0, 0xa3, 0x64, 0x60, 0x41, 
		0xf0, 0x51, 0x68, 0x44, 0x22, 0x2c, 0xe1, 0x09, 0x07, 0x7c, 0x82, 0x82, 0x8b, 0xc1, 0x46, 0xc0, 
		0xe0, 0x81, 0xe0, 0xe2, 0x50, 0x88, 0x84, 0x0a, 0x2a, 0x0f, 0x05, 0x05, 0x2b, 0x02, 0x07, 0x83, 
		0x23, 0x02, 0x83, 0x9b, 0xc1, 0x41, 0x11, 0x60, 0xa3, 0x66, 0xb0, 0x50, 0x48, 0x0b, 0xc0, 0x10, 
		0x3c, 0x20, 0x60, 0x10, 0xf0, 0x11, 0xdc, 0x14, 0x12, 0x10, 0x50, 0x05, 0x03, 0x80, 0x81, 0x01, 
		0x44, 0xa2, 0x51, 0x88, 0x2a, 0xf8, 0x14, 0x09, 0xfe, 0xc2, 0x03, 0x01, 0x7f, 0x82, 0x8a, 0xc5, 
		0x5f, 0xe1, 0xe1, 0x50, 0xa8, 0x5b, 0xc4, 0x1c, 0x42, 0x09, 0x15, 0x3a, 0x82, 0x82, 0x03, 0xc1, 
		0x46, 0x4e, 0x20, 0x80, 0x00, 0xe2, 0x49, 0x10, 0x70, 0x18, 0x14, 0x36, 0x24, 0x0f, 0x05, 0x12, 
		0x81, 0x44, 0x94, 0x40, 0x81, 0xe0, 0xa2, 0xb1, 0xb8, 0x4c, 0x22, 0x04, 0x91, 0x07, 0x15, 0x84, 
		0x42, 0x20, 0x60, 0xf0, 0x50, 0x38, 0x44, 0x7e, 0x10, 0xe1, 0x04, 0xa1, 0x09, 0x05, 0x07, 0x82, 
		0x8d, 0x42, 0x05, 0x80, 0xa3, 0x10, 0x88, 0xdc, 0x62, 0x21, 0x08, 0x8b, 0x45, 0x49, 0xe0, 0xa3, 
		0x70, 0x88, 0xd0, 0x7c, 0x1c, 0x5a, 0x11, 0x08, 0x8b, 0x38, 0x42, 0x41, 0xcb, 0x00, 0xa0, 0xa2, 
		0xf0, 0x51, 0xb8, 0x44, 0x62, 0x02, 0x0f, 0x06, 0x56, 0x05, 0x1f, 0x8a, 0x83, 0xc1, 0x41, 0x42, 
		0xc0, 0x81, 0xe0, 0xc8, 0xc0, 0xde, 0x21, 0x20, 0xf0, 0x88, 0xdc, 0x54, 0xfe, 0x0e, 0x08, 0xe4, 
		0x04, 0x5f, 0x0c, 0x6f, 0x07, 0x01, 0x5b, 0x83, 0x82, 0x46, 0x20, 0x60, 0x40, 0x71, 0x28, 0x94, 
		0x60, 0x38, 0x09, 0xfe, 0xbd, 0xf2, 0x11, 0xfe, 0x08, 0x0e, 0x10, 0x00, 0x0a, 0x12, 0x23, 0x05, 
		0x0b, 0x78, 0x83, 0x88, 0x41, 0x22, 0xa7, 0x50, 0x50, 0x48, 0x6c, 0x2a, 0x15, 0x19, 0x38, 0x82, 
		0x00, 0x03, 0x89, 0x24, 0x41, 0xc2, 0xa1, 0x50, 0xd8, 0x90, 0x3c, 0x14, 0x4a, 0x04, 0xaa, 0x05, 
		0x02, 0x07, 0x83, 0x8a, 0x42, 0x61, 0x10, 0x24, 0x88, 0x38, 0xaa, 0x44, 0x2c, 0x2a, 0x17, 0x1f, 
		0x70, 0x83, 0x50, 0x84, 0x82, 0x83, 0xc1, 0x44, 0xc5, 0x80, 0xe3, 0x10, 0x88, 0xdc, 0x62, 0x21, 
		0x08, 0x8b, 0x45, 0x49, 0xe0, 0xa0, 0x30, 0x18, 0xd0, 0x7c, 0x1c, 0x5a, 0x11, 0x08, 0x8b, 0x40, 
		0x89, 0xe0, 0xc4, 0xe1, 0x05, 0xe0, 0xa3, 0x70, 0x88, 0xc4, 0x04, 0x1e, 0x0e, 0x0d, 0x07, 0x84, 
		0x47, 0xe2, 0xa0, 0xf0, 0x50, 0x57, 0xc8, 0x30, 0x78, 0x28, 0x80, 0x1c, 0x19, 0x3c, 0x1c, 0x1e, 
		0x11, 0x1b, 0x8a, 0x83, 0xc1, 0x42, 0x22, 0x0e, 0x40, 0x45, 0xf0, 0xd0, 0x42, 0x78, 0x28, 0x24, 
		0x19, 0x68, 0x0a, 0x09, 0x18, 0x81, 0x81, 0x01, 0xc4, 0xa2, 0x51, 0x88, 0x2b, 0xfd, 0x7c, 0x0e, 
		0x0a, 0x40, 0x07, 0x01, 0x7f, 0x82, 0x8a, 0xc5, 0x41, 0x00, 0xe1, 0x10, 0x88, 0x48, 0x94, 0x14, 
		0x2d, 0xe2, 0x0e, 0x21, 0x04, 0x8a, 0x9d, 0x41, 0x43, 0x21, 0xb0, 0xa8, 0x54, 0x64, 0xe2, 0x08, 
		0x00, 0x0e, 0x25, 0x01, 0x8d, 0xc3, 0xe2, 0x30, 0xa8, 0x54, 0x36, 0x24, 0xd4, 0x07, 0x02, 0x89, 
		0x42, 0x21, 0x10, 0x28, 0xdc, 0x4e, 0x15, 0x0a, 0x8a, 0x42, 0x61, 0x10, 0x24, 0x88, 0x38, 0xac, 
		0x22, 0x11, 0x03, 0x8d, 0x8f, 0x01, 0xc7, 0xdc, 0x20, 0xdb, 0x21, 0x41, 0xe0, 0xa2, 0x62, 0xc0, 
		0x71, 0x88, 0x44, 0x6e, 0x31, 0x10, 0x84, 0x45, 0xa2, 0xb1, 0xb2, 0x58, 0x28, 0x0c, 0x68, 0x3e, 
		0x0e, 0x2d, 0x08, 0x84, 0x45, 0xa0, 0x50, 0x18, 0xdc, 0x46, 0x1f, 0x0f, 0x13, 0x83, 0x17, 0x82, 
		0x8d, 0xc2, 0x23, 0x10, 0x18, 0x0c, 0x6e, 0x39, 0x01, 0x83, 0x41, 0xe1, 0x11, 0xf8, 0xa8, 0x3c, 
		0x14, 0x15, 0xf2, 0x0e, 0x37, 0x04, 0x89, 0x44, 0x00, 0xe0, 0xc9, 0xe0, 0xe0, 0xf0, 0x88, 0xdc, 
		0x56, 0x36, 0x97, 0x07, 0x05, 0x80, 0x83, 0xc2, 0x0d, 0xc1, 0x40, 0xe3, 0x71, 0x08, 0x3c, 0x11, 
		0x80, 0x0e, 0x09, 0x18, 0x81, 0x81, 0x01, 0xc4, 0xa2, 0x4f, 0xf5, 0xf0, 0x28, 0x1c, 0x0e, 0x0a, 
		0x40, 0x07, 0x01, 0x7f, 0x82, 0x8a, 0xc5, 0x5f, 0xe0, 0xe1, 0x10, 0x88, 0x4b, 0x10, 0x1b, 0xc4, 
		0x1c, 0x42, 0x08, 0xd3, 0x05, 0x08, 0x86, 0x43, 0x61, 0x4b, 0x50, 0x40, 0xf0, 0x70, 0x88, 0x44, 
		0x4a, 0x07, 0x06, 0x87, 0xc4, 0x61, 0x50, 0xa8, 0x6c, 0x49, 0xa8, 0x0e, 0x05, 0x12, 0x84, 0x42, 
		0x20, 0x30, 0x18, 0x9c, 0x2a, 0x15, 0x14, 0x84, 0xc2, 0x20, 0x49, 0x10, 0x62, 0xd0, 0x50, 0x18, 
		0x58, 0xf0, 0x1c, 0x7d, 0xc2, 0x0d, 0x42, 0x12, 0x2e, 0x0e, 0x05, 0x13, 0x16, 0x03, 0x8c, 0x42, 
		0x23, 0x71, 0x88, 0x84, 0x22, 0x2c, 0x3c, 0x05, 0x19, 0x80, 0xc0, 0x63, 0x41, 0xf0, 0x71, 0x68, 
		0x44, 0x22, 0x2d, 0x02, 0x85, 0x42, 0xa2, 0x30, 0x18, 0x78, 0x9c, 0x14, 0x14, 0x5e, 0x0a, 0x37, 
		0x08, 0x8c, 0x40, 0x61, 0x50, 0xa8, 0xe4, 0x06, 0x0d, 0x1b, 0x84, 0x47, 0xe2, 0xa0, 0xf0, 0x50, 
		0x50, 0xb0, 0x28, 0x54, 0x76, 0x09, 0x12, 0x88, 0x01, 0xc1, 0x3c, 0x42, 0x41, 0xe1, 0x11, 0xb8, 
		0xea, 0x14, 0x1c, 0x42, 0x0b, 0x01, 0x07, 0x84, 0x1b, 0x82, 0x8c, 0x45, 0xa2, 0xd1, 0xb8, 0x23, 
		0x00, 0x1c, 0x12, 0x31, 0x03, 0x02, 0x03, 0x7f, 0xaf, 0x80, 0xc0, 0x60, 0x50, 0x38, 0x24, 0x14, 
		0x80, 0x0e, 0x02, 0xff, 0x05, 0x15, 0x8a, 0xc0, 0xa0, 0xe6, 0x00, 0x70, 0x96, 0x20, 0x37, 0x88, 
		0x33, 0xd0, 0x20, 0x00, 0x28, 0x64, 0x34, 0x70, 0x0a, 0x1e, 0x0f, 0x06, 0x11, 0x05, 0x03, 0x83, 
		0x43, 0xd8, 0x80, 0xa1, 0xb1, 0x26, 0xa0, 0x38, 0x14, 0x4a, 0x11, 0x02, 0x80, 0xc0, 0x62, 0x70, 
		0xa8, 0x54, 0x52, 0x13, 0x08, 0x81, 0x24, 0x41, 0xc5, 0x62, 0x50, 0x18, 0x0c, 0x2e, 0x28, 0x3c, 
		0x05, 0x1f, 0x70, 0x83, 0x50, 0x82, 0x81, 0xc0, 0x62, 0xe4, 0xb0, 0x51, 0x31, 0x60, 0x38, 0xc4, 
		0x22, 0x37, 0x18, 0x88, 0x41, 0x07, 0x80, 0xe3, 0x30, 0x18, 0x0c, 0x68, 0x3e, 0x0e, 0x2d, 0x08, 
		0x84, 0x46, 0xe1, 0xd0, 0xa8, 0x54, 0x46, 0x2b, 0x0f, 0x83, 0x38, 0x81, 0x0b, 0xc1, 0x46, 0xcf, 
		0x21, 0x23, 0x90, 0x18, 0x34, 0x1e, 0x11, 0x1f, 0x8a, 0x83, 0xc1, 0x41, 0x61, 0x11, 0x48, 0x54, 
		0x52, 0x3b, 0x04, 0x89, 0x21, 0x81, 0x41, 0x5e, 0x21, 0x20, 0xf0, 0xa8, 0x54, 0x75, 0x0a, 0x12, 
		0x0b, 0x01, 0x07, 0x84, 0x81, 0x42, 0xa2, 0x31, 0x88, 0xb4, 0x5a, 0x37, 0x04, 0x60, 0x03, 0x82, 
		0x46, 0x20, 0x70, 0x18, 0x0c, 0x2a, 0x22, 0xff, 0x5f, 0x01, 0x52, 0x02, 0x82, 0x41, 0x48, 0x00, 
		0xe0, 0x2f, 0xf0, 0x40, 0xd0, 0x50, 0x73, 0x00, 0x34, 0x38, 0x38, 0x5b, 0xc4, 0x14, 0x06, 0x0a, 
		0xf5, 0x09, 0x0c, 0x86, 0x8e, 0x81, 0x43, 0xc1, 0xe0, 0xa0, 0x51, 0x08, 0x44, 0x42, 0x07, 0x06, 
		0x62, 0x03, 0x86, 0xc4, 0x9a, 0x80, 0xe2, 0x41, 0x20, 0x50, 0x18, 0x0c, 0x4e, 0x15, 0x0a, 0x8a, 
		0x42, 0x61, 0x10, 0x24, 0x88, 0x28, 0x84, 0x22, 0x25, 0x01, 0x80, 0xc2, 0xc1, 0xc0, 0xa1, 0x71, 
		0x67, 0x08, 0x38, 0x24, 0x22, 0x11, 0x03, 0x80, 0xc5, 0xc9, 0x60, 0xa2, 0x62, 0xc0, 0x71, 0x88, 
		0x44, 0x6e, 0x11, 0x08, 0x82, 0x0f, 0x01, 0xc6, 0x60, 0x30, 0x18, 0xd0, 0x7c, 0x1c, 0x5a, 0x0f, 
		0x08, 0x8d, 0xc3, 0xa1, 0x50, 0xa8, 0x8c, 0x3e, 0x03, 0x02, 0x71, 0x02, 0x17, 0x82, 0x81, 0x9e, 
		0x42, 0x47, 0x20, 0x30, 0x68, 0x3c, 0x22, 0x2d, 0x15, 0x07, 0x82, 0x8a, 0xc4, 0xa2, 0x8f, 0x20, 
		0x50, 0x48, 0x94, 0x40, 0x3c, 0x09, 0xe2, 0x0e, 0x3c, 0x3c, 0x05, 0x1d, 0x48, 0x83, 0x88, 0x41, 
		0x60, 0x20, 0xf0, 0x6e, 0x00, 0x51, 0x18, 0xc4, 0x5a, 0x2d, 0x1b, 0x82, 0x30, 0x01, 0xc1, 0x23, 
		0x10, 0x31, 0xe0, 0x28, 0x8b, 0xfd, 0x7b, 0xcc, 0x14, 0x0e, 0x09, 0x05, 0x20, 0x03, 0x80, 0xbf, 
		0xc1, 0x03, 0x41, 0x41, 0xcc, 0x00, 0xd0, 0xe0, 0xe1, 0x71, 0x80, 0x70, 0x28, 0x28, 0x34, 0x1c, 
		0x22, 0x19, 0x0d, 0x1e, 0x02, 0x87, 0x83, 0xc1, 0x40, 0xa2, 0x10, 0x88, 0x84, 0x0e, 0x0c, 0xc4, 
		0x07, 0x0d, 0x89, 0x40, 0x41, 0xe0, 0xa2, 0x50, 0x88, 0x44, 0x0a, 0x03, 0x01, 0x89, 0xbc, 0x81, 
		0x42, 0x61, 0x10, 0x28, 0xc4, 0x06, 0x2b, 0x16, 0x84, 0x44, 0xa0, 0x30, 0x18, 0x5a, 0xd4, 0x14, 
		0x2e, 0x2c, 0xe1, 0x05, 0x01, 0x83, 0x42, 0x21, 0x10, 0x38, 0x0c, 0x5c, 0x96, 0x0a, 0x26, 0xae, 
		0x05, 0x12, 0x0f, 0x82, 0x84, 0x42, 0x20, 0x83, 0xc0, 0x71, 0x98, 0x0c, 0x06, 0x34, 0x1f, 0x07, 
		0x01, 0x83, 0xc2, 0x23, 0x70, 0xe5, 0xa0, 0x28, 0x7c, 0x06, 0x04, 0xe2, 0x04, 0x0f, 0x05, 0x03, 
		0x3c, 0x84, 0x8e, 0x40, 0x60, 0xd0, 0x78, 0x44, 0x5a, 0x2a, 0x0f, 0x05, 0x15, 0x89, 0x12, 0xc1, 
		0x47, 0x60, 0x91, 0x28, 0x80, 0x78, 0x11, 0xbc, 0x1c, 0x78, 0x78, 0x0a, 0x3a, 0x91, 0x07, 0x10, 
		0x82, 0xc0, 0x41, 0xe0, 0xdc, 0x40, 0xa2, 0x31, 0x88, 0xb4, 0x5a, 0x37, 0x04, 0x60, 0x03, 0x82, 
		0x22, 0x01, 0xc2, 0xa2, 0x2f, 0xf1, 0x30, 0xb7, 0xf8, 0xe8, 0x9b, 0xfc, 0x70, 
	};
} HSpr_16x16_oric;

// "amigaroll_trs" (GIF orig:1764 raw_payload:2099 shrunk_payload:836 total:844 bytes)
// Compared to GIF: 47.85% 	Compared to raw: 40.21%
// using GIF index 4 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 4; loop = 32000; transparency = 4; )

FL_PROGMEM const struct HSpr_amigaroll_trs {
	uint16_t datasize = 836;
	uint16_t frames = 8;
	uint16_t duration = 75;
	uint8_t flags = 0;
	uint8_t palette_entries = 17;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 4
		// 0x0c, 0x0a, 0x05,  // original palette index 0
		// 0x00, 0x00, 0x00,  // original palette index 15
		// 0xbf, 0x0d, 0x08,  // original palette index 6
		// 0x00, 0x00, 0x00,  // original palette index 255
		// 0xc0, 0x57, 0x04,  // original palette index 8
		// 0xb6, 0xa2, 0x04,  // original palette index 10
		// 0x5d, 0x5e, 0x04,  // original palette index 3
		// 0xd3, 0xea, 0x04,  // original palette index 7
		// 0x04, 0x22, 0x64,  // original palette index 11
		// 0x04, 0x26, 0x94,  // original palette index 2
		// 0x25, 0x9d, 0x11,  // original palette index 1
		// 0x08, 0x6c, 0xae,  // original palette index 9
		// 0x40, 0xcb, 0x16,  // original palette index 5
		// 0x04, 0xea, 0xbc,  // original palette index 12
		// 0x26, 0xf5, 0x24,  // original palette index 14
		// 0x04, 0x68, 0x54,  // original palette index 13
	};
	uint8_t hs_data[836] = {
		0x00, 0x02, 0x86, 0x42, 0xa0, 0xa0, 0x50, 0x5b, 0xf8, 0x6c, 0x20, 0x0a, 0x0b, 0x81, 0x57, 0x82, 
		0x6d, 0xb4, 0x50, 0x4a, 0xed, 0x7a, 0x09, 0xd3, 0xf5, 0x41, 0x20, 0x92, 0x2b, 0x24, 0x12, 0x4d, 
		0x94, 0x92, 0xe7, 0x62, 0x30, 0x8b, 0x66, 0xba, 0x81, 0xcb, 0x8b, 0x41, 0x3d, 0x5b, 0xc9, 0x37, 
		0xd6, 0x49, 0x04, 0xb4, 0x55, 0x07, 0x42, 0xa0, 0x30, 0x18, 0x14, 0x06, 0x02, 0x0e, 0x17, 0x03, 
		0x81, 0xc0, 0xe0, 0x80, 0xe1, 0x10, 0x28, 0x10, 0x38, 0x14, 0x0c, 0x3e, 0x26, 0x03, 0x03, 0x82, 
		0x80, 0x41, 0x40, 0x83, 0xc2, 0x20, 0x30, 0x50, 0x00, 0x21, 0xf8, 0x98, 0x0c, 0x16, 0x0d, 0x07, 
		0x83, 0x41, 0xc1, 0xc2, 0x20, 0x50, 0x18, 0x44, 0x16, 0x0d, 0x06, 0x80, 0x8b, 0x83, 0xc0, 0xa0, 
		0x50, 0x88, 0x34, 0x1a, 0x11, 0x07, 0x1e, 0x89, 0x83, 0xc2, 0x20, 0xf0, 0x88, 0x34, 0x08, 0x1e, 
		0x0a, 0x03, 0x02, 0x00, 0x02, 0x80, 0xc0, 0x43, 0xc0, 0xc9, 0x81, 0x20, 0x30, 0x98, 0x4c, 0x26, 
		0x15, 0x01, 0x85, 0x87, 0x81, 0x13, 0x02, 0xc0, 0xa1, 0x30, 0xc8, 0x4c, 0x32, 0x19, 0x08, 0x85, 
		0xc3, 0x61, 0xa6, 0xb0, 0xb0, 0x18, 0x14, 0x32, 0x1d, 0x09, 0x87, 0xc3, 0x61, 0x70, 0xf2, 0x60, 
		0x78, 0x0c, 0x06, 0x1d, 0x0f, 0x87, 0xc2, 0xe1, 0xf0, 0xb2, 0x60, 0x30, 0x80, 0x58, 0x84, 0x3e, 
		0x1b, 0x0f, 0x87, 0x9e, 0x84, 0x08, 0x01, 0x00, 0x01, 0x40, 0x9d, 0x02, 0x82, 0xa1, 0x61, 0x90, 
		0xc8, 0x63, 0xfc, 0x50, 0x38, 0x24, 0x05, 0xde, 0x24, 0x1e, 0x0e, 0x04, 0xff, 0x12, 0x1e, 0x09, 
		0x03, 0x82, 0xc1, 0x41, 0xe2, 0xe0, 0x4f, 0xf0, 0x63, 0xe1, 0x70, 0x68, 0x3b, 0xfc, 0x38, 0x78, 
		0x24, 0x06, 0x0a, 0xff, 0x10, 0x0f, 0x09, 0x08, 0x83, 0x42, 0x01, 0xc2, 0x61, 0xd0, 0x18, 0x3c, 
		0x22, 0x11, 0x06, 0x7f, 0x83, 0x85, 0x42, 0xa1, 0x50, 0x18, 0x14, 0x0a, 0x05, 0x01, 0x0f, 0x02, 
		0x7f, 0x84, 0x07, 0x83, 0x84, 0xc2, 0x61, 0x50, 0x18, 0x41, 0x34, 0x28, 0x3c, 0x1c, 0x0a, 0x12, 
		0x3f, 0x05, 0x0b, 0x86, 0xab, 0x02, 0x0b, 0xc2, 0xc3, 0x21, 0x2f, 0x20, 0x44, 0xd0, 0xa2, 0xc0, 
		0x50, 0x98, 0x0c, 0x06, 0x1f, 0x0f, 0x87, 0xc2, 0xcb, 0xa1, 0xc2, 0x00, 0xe1, 0xf0, 0xd8, 0x7a, 
		0x6c, 0x40, 0x80, 0x23, 0xac, 0x13, 0xec, 0x62, 0xc0, 0x18, 0x3f, 0xd4, 0x3a, 0x1c, 0x0f, 0x16, 
		0xd3, 0x04, 0xd6, 0x06, 0x0f, 0x70, 0xe1, 0x04, 0xe4, 0x06, 0x0f, 0x47, 0x01, 0x80, 0xc0, 0x91, 
		0xc0, 0xc3, 0x62, 0x60, 0x70, 0x38, 0x08, 0x40, 0x58, 0x3c, 0x14, 0x0e, 0x04, 0x0f, 0x19, 0x05, 
		0x82, 0xc0, 0xc4, 0x03, 0x20, 0xb0, 0x58, 0x28, 0x80, 0x64, 0x1e, 0x0f, 0x06, 0x0f, 0x8b, 0x81, 
		0x40, 0x60, 0xd0, 0x58, 0x08, 0x80, 0x5c, 0x0a, 0x11, 0x06, 0x84, 0x03, 0xc6, 0x41, 0xa1, 0x10, 
		0x88, 0x3c, 0x05, 0xfe, 0x2a, 0x02, 0x20, 0x05, 0x01, 0x81, 0x40, 0xa0, 0x4d, 0x60, 0x61, 0x30, 
		0x65, 0x10, 0x50, 0x88, 0x0c, 0x29, 0x5e, 0x08, 0x1e, 0x1e, 0x03, 0x0d, 0x85, 0x8f, 0xc1, 0x42, 
		0x60, 0x4f, 0x30, 0xf0, 0x28, 0x7c, 0x2e, 0x1f, 0x09, 0x86, 0x0b, 0xc4, 0x40, 0x20, 0x50, 0xb8, 
		0x7c, 0x3e, 0x1f, 0x01, 0x72, 0x83, 0x29, 0x06, 0x80, 0xc3, 0xe1, 0xb0, 0xf0, 0x70, 0xa8, 0x03, 
		0xcc, 0x10, 0x78, 0x3b, 0xfc, 0x1b, 0xf0, 0x40, 0x00, 0x14, 0x11, 0xde, 0x08, 0x20, 0x2d, 0xfe, 
		0x0e, 0x07, 0x02, 0x81, 0x03, 0xc4, 0x40, 0xa0, 0x70, 0x50, 0x08, 0x21, 0x00, 0x98, 0x0b, 0xfc, 
		0x1b, 0x80, 0x10, 0x40, 0x4c, 0x1e, 0x0d, 0x07, 0x78, 0x82, 0x18, 0x09, 0x80, 0xc1, 0xa0, 0xd0, 
		0x56, 0x78, 0x20, 0x80, 0x98, 0x3c, 0x22, 0x0d, 0x06, 0x84, 0x14, 0x84, 0xc0, 0xa0, 0x50, 0x68, 
		0x44, 0x1e, 0x11, 0x07, 0x20, 0x8a, 0x80, 0x88, 0x01, 0xa6, 0x01, 0x00, 0x01, 0x11, 0xc2, 0x40, 
		0x43, 0xc0, 0xa1, 0x10, 0xb8, 0x0c, 0x29, 0x82, 0x1e, 0x03, 0x01, 0x86, 0xc3, 0x61, 0x70, 0x88, 
		0x64, 0x32, 0x13, 0x0c, 0x84, 0x8d, 0x42, 0xc0, 0xa0, 0xf0, 0xf8, 0x5c, 0x36, 0x1f, 0x09, 0x87, 
		0x43, 0x05, 0xe1, 0x4a, 0x40, 0xa1, 0x70, 0xf8, 0x5c, 0x3e, 0x1f, 0x0e, 0x64, 0x08, 0x81, 0x40, 
		0x61, 0xf0, 0xf8, 0x6c, 0x3e, 0x20, 0xb6, 0x14, 0xf5, 0x04, 0x00, 0x04, 0x08, 0x05, 0x0a, 0x85, 
		0x42, 0x8d, 0x40, 0x83, 0x22, 0x01, 0xe1, 0x20, 0x70, 0x31, 0xc8, 0x80, 0x78, 0x68, 0x1a, 0x78, 
		0x38, 0x3c, 0x2c, 0x16, 0x0b, 0x03, 0x10, 0x0c, 0x82, 0xc1, 0x60, 0xa2, 0x01, 0x90, 0x78, 0x3c, 
		0x18, 0x3e, 0x2e, 0x05, 0x01, 0x83, 0x41, 0x60, 0x22, 0x01, 0x70, 0x28, 0x44, 0x1a, 0x10, 0x0f, 
		0x19, 0x06, 0x84, 0x42, 0x20, 0xe5, 0x11, 0x82, 0x00, 0x50, 0x17, 0xf8, 0x62, 0x88, 0x68, 0x44, 
		0x06, 0x14, 0xff, 0x0a, 0xb2, 0x0b, 0x0d, 0x85, 0xc3, 0x21, 0x8f, 0xf0, 0xc4, 0x10, 0x8f, 0x00, 
		0x50, 0x97, 0xf8, 0x60, 0x78, 0x47, 0xf8, 0x28, 0x7b, 0x14, 0x38, 0xc4, 0x24, 0x3e, 0x1b, 0x0f, 
		0x30, 0x8c, 0x81, 0x3f, 0xc2, 0x03, 0x82, 0x42, 0x40, 0x01, 0x03, 0xa1, 0xc1, 0xff, 0xc1, 0xfc, 
		0x02, 0x61, 0x20, 0x50, 0x18, 0x0c, 0x2a, 0x15, 0x0a, 0x09, 0x87, 0x80, 0xc0, 0x60, 0x70, 0x30, 
		0x78, 0xb8, 0x14, 0x0c, 0x1e, 0x32, 0x03, 0x03, 0x82, 0xc1, 0x41, 0xe2, 0xe0, 0x50, 0x58, 0x2c, 
		0x14, 0x7c, 0x32, 0x0d, 0x07, 0x83, 0x87, 0x85, 0xc0, 0x60, 0xb0, 0x68, 0x0c, 0x08, 0x1e, 0x2a, 
		0x11, 0x06, 0x84, 0x03, 0x85, 0x40, 0x60, 0xf0, 0x88, 0x44, 0x18, 0x1e, 0x1a, 0x03, 0x02, 0x81, 
		0x40, 0xa0, 0x21, 0xe0, 0x43, 0xd0, 0xea, 0xb0, 0x50, 0xa8, 0x0c, 0x20, 0x9a, 0x26, 0x05, 0x09, 
		0x86, 0x43, 0x21, 0x90, 0xb8, 0x6a, 0xb0, 0x44, 0x06, 0x05, 0x0c, 0x84, 0xc3, 0xe1, 0x70, 0xf2, 
		0x68, 0x98, 0x0c, 0x06, 0x1f, 0x0f, 0x87, 0xc2, 0xcb, 0xa2, 0xe1, 0xf0, 0xd8, 0x7b, 0x68, 0x6b, 
		0xac, 0x10, 0x3c, 0x40, 
	};
} HSpr_amigaroll_trs;

// "batman2" (GIF orig:144 raw_payload:280 shrunk_payload:95 total:103 bytes)
// Compared to GIF: 71.53% 	Compared to raw: 36.79%
// using GIF index 11 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; transparency = 11; )

FL_PROGMEM const struct HSpr_batman2 {
	uint16_t datasize = 95;
	uint16_t frames = 1;
	uint16_t duration = 0;
	uint8_t flags = 0;
	uint8_t palette_entries = 8;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 11
		// 0x00, 0x00, 0x00,  // original palette index 10
		// 0xff, 0xff, 0xff,  // original palette index 0
		// 0x99, 0x99, 0x99,  // original palette index 3
		// 0x99, 0x66, 0x33,  // original palette index 4
		// 0xff, 0xcc, 0x99,  // original palette index 1
		// 0xcc, 0x99, 0x66,  // original palette index 2
		// 0x66, 0x33, 0x00,  // original palette index 5
	};
	uint8_t hs_data[95] = {
		0x00, 0x05, 0xff, 0xff, 0xff, 0xf9, 0x90, 0x00, 0x2b, 0x34, 0xcf, 0xff, 0xcc, 0xcc, 0xf3, 0x33, 
		0x36, 0x6b, 0x34, 0xcc, 0x2c, 0x16, 0x02, 0x03, 0x0c, 0x00, 0x0e, 0x0f, 0x08, 0x10, 0x15, 0x01, 
		0x00, 0x04, 0x07, 0x8f, 0x08, 0x09, 0x07, 0xa2, 0x81, 0x40, 0x60, 0x30, 0x30, 0x78, 0xa8, 0x20, 
		0x7c, 0x1c, 0x10, 0x1e, 0x2a, 0x0b, 0x05, 0x83, 0x41, 0x60, 0xe0, 0xf1, 0x50, 0x68, 0x3c, 0x1e, 
		0x08, 0x0f, 0x17, 0x05, 0x83, 0x41, 0xa0, 0xa2, 0xf1, 0x80, 0xf0, 0x50, 0x62, 0xf0, 0x91, 0xf8, 
		0x22, 0x08, 0x23, 0xe8, 0xc4, 0x00, 0x60, 0x68, 0x90, 0x80, 0x40, 0x70, 0xc0, 0x00, 0x20, 
	};
} HSpr_batman2;

// "bird16" (GIF orig:234 raw_payload:524 shrunk_payload:180 total:188 bytes)
// Compared to GIF: 80.34% 	Compared to raw: 35.88%
// using GIF index 3 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 3; loop = 0; transparency = 3; )

FL_PROGMEM const struct HSpr_bird16 {
	uint16_t datasize = 180;
	uint16_t frames = 2;
	uint16_t duration = 200;
	uint8_t flags = 0;
	uint8_t palette_entries = 4;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 3
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x00, 0xd2, 0xff,  // original palette index 1
		// 0xff, 0xe1, 0xaf,  // original palette index 2
	};
	uint8_t hs_data[180] = {
		0x00, 0x06, 0xe9, 0x7f, 0xff, 0xfe, 0x1d, 0x78, 0x24, 0x24, 0x06, 0x02, 0x18, 0x18, 0x0e, 0x07, 
		0x01, 0x00, 0x03, 0x07, 0x88, 0x80, 0xc0, 0x60, 0x40, 0x00, 0x61, 0x01, 0x30, 0x38, 0x1c, 0x0e, 
		0x04, 0x21, 0x17, 0x03, 0x00, 0x82, 0x81, 0x40, 0xe0, 0x60, 0xf0, 0xc0, 0xa0, 0x61, 0x10, 0x61, 
		0xf0, 0xe3, 0xd0, 0x83, 0x40, 0x60, 0xf0, 0xa4, 0xd0, 0xe0, 0xf0, 0xc1, 0xd0, 0xa0, 0xf0, 0x66, 
		0x00, 0x80, 0x60, 0x41, 0x00, 0xa3, 0xe0, 0xa6, 0xa0, 0x82, 0x00, 0xa7, 0xf0, 0xa4, 0x70, 0x60, 
		0xe0, 0xa2, 0xe0, 0xa5, 0x90, 0x6a, 0x00, 0xcb, 0x70, 0x60, 0xd0, 0x85, 0x90, 0x41, 0xe0, 0xe4, 
		0x40, 0x48, 0x90, 0x68, 0xc1, 0x2d, 0xb0, 0xcb, 0xd1, 0x40, 0x02, 0x21, 0xa1, 0xc0, 0xe0, 0x63, 
		0x01, 0x66, 0xf0, 0xe9, 0x00, 0xa9, 0x30, 0xcb, 0xd0, 0x42, 0x11, 0x4f, 0xe0, 0x70, 0x27, 0x80, 
		0x74, 0xa8, 0x20, 0xf8, 0x24, 0x18, 0xa5, 0x68, 0x55, 0x30, 0x31, 0xe8, 0x52, 0x60, 0x48, 0x10, 
		0x3c, 0x30, 0x70, 0x28, 0x3c, 0x23, 0x44, 0x23, 0xf8, 0x20, 0x40, 0x18, 0xf8, 0x21, 0xa4, 0x20, 
		0x80, 0x30, 0x78, 0x13, 0xbc, 0x18, 0x40, 0x1a, 0x3c, 0x3b, 0x6c, 0x42, 0x78, 0x53, 0xfc, 0x3a, 
		0xf8, 0x5b, 0x38, 0x38, 
	};
} HSpr_bird16;

// "bub" (GIF orig:309 raw_payload:1045 shrunk_payload:232 total:240 bytes)
// Compared to GIF: 77.67% 	Compared to raw: 22.97%
// using GIF index 6 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 6; loop = 0; transparency = 6; )

FL_PROGMEM const struct HSpr_bub {
	uint16_t datasize = 232;
	uint16_t frames = 4;
	uint16_t duration = 100;
	uint8_t flags = 0;
	uint8_t palette_entries = 7;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 6
		// 0x50, 0x77, 0x90,  // original palette index 7
		// 0xff, 0xff, 0x00,  // original palette index 4
		// 0x00, 0xff, 0x00,  // original palette index 1
		// 0xff, 0xff, 0xff,  // original palette index 5
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xff, 0x73, 0x73,  // original palette index 3
	};
	uint8_t hs_data[232] = {
		0x00, 0x02, 0xa8, 0x5d, 0xf2, 0x1f, 0xff, 0xfc, 0x02, 0x01, 0xff, 0x80, 0x7f, 0xc0, 0xc0, 0xe0, 
		0x1f, 0xfb, 0x9d, 0xce, 0x02, 0x00, 0x0d, 0x02, 0x04, 0x07, 0x07, 0x06, 0x81, 0x04, 0x04, 0x82, 
		0xc1, 0x40, 0xa0, 0x60, 0x00, 0x61, 0x01, 0x20, 0xe0, 0x81, 0x01, 0x20, 0xb0, 0x70, 0x48, 0x24, 
		0x0e, 0x08, 0x10, 0x08, 0x2d, 0x0b, 0x04, 0x82, 0x41, 0x60, 0x70, 0x58, 0x20, 0xb8, 0x28, 0x78, 
		0x28, 0x3c, 0x40, 0xb8, 0x14, 0x0a, 0x04, 0x0f, 0x0a, 0x30, 0x06, 0x2e, 0x04, 0x32, 0x04, 0x0f, 
		0x0a, 0x74, 0x08, 0x2f, 0x05, 0x05, 0x81, 0x13, 0xc2, 0x98, 0x42, 0xc0, 0xe0, 0xd0, 0x38, 0x28, 
		0x00, 0x10, 0xf4, 0x30, 0x38, 0x14, 0x1a, 0x0c, 0x80, 0x16, 0x0f, 0x07, 0x06, 0x17, 0x82, 0x82, 
		0x1b, 0x84, 0x03, 0x83, 0x04, 0x02, 0x2a, 0xc3, 0x41, 0xa0, 0xc0, 0xe0, 0x43, 0x81, 0x03, 0x10, 
		0x61, 0x00, 0x50, 0x68, 0x33, 0x90, 0x4b, 0xff, 0xfb, 0xfd, 0xb0, 0x08, 0x18, 0x3c, 0x23, 0xb8, 
		0x31, 0x2c, 0x13, 0xf8, 0x1b, 0xfc, 0x4b, 0xc0, 0x40, 0x3c, 0x30, 0x40, 0x23, 0xfc, 0x44, 0x19, 
		0xff, 0xfd, 0xfe, 0x8d, 0x9e, 0x09, 0xfe, 0x20, 0x22, 0x09, 0x76, 0x0d, 0xfe, 0x26, 0x04, 0x0f, 
		0x06, 0x60, 0x08, 0xde, 0x0c, 0xff, 0x0c, 0xf0, 0x08, 0xff, 0x10, 0xf1, 0x08, 0xff, 0x12, 0x0e, 
		0x0c, 0xfe, 0x12, 0xff, 0xfe, 0xff, 0x16, 0xee, 0x06, 0xff, 0x14, 0xee, 0x08, 0xff, 0x10, 0x0f, 
		0x0a, 0xff, 0x14, 0x2f, 0x08, 0xff, 0x12, 0x4b, 0x04, 0x19, 0x08, 0x0e, 0x06, 0xff, 0x1c, 0x0f, 
		0x0a, 0xff, 0x13, 0x06, 0x82, 0x3f, 0x81, 0x00, 
	};
} HSpr_bub;

// "burgertime" (GIF orig:2052 raw_payload:6674 shrunk_payload:1195 total:1203 bytes)
// Compared to GIF: 58.63% 	Compared to raw: 18.03%
// using GIF index 6 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 6; loop = 0; transparency = 6; )

FL_PROGMEM const struct HSpr_burgertime {
	uint16_t datasize = 1195;
	uint16_t frames = 26;
	uint16_t duration = 50;
	uint8_t flags = 0;
	uint8_t palette_entries = 6;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 6
		// 0xff, 0xff, 0xde,  // original palette index 5
		// 0xde, 0x6b, 0x00,  // original palette index 1
		// 0xff, 0xbd, 0x00,  // original palette index 3
		// 0x00, 0xff, 0x00,  // original palette index 0
		// 0xff, 0xff, 0x00,  // original palette index 4
	};
	uint8_t hs_data[1195] = {
		0x00, 0x02, 0xff, 0xff, 0xfb, 0xdd, 0xeb, 0x5c, 0x03, 0xff, 0xbd, 0x04, 0x82, 0x05, 0x82, 0x08, 
		0x83, 0x80, 0x80, 0x04, 0x08, 0x42, 0x82, 0x01, 0x40, 0x80, 0x41, 0x01, 0xe1, 0x82, 0x00, 0xa0, 
		0x40, 0x00, 0x40, 0xe1, 0x00, 0xf0, 0x60, 0x20, 0x80, 0xf1, 0x23, 0xe1, 0x60, 0xf0, 0x50, 0x30, 
		0x00, 0x40, 0x78, 0x88, 0x1c, 0x0e, 0x04, 0x02, 0x08, 0x0f, 0x12, 0x00, 0x0a, 0x3d, 0x10, 0x2f, 
		0x0c, 0x41, 0x08, 0x49, 0x08, 0x7f, 0x0c, 0x10, 0x04, 0x03, 0x0c, 0x0c, 0x10, 0x05, 0x0a, 0x9f, 
		0x0e, 0x3a, 0x06, 0xbf, 0x16, 0x53, 0x0d, 0x02, 0x81, 0x00, 0xc2, 0x80, 0x03, 0x83, 0xc7, 0x41, 
		0x20, 0x90, 0x40, 0x20, 0x65, 0xf0, 0xc7, 0xfc, 0x44, 0x08, 0x37, 0xf8, 0x96, 0xa0, 0x37, 0xf8, 
		0xb1, 0x38, 0x57, 0xf8, 0x76, 0x98, 0x97, 0x78, 0x94, 0x70, 0xb3, 0x08, 0x64, 0x78, 0xf5, 0x78, 
		0xf6, 0xd0, 0x20, 0x00, 0x57, 0x79, 0x77, 0xfe, 0xb0, 0x78, 0x47, 0xf8, 0x80, 0x00, 0x57, 0xf8, 
		0x90, 0x78, 0x70, 0x00, 0x51, 0xe8, 0x81, 0x78, 0x67, 0xf0, 0x93, 0xf8, 0x60, 0x80, 0x20, 0x18, 
		0x60, 0x60, 0x80, 0x28, 0x54, 0xf8, 0x71, 0xd0, 0x35, 0xf8, 0xb2, 0x98, 0x67, 0xff, 0xa4, 0x08, 
		0x37, 0xf8, 0x96, 0xa0, 0x37, 0xf8, 0xb1, 0x38, 0x57, 0xf8, 0x76, 0x98, 0x97, 0x78, 0x94, 0x70, 
		0xb3, 0x08, 0x64, 0x78, 0xf5, 0x78, 0xf6, 0xd0, 0x20, 0x00, 0x57, 0x79, 0x77, 0xfe, 0xb0, 0x78, 
		0x47, 0xf8, 0x80, 0x00, 0x57, 0xf8, 0x90, 0x78, 0x70, 0x00, 0x51, 0xe8, 0x81, 0x78, 0x67, 0xf0, 
		0x93, 0xf8, 0x60, 0x80, 0x20, 0x18, 0x60, 0x60, 0x80, 0x28, 0x54, 0xf8, 0x71, 0xd0, 0x35, 0xf8, 
		0xb2, 0x98, 0x67, 0xff, 0xa4, 0x08, 0x37, 0xf8, 0x96, 0xa0, 0x37, 0xf8, 0xb1, 0x38, 0x57, 0xf8, 
		0x76, 0x98, 0x97, 0x78, 0x94, 0x70, 0xb3, 0x08, 0x64, 0x78, 0xf5, 0x78, 0xf6, 0xd0, 0x20, 0x00, 
		0x57, 0x79, 0x77, 0xfe, 0xb0, 0x78, 0x47, 0xf8, 0x80, 0x00, 0x57, 0xf8, 0x90, 0x78, 0x70, 0x00, 
		0x51, 0xe8, 0x81, 0x78, 0x67, 0xf0, 0x93, 0xf8, 0x60, 0x80, 0x20, 0x18, 0x60, 0x60, 0x80, 0x28, 
		0x54, 0xf8, 0x71, 0xd0, 0x35, 0xf8, 0xb2, 0x98, 0x67, 0xff, 0xa4, 0x08, 0x37, 0xf8, 0x96, 0xa0, 
		0x37, 0xf8, 0xb1, 0x38, 0x57, 0xf8, 0x76, 0x98, 0x97, 0x78, 0x94, 0x70, 0xb3, 0x08, 0x64, 0x78, 
		0xf5, 0x78, 0xf6, 0xd0, 0x20, 0x00, 0x57, 0x79, 0x77, 0xfe, 0xb0, 0x78, 0x47, 0xf8, 0x80, 0x00, 
		0x57, 0xf8, 0x90, 0x78, 0x70, 0x00, 0x51, 0xe8, 0x81, 0x78, 0x67, 0xf0, 0x93, 0xf8, 0x60, 0x80, 
		0x20, 0x18, 0x60, 0x60, 0x80, 0x28, 0x54, 0xf8, 0x71, 0xd0, 0x35, 0xf8, 0xb2, 0x98, 0x67, 0xfa, 
		0xd8, 0x04, 0x14, 0x04, 0x10, 0x06, 0x10, 0x20, 0x1c, 0x24, 0x18, 0x00, 0x4c, 0xc6, 0x09, 0x7c, 
		0x18, 0xda, 0x12, 0x02, 0x0e, 0x0e, 0x10, 0x06, 0xc0, 0x04, 0x85, 0x08, 0xef, 0x0c, 0xd0, 0x06, 
		0x0f, 0x06, 0x0b, 0x04, 0x10, 0x06, 0x0f, 0x0c, 0xee, 0x0c, 0xf0, 0x0c, 0xef, 0x1c, 0x10, 0x0c, 
		0xd0, 0x0e, 0x00, 0x06, 0xef, 0x14, 0x0f, 0x0e, 0x1e, 0x16, 0xda, 0x06, 0x00, 0x0a, 0xef, 0x2e, 
		0xff, 0x3e, 0x00, 0x40, 0xde, 0x0c, 0x0e, 0x1a, 0x10, 0x0a, 0x05, 0x06, 0x0f, 0x12, 0xd3, 0x06, 
		0x05, 0x06, 0xff, 0x0c, 0xaa, 0x0c, 0xef, 0x15, 0x01, 0x77, 0x93, 0x5f, 0x87, 0x68, 0x06, 0x81, 
		0x40, 0xa0, 0x90, 0x40, 0x18, 0x55, 0xe8, 0x70, 0x78, 0xd8, 0x00, 0x2c, 0x12, 0xfc, 0x1b, 0x80, 
		0x50, 0x02, 0x61, 0x70, 0x10, 0x1c, 0x59, 0xb0, 0x18, 0x20, 0x58, 0x3c, 0x7a, 0x58, 0x48, 0x20, 
		0x28, 0x3c, 0x73, 0x74, 0x20, 0x34, 0x23, 0x80, 0x23, 0xb4, 0x48, 0x3c, 0x24, 0x06, 0x07, 0x03, 
		0x08, 0x0a, 0x06, 0x82, 0x07, 0x8f, 0x1c, 0x86, 0x00, 0x05, 0x2c, 0x08, 0x07, 0x0c, 0x00, 0x7e, 
		0x82, 0x02, 0x47, 0x41, 0x02, 0x01, 0xc1, 0x01, 0xc0, 0xe1, 0x82, 0xe2, 0x17, 0xe0, 0x80, 0xa2, 
		0x5c, 0x20, 0x99, 0x21, 0x80, 0xc0, 0xdf, 0xe0, 0xc3, 0x01, 0x84, 0x01, 0x20, 0x70, 0x38, 0x0c, 
		0x06, 0x02, 0xea, 0x0a, 0x05, 0x06, 0x0c, 0x05, 0x00, 0x07, 0x85, 0x00, 0x05, 0x07, 0x02, 0x80, 
		0x40, 0x01, 0xe2, 0xc6, 0xc0, 0xc1, 0xe3, 0xc7, 0x21, 0x00, 0x01, 0x4f, 0xe2, 0x01, 0xc3, 0x00, 
		0x1b, 0x20, 0x80, 0x00, 0x40, 0xa1, 0xa9, 0x61, 0x40, 0x61, 0x60, 0x80, 0xec, 0xe1, 0x4e, 0xf0, 
		0x6f, 0xe1, 0x60, 0xf0, 0x50, 0x18, 0x1c, 0x0d, 0xde, 0x2e, 0x06, 0x00, 0x04, 0x0f, 0x1a, 0xff, 
		0xc2, 0xce, 0x0e, 0x09, 0x0e, 0xdf, 0x14, 0x07, 0x18, 0x17, 0x10, 0xd8, 0x0c, 0x05, 0x0a, 0xa1, 
		0x04, 0x89, 0x0c, 0x06, 0x06, 0xbf, 0x06, 0x18, 0x0c, 0x20, 0x08, 0xcd, 0x04, 0xf0, 0x0a, 0xb4, 
		0x0a, 0x0c, 0x05, 0x00, 0x07, 0x85, 0x7f, 0x87, 0x13, 0x02, 0x07, 0x8b, 0x1b, 0x03, 0x07, 0x8f, 
		0x7f, 0xdf, 0x00, 0x2d, 0x82, 0x00, 0x01, 0x02, 0x86, 0xa5, 0x85, 0x01, 0x85, 0x82, 0x03, 0xb3, 
		0x85, 0x3b, 0xc1, 0xbf, 0x85, 0x83, 0xc1, 0x40, 0x60, 0x70, 0x37, 0x78, 0xb8, 0x18, 0x00, 0x10, 
		0x3c, 0x6b, 0xff, 0x0b, 0x38, 0x38, 0x24, 0x3b, 0x7c, 0x50, 0x1c, 0x60, 0x5c, 0x43, 0x60, 0x30, 
		0x14, 0x2a, 0x84, 0x12, 0x24, 0x30, 0x18, 0x1a, 0xfc, 0x18, 0x60, 0x30, 0x80, 0x23, 0x34, 0x13, 
		0xc0, 0x2a, 0xd0, 0x28, 0x30, 0x14, 0x00, 0x1e, 0x15, 0xfe, 0x1c, 0x4c, 0x08, 0x1e, 0x2c, 0x6c, 
		0x0c, 0x1e, 0x3d, 0xff, 0x7c, 0x00, 0xb6, 0x08, 0x00, 0x04, 0x0a, 0x1a, 0x96, 0x14, 0x06, 0x16, 
		0x08, 0x0e, 0xce, 0x14, 0xef, 0x06, 0xfe, 0x16, 0x0f, 0x05, 0x01, 0x81, 0xc0, 0xdd, 0xe2, 0xe0, 
		0x60, 0x00, 0x40, 0xf1, 0xaf, 0xfc, 0x2c, 0xe0, 0xe0, 0x90, 0xed, 0xf1, 0x40, 0x71, 0x81, 0x71, 
		0x0d, 0x80, 0xc0, 0x50, 0xaa, 0x10, 0x48, 0x90, 0xc0, 0x60, 0x6b, 0xf0, 0x61, 0x80, 0xc2, 0x00, 
		0x8c, 0xd0, 0x4f, 0x00, 0xab, 0x40, 0xa0, 0xc0, 0x50, 0x00, 0x78, 0x57, 0xf8, 0x71, 0x30, 0x20, 
		0x78, 0xb1, 0xb0, 0x30, 0x78, 0xf7, 0xfd, 0xf0, 0x02, 0xd8, 0x20, 0x00, 0x10, 0x28, 0x6a, 0x58, 
		0x50, 0x18, 0x58, 0x20, 0x3b, 0x38, 0x53, 0xbc, 0x1b, 0xf8, 0x58, 0x3c, 0x14, 0x06, 0x07, 0x03, 
		0x77, 0x8b, 0x81, 0x80, 0x01, 0x03, 0xc6, 0xbf, 0xf0, 0xb3, 0x83, 0x82, 0x43, 0xb7, 0xc5, 0x01, 
		0xc6, 0x05, 0xc4, 0x36, 0x03, 0x01, 0x42, 0xa8, 0x41, 0x22, 0x43, 0x01, 0x81, 0xaf, 0xc1, 0x86, 
		0x03, 0x08, 0x02, 0x33, 0x41, 0x3c, 0x02, 0xad, 0x02, 0x83, 0x01, 0x40, 0x01, 0xe1, 0x5f, 0xe1, 
		0xc4, 0xc0, 0x81, 0xe2, 0xc6, 0xc0, 0xc1, 0xe3, 0xdf, 0xf7, 0xc0, 0x0b, 0x60, 0x80, 0x00, 0x40, 
		0xa1, 0xa9, 0x61, 0x40, 0x61, 0x60, 0x80, 0xec, 0xe1, 0x4e, 0xf0, 0x6f, 0xe1, 0x60, 0xf0, 0x50, 
		0x18, 0x1c, 0x0d, 0xde, 0x2e, 0x06, 0x00, 0x04, 0x0f, 0x1a, 0xff, 0xc2, 0xce, 0x0e, 0x09, 0x0e, 
		0xdf, 0x14, 0x07, 0x18, 0x17, 0x10, 0xd8, 0x0c, 0x05, 0x0a, 0xa1, 0x04, 0x89, 0x0c, 0x06, 0x06, 
		0xbf, 0x06, 0x18, 0x0c, 0x20, 0x08, 0xcd, 0x04, 0xf0, 0x0a, 0xb4, 0x0a, 0x0c, 0x05, 0x00, 0x07, 
		0x85, 0x7f, 0x87, 0x13, 0x02, 0x07, 0x8b, 0x1b, 0x03, 0x07, 0x8f, 0x7f, 0xb0, 0x5f, 0x88, 0x63, 
		0x0d, 0x63, 0x90, 0x04, 0x06, 0x2b, 0x0a, 0x07, 0x93, 0x5f, 0x06, 0x5f, 0x86, 0x5f, 0x0c, 0x67, 
		0x83, 0x70, 0x82, 0x07, 0x8a, 0x7f, 0x83, 0x07, 0x8d, 0x5f, 0xb2, 0x00, 0x51, 0x4b, 0x03, 0x45, 
		0x04, 0x07, 0x0b, 0x08, 0x05, 0x02, 0x83, 0x07, 0x89, 0x5e, 0x82, 0x80, 0x81, 0x41, 0xc0, 0x80, 
		0x41, 0x1f, 0x80, 0x80, 0x01, 0x03, 0xe1, 0xc1, 0x60, 0xc2, 0x41, 0x5f, 0x20, 0x9f, 0x80, 0xc5, 
		0x80, 0xc2, 0x00, 0x9d, 0xc2, 0x01, 0xc0, 0xdb, 0xc0, 0xe0, 0x90, 0x40, 0x18, 0x57, 0x70, 0x70, 
		0x78, 0xd8, 0x00, 0x2c, 0x14, 0x02, 0x00, 0x0f, 0x04, 0xde, 0x8f, 0x05, 0x01, 0x04, 0x01, 0x84, 
		0x08, 0x07, 0x09, 0x06, 0x7f, 0x93, 0x66, 0x87, 0x78, 0x86, 0x80, 0xc0, 0xdf, 0xe2, 0x41, 0x80, 
		0x9a, 0x60, 0xdf, 0xe2, 0x1f, 0xc1, 0x60, 0x20, 0xb0, 0x61, 0x00, 0x6f, 0xf0, 0xe2, 0xf0, 0xef, 
		0xf0, 0x82, 0x10, 0x8f, 0xa0, 0x40, 0x20, 0x40, 0xf0, 0x83, 0x40, 0xe0, 0xe0, 0xe1, 0x00, 0x81, 
		0xf0, 0xc8, 0x00, 0xa1, 0xe1, 0xd0, 0x08, 0x04, 0x08, 0x00, 0x19, 0x5e, 0x20, 0x14, 0x0c, 0x1c, 
		0x28, 0x1e, 0x3e, 0x09, 0x04, 0x82, 0x01, 0x03, 0x40, 0x20, 0x00, 
	};
} HSpr_burgertime;

// "c64" (GIF orig:590 raw_payload:274 shrunk_payload:80 total:88 bytes)
// Compared to GIF: 14.92% 	Compared to raw: 32.12%
// using GIF index 6 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 255; transparency = 6; )

FL_PROGMEM const struct HSpr_c64 {
	uint16_t datasize = 80;
	uint16_t frames = 1;
	uint16_t duration = 0;
	uint8_t flags = 0;
	uint8_t palette_entries = 6;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 6
		// 0x00, 0x00, 0x00,  // original palette index 5
		// 0x00, 0x3c, 0x96,  // original palette index 4
		// 0x00, 0x50, 0xc8,  // original palette index 3
		// 0xdc, 0x00, 0x00,  // original palette index 1
		// 0xb4, 0x00, 0x00,  // original palette index 2
	};
	uint8_t hs_data[80] = {
		0x00, 0x06, 0x9e, 0x65, 0xa0, 0x15, 0x0e, 0x47, 0x72, 0x01, 0x00, 0xda, 0x07, 0xcb, 0x40, 0x40, 
		0x00, 0xc1, 0xa2, 0xa0, 0x50, 0x38, 0x1c, 0x0e, 0x04, 0x10, 0x0e, 0x0d, 0x08, 0x00, 0x04, 0x0f, 
		0x0c, 0x0e, 0x0e, 0x0f, 0x10, 0x2b, 0x08, 0x00, 0x12, 0x1e, 0x04, 0x3a, 0x0a, 0x18, 0x0c, 0x29, 
		0x10, 0x09, 0x04, 0x18, 0x04, 0x0f, 0x14, 0x73, 0x08, 0x0f, 0x15, 0x04, 0x82, 0x41, 0x43, 0xe0, 
		0x87, 0xe2, 0x60, 0x81, 0x00, 0xa5, 0xf1, 0xa7, 0xf2, 0x09, 0xf1, 0xeb, 0xf2, 0x0d, 0xf1, 0xa0, 
	};
} HSpr_c64;

// "devil_nod" (GIF orig:826 raw_payload:1177 shrunk_payload:835 total:843 bytes)
// Compared to GIF: 102.06% 	Compared to raw: 71.62%
// using GIF index 0 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; transparency = 0; )

FL_PROGMEM const struct HSpr_devil_nod {
	uint16_t datasize = 835;
	uint16_t frames = 4;
	uint16_t duration = 150;
	uint8_t flags = 0;
	uint8_t palette_entries = 51;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xe6, 0xe6, 0x7e,  // original palette index 4
		// 0x00, 0x00, 0x00,  // original palette index 63
		// 0xc0, 0xc0, 0x1f,  // original palette index 1
		// 0x9f, 0x19, 0x19,  // original palette index 43
		// 0xb7, 0x19, 0x19,  // original palette index 37
		// 0xb8, 0x19, 0x19,  // original palette index 36
		// 0xcd, 0xcd, 0x36,  // original palette index 2
		// 0x9e, 0x19, 0x19,  // original palette index 44
		// 0xba, 0x19, 0x19,  // original palette index 34
		// 0xd5, 0x19, 0x19,  // original palette index 27
		// 0xd9, 0x19, 0x19,  // original palette index 26
		// 0xda, 0x19, 0x19,  // original palette index 25
		// 0xb9, 0x19, 0x19,  // original palette index 35
		// 0xc1, 0x19, 0x19,  // original palette index 32
		// 0xe1, 0x19, 0x19,  // original palette index 24
		// 0xe6, 0x19, 0x19,  // original palette index 20
		// 0xe8, 0x19, 0x19,  // original palette index 19
		// 0xe5, 0x19, 0x19,  // original palette index 21
		// 0xa1, 0x19, 0x19,  // original palette index 42
		// 0x19, 0x19, 0x19,  // original palette index 57
		// 0xf3, 0x19, 0x19,  // original palette index 15
		// 0xf5, 0x19, 0x19,  // original palette index 14
		// 0xaf, 0x19, 0x19,  // original palette index 40
		// 0xc6, 0x19, 0x19,  // original palette index 30
		// 0xff, 0x19, 0x19,  // original palette index 13
		// 0xc5, 0x19, 0x19,  // original palette index 31
		// 0xae, 0x19, 0x19,  // original palette index 41
		// 0xca, 0x19, 0x19,  // original palette index 29
		// 0xd2, 0x19, 0x19,  // original palette index 28
		// 0xa2, 0x32, 0x32,  // original palette index 52
		// 0xb5, 0x19, 0x19,  // original palette index 39
		// 0xf0, 0x19, 0x19,  // original palette index 17
		// 0xb6, 0x19, 0x19,  // original palette index 38
		// 0xbf, 0x19, 0x19,  // original palette index 33
		// 0xe4, 0x19, 0x19,  // original palette index 22
		// 0xed, 0x19, 0x19,  // original palette index 18
		// 0xf1, 0x19, 0x19,  // original palette index 16
		// 0xe3, 0x19, 0x19,  // original palette index 23
		// 0xa3, 0x2e, 0x2e,  // original palette index 51
		// 0xb2, 0xb2, 0xb2,  // original palette index 56
		// 0xc4, 0x2e, 0x2e,  // original palette index 49
		// 0xd1, 0xd1, 0xd1,  // original palette index 55
		// 0xf1, 0xf1, 0xf1,  // original palette index 54
		// 0xdf, 0x2e, 0x2e,  // original palette index 48
		// 0xe3, 0x2e, 0x2e,  // original palette index 45
		// 0xff, 0xff, 0xff,  // original palette index 53
		// 0xc0, 0x2e, 0x2e,  // original palette index 50
		// 0xe0, 0x2e, 0x2e,  // original palette index 47
		// 0xe2, 0x2e, 0x2e,  // original palette index 46
		// 0x8c, 0x18, 0x00,  // original palette index 12
	};
	uint8_t hs_data[835] = {
		0x00, 0x02, 0xf3, 0x79, 0xaf, 0xc0, 0x50, 0x5c, 0x0e, 0x04, 0x7f, 0x3f, 0x19, 0x8c, 0xed, 0xe3, 
		0x31, 0x9d, 0xc4, 0x66, 0x33, 0xcd, 0xe6, 0xcd, 0xb3, 0xd1, 0x98, 0xce, 0xea, 0x33, 0x19, 0xea, 
		0xc6, 0x63, 0x3d, 0x98, 0xcc, 0x67, 0xb5, 0x19, 0x8c, 0xee, 0x63, 0x31, 0x9e, 0x0c, 0x66, 0x33, 
		0xe1, 0x8c, 0xc6, 0x7c, 0xd1, 0x98, 0xcf, 0xa2, 0x33, 0x19, 0xf2, 0xc6, 0x63, 0x3a, 0x18, 0xc8, 
		0x00, 0x1f, 0xce, 0x33, 0x19, 0xfa, 0xc6, 0x63, 0x3a, 0xf8, 0xcc, 0x67, 0x8d, 0x19, 0x8c, 0xff, 
		0xe3, 0x31, 0x9e, 0x2c, 0x66, 0x33, 0xae, 0x8c, 0xc6, 0x79, 0x51, 0x98, 0xcf, 0x4a, 0x33, 0x19, 
		0xd1, 0x4c, 0xa6, 0x5b, 0x58, 0xcc, 0x67, 0xe1, 0x19, 0x8c, 0xed, 0xa3, 0x31, 0x9d, 0xfc, 0x66, 
		0x33, 0xe4, 0x8c, 0xc6, 0x7d, 0xb1, 0x98, 0xcf, 0xc6, 0x33, 0x19, 0xf1, 0xc6, 0x63, 0x3a, 0x39, 
		0x74, 0xbb, 0x65, 0xb2, 0xd9, 0x71, 0x25, 0xd2, 0xee, 0x8f, 0x47, 0xa3, 0xf1, 0xf8, 0xfc, 0x7b, 
		0xf2, 0xe9, 0x77, 0x8e, 0x5d, 0x2e, 0xff, 0xff, 0xff, 0xfc, 0x09, 0x74, 0xbb, 0xc1, 0x2e, 0x97, 
		0x78, 0xa5, 0xd2, 0xec, 0x64, 0x61, 0x4c, 0x46, 0x02, 0x04, 0x07, 0x02, 0x00, 0x03, 0x06, 0x85, 
		0x81, 0xc0, 0x60, 0x70, 0x28, 0x14, 0x12, 0x0b, 0x06, 0x82, 0xc1, 0x20, 0x50, 0x20, 0x58, 0x28, 
		0x04, 0x02, 0x0f, 0x02, 0x84, 0x42, 0x61, 0x50, 0xb8, 0x64, 0x2e, 0x15, 0x09, 0x82, 0x40, 0xa0, 
		0xe2, 0xb0, 0x70, 0x88, 0x6c, 0x3a, 0x1f, 0x10, 0x88, 0xc4, 0xa1, 0xf0, 0xe8, 0x6c, 0x20, 0x66, 
		0x0e, 0x05, 0x13, 0x8a, 0x45, 0x20, 0xb1, 0x58, 0xb4, 0x56, 0x0d, 0x14, 0x8a, 0x44, 0xc1, 0xe0, 
		0xa0, 0x50, 0x48, 0x54, 0x5e, 0x29, 0x14, 0x8c, 0x46, 0x63, 0x51, 0x48, 0xa4, 0x6e, 0x14, 0x20, 
		0x05, 0x02, 0x82, 0xc3, 0xa3, 0x91, 0x48, 0xa4, 0x52, 0x3a, 0x03, 0x05, 0x1c, 0x87, 0x41, 0x41, 
		0xe0, 0xa3, 0xd1, 0x48, 0xfc, 0x32, 0x21, 0x20, 0x8c, 0xc8, 0x22, 0x10, 0xc9, 0x0c, 0x52, 0x3c, 
		0x0f, 0x04, 0x18, 0x05, 0x22, 0x91, 0xc9, 0x24, 0xb2, 0x49, 0x34, 0x88, 0x12, 0x08, 0x1e, 0x0a, 
		0x4f, 0x14, 0x94, 0x02, 0x01, 0x00, 0x01, 0xca, 0x22, 0x92, 0x72, 0x80, 0x39, 0x4c, 0x52, 0x55, 
		0x2a, 0x95, 0xca, 0xe5, 0x72, 0xa9, 0x54, 0x52, 0x52, 0x6f, 0x09, 0x2c, 0x96, 0xc5, 0x25, 0x72, 
		0xe9, 0x74, 0xba, 0x57, 0x14, 0x96, 0xcb, 0x16, 0x61, 0x20, 0x52, 0xc9, 0x48, 0xb8, 0x24, 0xa4, 
		0x1c, 0x15, 0x9a, 0x0e, 0x5f, 0x30, 0x98, 0xcc, 0x25, 0xed, 0x10, 0xa1, 0x10, 0xcd, 0xf0, 0xc0, 
		0x04, 0x2e, 0x20, 0x60, 0xd1, 0x70, 0x18, 0x0c, 0x02, 0x01, 0x27, 0x86, 0x02, 0x81, 0x42, 0xc0, 
		0x60, 0x81, 0x80, 0xe0, 0x13, 0x29, 0x94, 0xca, 0x31, 0x15, 0x8a, 0xc5, 0x61, 0xa0, 0x70, 0x42, 
		0x30, 0x90, 0x88, 0x04, 0x02, 0x29, 0x18, 0x80, 0x46, 0x22, 0x80, 0x90, 0x80, 0x40, 0x51, 0xd8, 
		0xe0, 0x40, 0x14, 0x30, 0x1c, 0x0a, 0x34, 0x08, 0x04, 0x3c, 0x05, 0x32, 0x8d, 0xc3, 0x22, 0x31, 
		0x68, 0xcc, 0x5a, 0x23, 0x26, 0x83, 0x4c, 0xa4, 0xe3, 0xe0, 0x70, 0x08, 0xa4, 0x7e, 0x47, 0x25, 
		0x92, 0xc9, 0x64, 0x71, 0xb9, 0x90, 0x2c, 0x14, 0x02, 0x01, 0x1e, 0x99, 0x3b, 0xc4, 0x40, 0x23, 
		0xc0, 0xf0, 0x71, 0xe8, 0x14, 0xaa, 0x57, 0x2e, 0x00, 0x82, 0x95, 0x45, 0x25, 0xe5, 0xf0, 0x92, 
		0xc9, 0x93, 0xbc, 0x14, 0x01, 0xde, 0x0a, 0x65, 0x2c, 0x4a, 0x05, 0x96, 0x4c, 0xa5, 0x00, 0x00, 
		0x70, 0x80, 0x70, 0x60, 0x80, 0x28, 0x9a, 0x2c, 0x11, 0xf0, 0x20, 0x00, 0x3c, 0xa6, 0x52, 0x1c, 
		0x10, 0xff, 0x46, 0x1f, 0x14, 0xe1, 0x05, 0x02, 0x81, 0x41, 0x20, 0xb0, 0x68, 0x2c, 0x10, 0x22, 
		0x0e, 0x03, 0x00, 0x81, 0xc0, 0x60, 0x50, 0x88, 0xf4, 0x2d, 0x5e, 0x0a, 0x17, 0x09, 0x82, 0x40, 
		0xa0, 0x30, 0x30, 0xe8, 0x25, 0x50, 0x38, 0x5c, 0x5a, 0x1e, 0x06, 0x06, 0x33, 0x07, 0x02, 0x8d, 
		0xcb, 0xc1, 0x20, 0x81, 0xc0, 0xa6, 0x51, 0xe8, 0xb8, 0x3c, 0x14, 0x0a, 0x09, 0x0e, 0x8e, 0xc6, 
		0x63, 0x31, 0x60, 0x10, 0x28, 0x8c, 0x72, 0x1d, 0x08, 0x81, 0x40, 0x20, 0x51, 0xe8, 0xa4, 0x52, 
		0x45, 0x26, 0x1f, 0x82, 0x93, 0x43, 0xa2, 0x91, 0x48, 0xf0, 0x3c, 0x13, 0xb0, 0x30, 0x00, 0x28, 
		0x3c, 0x14, 0x9e, 0x29, 0x28, 0x95, 0x33, 0xc2, 0x4a, 0xa5, 0x11, 0x49, 0x38, 0x3c, 0x1c, 0xa5, 
		0xdc, 0x08, 0x00, 0x0e, 0x57, 0x14, 0x94, 0x83, 0xc1, 0x40, 0x20, 0x52, 0xc9, 0x60, 0x40, 0x24, 
		0xae, 0x29, 0x2c, 0x96, 0x1b, 0xc1, 0xc5, 0x25, 0x21, 0x00, 0x40, 0x00, 0x72, 0xc0, 0x78, 0x58, 
		0x00, 0x20, 0x1c, 0xc6, 0x63, 0x31, 0x07, 0x07, 0x5f, 0x83, 0x97, 0x83, 0xc1, 0x4b, 0xde, 0x22, 
		0x9f, 0xe6, 0x9d, 0xe0, 0x83, 0xe2, 0xa0, 0x30, 0x08, 0x3c, 0x06, 0x06, 0xff, 0x11, 0x03, 0x80, 
		0xc1, 0xe0, 0x10, 0x17, 0xf8, 0x29, 0x3c, 0x32, 0x17, 0x0c, 0x85, 0xbf, 0xc2, 0x0b, 0x41, 0x40, 
		0xa6, 0x53, 0x29, 0x94, 0x62, 0x2b, 0x15, 0x8a, 0xc3, 0x40, 0xe0, 0x9f, 0xe1, 0x21, 0x08, 0xb0, 
		0x51, 0x88, 0xb4, 0x60, 0x0a, 0x09, 0xdc, 0x08, 0x1c, 0x0a, 0x3b, 0x1c, 0x05, 0x02, 0x86, 0x00, 
		0xc1, 0x46, 0xa3, 0x8f, 0xf0, 0x72, 0x79, 0x94, 0x6e, 0x19, 0x11, 0x8b, 0x46, 0x62, 0xd1, 0x19, 
		0x34, 0x1a, 0x64, 0xdf, 0x07, 0x32, 0x8a, 0x45, 0x23, 0xf2, 0x39, 0x2c, 0x96, 0x4b, 0x23, 0x8d, 
		0xcc, 0xa2, 0x84, 0x00, 0x50, 0x28, 0xf4, 0xca, 0x50, 0xce, 0x09, 0x14, 0x8a, 0x4a, 0x22, 0x91, 
		0xe0, 0x78, 0x38, 0xf4, 0x0a, 0x55, 0x2b, 0x97, 0x00, 0x41, 0x4a, 0xa2, 0x92, 0xf7, 0xf8, 0x59, 
		0x93, 0xfc, 0x10, 0x04, 0x14, 0x52, 0x64, 0xe0, 0x09, 0x02, 0x96, 0x4b, 0x26, 0x52, 0x80, 0x00, 
		0x38, 0x43, 0xc0, 0x30, 0x40, 0x14, 0x4d, 0x16, 0x0a, 0x11, 0x29, 0x7f, 0x8a, 0x94, 0xca, 0x65, 
		0x8f, 0xf2, 0xa0, 
	};
} HSpr_devil_nod;

// "DigDug16x16" (GIF orig:5001 raw_payload:527 shrunk_payload:113 total:121 bytes)
// Compared to GIF: 2.42% 	Compared to raw: 22.96%
// using GIF index 0 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; transparency = 0; )

FL_PROGMEM const struct HSpr_DigDug16x16 {
	uint16_t datasize = 113;
	uint16_t frames = 2;
	uint16_t duration = 250;
	uint8_t flags = 0;
	uint8_t palette_entries = 5;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xcc, 0xcc, 0xcc,  // original palette index 1
		// 0x00, 0x66, 0xcc,  // original palette index 2
		// 0x00, 0x00, 0x00,  // original palette index 3
		// 0xff, 0x00, 0x00,  // original palette index 4
	};
	uint8_t hs_data[113] = {
		0x00, 0x02, 0xe6, 0x73, 0x39, 0x90, 0x0b, 0x37, 0x30, 0x10, 0x0b, 0xfe, 0x20, 0x2d, 0x01, 0x80, 
		0xc0, 0x41, 0xa3, 0x41, 0xe2, 0xc1, 0xc1, 0x02, 0x22, 0x41, 0xc1, 0xc2, 0x21, 0xc0, 0xe0, 0xa0, 
		0x40, 0x00, 0x50, 0x30, 0x08, 0x20, 0x79, 0x70, 0x80, 0x48, 0x10, 0x38, 0x28, 0x00, 0x14, 0x0a, 
		0x04, 0x3d, 0x0d, 0x04, 0x10, 0x05, 0x07, 0x86, 0x80, 0xc0, 0x20, 0x81, 0x00, 0x70, 0x48, 0x24, 
		0x10, 0x58, 0x0c, 0x0c, 0x08, 0x00, 0x0c, 0x82, 0x14, 0x1e, 0x08, 0x3e, 0x21, 0x1e, 0x28, 0x7e, 
		0x19, 0x0e, 0x0d, 0x60, 0x28, 0x36, 0x11, 0x84, 0x34, 0x00, 0x81, 0xe0, 0x45, 0xff, 0xc1, 0xf4, 
		0x11, 0xfe, 0x4c, 0x7e, 0x14, 0x3e, 0x21, 0x3e, 0x28, 0x1c, 0x15, 0xfa, 0x34, 0x42, 0x21, 0xd2, 
		0x58, 
	};
} HSpr_DigDug16x16;

// "eu" (GIF orig:145 raw_payload:271 shrunk_payload:75 total:83 bytes)
// Compared to GIF: 57.24% 	Compared to raw: 30.63%
// using GIF index 3 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; transparency = 3; )

FL_PROGMEM const struct HSpr_eu {
	uint16_t datasize = 75;
	uint16_t frames = 1;
	uint16_t duration = 1000;
	uint8_t flags = 0;
	uint8_t palette_entries = 5;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 3
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x31, 0x4a, 0x9c,  // original palette index 2
		// 0xff, 0xce, 0x39,  // original palette index 4
		// 0x18, 0x31, 0x84,  // original palette index 1
	};
	uint8_t hs_data[75] = {
		0x00, 0x05, 0x98, 0xd2, 0xb3, 0x9f, 0xfe, 0x74, 0xe6, 0x31, 0x31, 0xc2, 0x06, 0x48, 0x40, 0x40, 
		0x03, 0x60, 0x10, 0x18, 0x10, 0x00, 0x58, 0x3c, 0xbc, 0x0c, 0x02, 0x08, 0x1e, 0x24, 0x16, 0x0a, 
		0x09, 0x02, 0x82, 0x04, 0x41, 0x87, 0xc3, 0x41, 0x03, 0x81, 0x00, 0xa0, 0x81, 0xe1, 0x05, 0x41, 
		0x40, 0xe1, 0x03, 0xe1, 0x43, 0xc1, 0x40, 0xe0, 0xc3, 0xe9, 0x04, 0x01, 0x8b, 0xe2, 0xcf, 0xe1, 
		0x0b, 0xe1, 0xc5, 0x41, 0x46, 0x81, 0x15, 0xe4, 0x80, 0x03, 0x40, 
	};
} HSpr_eu;

// "fire" (GIF orig:1127 raw_payload:2072 shrunk_payload:693 total:701 bytes)
// Compared to GIF: 62.20% 	Compared to raw: 33.83%
// using GIF index 0 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 1000; transparency = 0; )

FL_PROGMEM const struct HSpr_fire {
	uint16_t datasize = 693;
	uint16_t frames = 8;
	uint16_t duration = 50;
	uint8_t flags = 0;
	uint8_t palette_entries = 8;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xc6, 0xa5, 0x00,  // original palette index 7
		// 0x84, 0x42, 0x00,  // original palette index 6
		// 0x63, 0x21, 0x00,  // original palette index 5
		// 0xa5, 0x84, 0x00,  // original palette index 4
		// 0xff, 0xc6, 0x42,  // original palette index 3
		// 0xa5, 0x63, 0x00,  // original palette index 2
		// 0xff, 0xff, 0x42,  // original palette index 1
	};
	uint8_t hs_data[693] = {
		0x00, 0x02, 0xe3, 0x69, 0x60, 0x18, 0x4a, 0x14, 0x02, 0xc7, 0x21, 0x80, 0x69, 0x70, 0x90, 0x0f, 
		0xff, 0x1a, 0x85, 0xa5, 0xb1, 0xc0, 0x3f, 0xff, 0xfa, 0x12, 0x53, 0xf8, 0x01, 0x9c, 0x06, 0x05, 
		0x02, 0x81, 0x40, 0x20, 0x60, 0xe1, 0x10, 0x48, 0x24, 0x16, 0x03, 0x03, 0x82, 0x41, 0x82, 0x02, 
		0x20, 0x50, 0x18, 0x1c, 0x0a, 0x03, 0x01, 0x81, 0x40, 0x42, 0x21, 0xe0, 0xd0, 0x58, 0x2c, 0x1e, 
		0x09, 0x05, 0x83, 0xc0, 0x60, 0x20, 0xf0, 0xd0, 0x20, 0x60, 0x20, 0x00, 0x48, 0x0b, 0x03, 0xbc, 
		0x08, 0x18, 0x3e, 0x0a, 0xdd, 0x19, 0x03, 0x80, 0xc0, 0xe0, 0xd0, 0x08, 0x14, 0x18, 0x1e, 0x1a, 
		0x0b, 0x01, 0x80, 0xc1, 0xa0, 0xf0, 0x58, 0x04, 0x06, 0x08, 0x35, 0x0d, 0x04, 0x81, 0x41, 0xe0, 
		0x90, 0x78, 0x2c, 0x1a, 0x0b, 0x01, 0x1a, 0x07, 0x83, 0xc0, 0x60, 0xb0, 0x76, 0x88, 0x28, 0x08, 
		0x40, 0x34, 0x0d, 0xda, 0x0a, 0x0f, 0x05, 0x80, 0xc1, 0xe0, 0xf0, 0x48, 0x09, 0x08, 0x2c, 0x09, 
		0xda, 0x14, 0x44, 0x08, 0x82, 0x16, 0x02, 0x0a, 0x06, 0x11, 0x08, 0x87, 0x18, 0xc0, 0x58, 0x9d, 
		0x10, 0xc2, 0x0d, 0x06, 0x81, 0x40, 0x20, 0x30, 0x30, 0x70, 0x88, 0x3c, 0x06, 0x0f, 0x06, 0x80, 
		0xae, 0x41, 0x04, 0x42, 0x9f, 0xc1, 0x41, 0x20, 0x50, 0x58, 0x3c, 0x06, 0x07, 0x02, 0x37, 0x84, 
		0x81, 0x84, 0x01, 0x41, 0x60, 0x50, 0x18, 0x34, 0x16, 0x05, 0x05, 0x58, 0x03, 0x14, 0x02, 0x83, 
		0x2e, 0xc1, 0x40, 0xa0, 0xf0, 0x28, 0x23, 0xcc, 0x20, 0x94, 0x14, 0x06, 0x09, 0x07, 0x07, 0x82, 
		0x6b, 0x02, 0x81, 0x10, 0x01, 0x8e, 0x81, 0x83, 0xc1, 0xb4, 0x41, 0x30, 0x02, 0x41, 0x00, 0xe0, 
		0x80, 0x60, 0xda, 0x20, 0xcc, 0x80, 0x9f, 0xe0, 0xa0, 0xf0, 0x58, 0x33, 0x44, 0x2b, 0x7c, 0x38, 
		0xa8, 0x10, 0xb4, 0x1c, 0x1c, 0xe0, 0x14, 0xbe, 0x09, 0xe0, 0x1d, 0x20, 0x14, 0xf4, 0x10, 0xe6, 
		0x09, 0xfe, 0x64, 0x30, 0x3a, 0x07, 0x03, 0x77, 0x8d, 0x49, 0x82, 0x80, 0x96, 0xc1, 0x41, 0x9e, 
		0x21, 0xe0, 0x50, 0x68, 0x3b, 0xc0, 0x14, 0x0e, 0x06, 0xdb, 0x04, 0x0e, 0x09, 0x04, 0x80, 0x9c, 
		0x01, 0x08, 0x81, 0x03, 0x81, 0xc0, 0xe0, 0x90, 0x28, 0x14, 0x19, 0x3e, 0x0e, 0x0a, 0xff, 0x11, 
		0x01, 0x5f, 0x83, 0x82, 0xc1, 0x50, 0xa0, 0x9f, 0xe1, 0x20, 0x6a, 0xb0, 0x8a, 0x20, 0x69, 0x00, 
		0x70, 0x38, 0x34, 0x0a, 0x07, 0x06, 0x08, 0x84, 0x08, 0x03, 0x1f, 0x83, 0x66, 0x02, 0x5f, 0x84, 
		0x39, 0x02, 0x83, 0x40, 0x20, 0x65, 0xc0, 0x42, 0xc0, 0x90, 0x51, 0x68, 0x27, 0xf8, 0x33, 0xd8, 
		0x31, 0x58, 0x57, 0xf8, 0x56, 0xd0, 0x28, 0x0c, 0x16, 0x09, 0x06, 0x82, 0xc1, 0x0c, 0x00, 0x89, 
		0xe0, 0xe0, 0x90, 0x44, 0x00, 0x28, 0x0c, 0x1a, 0x05, 0x06, 0x80, 0xc1, 0x20, 0x50, 0x18, 0x23, 
		0x38, 0x2c, 0x0a, 0x06, 0xff, 0x04, 0x48, 0x04, 0xe6, 0x10, 0xc8, 0x0e, 0xff, 0x2c, 0x95, 0x06, 
		0x0e, 0x1a, 0x30, 0x04, 0x23, 0x17, 0x02, 0x80, 0xc0, 0x60, 0x50, 0x12, 0x28, 0x98, 0x14, 0x0e, 
		0x0e, 0x80, 0x05, 0x00, 0x81, 0x1b, 0x83, 0x0a, 0x81, 0x29, 0x01, 0x41, 0x06, 0x80, 0xc0, 0x01, 
		0x59, 0xe0, 0x83, 0xe0, 0xa0, 0xcf, 0xe0, 0x60, 0x00, 0xad, 0xf0, 0x82, 0x20, 0x43, 0xd0, 0xab, 
		0x20, 0x4c, 0xf0, 0x70, 0x58, 0x0b, 0xbc, 0x10, 0xec, 0x13, 0x44, 0x10, 0x7c, 0x11, 0x84, 0x14, 
		0x1a, 0x04, 0x31, 0x0b, 0x02, 0x82, 0x0b, 0xc1, 0xb7, 0x01, 0x41, 0x8a, 0x20, 0xc4, 0x00, 0xa0, 
		0x90, 0x28, 0x24, 0x1a, 0x09, 0x05, 0x80, 0xc1, 0x0c, 0x01, 0x20, 0x30, 0x78, 0x0c, 0x19, 0xf6, 
		0x0c, 0xbe, 0x0a, 0x0e, 0xa3, 0x05, 0x02, 0x80, 0xc1, 0x60, 0xd0, 0x28, 0x14, 0x0a, 0x0c, 0x04, 
		0x05, 0x01, 0x83, 0x03, 0xc1, 0x40, 0xe0, 0xd0, 0x21, 0x30, 0x48, 0x1c, 0x0e, 0x05, 0x03, 0x7f, 
		0x98, 0x08, 0x92, 0x77, 0x0b, 0x07, 0x91, 0x2c, 0x83, 0x80, 0x2b, 0x41, 0x03, 0x83, 0xa2, 0x81, 
		0x40, 0xe0, 0x60, 0xf1, 0x10, 0x68, 0x34, 0x15, 0x7c, 0x08, 0x76, 0x2a, 0x03, 0x01, 0x80, 0x8b, 
		0x04, 0x9b, 0x01, 0x40, 0x97, 0xc0, 0x92, 0xe0, 0x84, 0x41, 0x5a, 0xe0, 0xa0, 0xc2, 0x00, 0x4c, 
		0xf0, 0xcd, 0xe0, 0x70, 0x18, 0x23, 0xc4, 0x18, 0xc4, 0x14, 0x10, 0x40, 0x12, 0x09, 0x04, 0x83, 
		0x83, 0x81, 0x14, 0x41, 0x10, 0xc2, 0x0f, 0x01, 0x36, 0x01, 0x40, 0xe0, 0x30, 0x78, 0x28, 0x74, 
		0x2b, 0x60, 0x1c, 0x0e, 0x04, 0x4c, 0x04, 0x70, 0x13, 0x03, 0x6f, 0x91, 0x00, 0x2f, 0x7f, 0x0f, 
		0x82, 0x18, 0x81, 0x97, 0xc4, 0x21, 0x01, 0x07, 0x46, 0x04, 0x01, 0x0f, 0x87, 0x23, 0xc5, 0x8b, 
		0x01, 0x40, 0xa0, 0xd0, 0x28, 0x20, 0x40, 0x4c, 0x0a, 0x09, 0x03, 0x81, 0xc0, 0xd8, 0x60, 0x81, 
		0xe1, 0xe0, 0xc4, 0xe0, 0x60, 0xe1, 0x20, 0x0c, 0xa6, 0xe1, 0x8e, 0xe1, 0xe8, 0xf0, 0x62, 0xb1, 
		0x69, 0xbd, 0xc0, 0x0b, 0x20, 
	};
} HSpr_fire;

// "gear" (GIF orig:914 raw_payload:2102 shrunk_payload:723 total:731 bytes)
// Compared to GIF: 79.98% 	Compared to raw: 34.78%
// using GIF index 17 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 16; loop = 0; transparency = 17; )

FL_PROGMEM const struct HSpr_gear {
	uint16_t datasize = 723;
	uint16_t frames = 8;
	uint16_t duration = 20;
	uint8_t flags = 0;
	uint8_t palette_entries = 18;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 17
		// 0xff, 0xff, 0xff,  // original palette index 16
		// 0xef, 0xef, 0xef,  // original palette index 15
		// 0x8f, 0x8f, 0x8f,  // original palette index 9
		// 0xaf, 0xaf, 0xaf,  // original palette index 11
		// 0x70, 0x70, 0x70,  // original palette index 7
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xdf, 0xdf, 0xdf,  // original palette index 14
		// 0xbf, 0xbf, 0xbf,  // original palette index 12
		// 0x40, 0x40, 0x40,  // original palette index 4
		// 0x60, 0x60, 0x60,  // original palette index 6
		// 0x9f, 0x9f, 0x9f,  // original palette index 10
		// 0x50, 0x50, 0x50,  // original palette index 5
		// 0x20, 0x20, 0x20,  // original palette index 2
		// 0xcf, 0xcf, 0xcf,  // original palette index 13
		// 0x10, 0x10, 0x10,  // original palette index 1
		// 0x80, 0x80, 0x80,  // original palette index 8
		// 0x30, 0x30, 0x30,  // original palette index 3
	};
	uint8_t hs_data[723] = {
		0x00, 0x02, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x7f, 0xbf, 0x1f, 0x8f, 0xc7, 0xeb, 0xf5, 0xfa, 0xfb, 
		0x85, 0xc2, 0xe0, 0x11, 0x05, 0xdf, 0xef, 0xf7, 0xf7, 0xfb, 0xfd, 0xfd, 0x02, 0x81, 0x40, 0xb0, 
		0x58, 0x2c, 0x19, 0xfc, 0xfe, 0x7e, 0xa1, 0x50, 0xa8, 0x48, 0x24, 0x12, 0x0e, 0x7f, 0x3f, 0x9f, 
		0x10, 0x88, 0x44, 0x30, 0x18, 0x0c, 0x04, 0xc2, 0x61, 0x30, 0x80, 0xc0, 0xa0, 0x70, 0x48, 0x08, 
		0x00, 0x5c, 0x16, 0x0d, 0x06, 0x83, 0x83, 0x85, 0x40, 0xe0, 0xd0, 0x68, 0x30, 0x80, 0x14, 0x12, 
		0x10, 0x0f, 0x0c, 0x0e, 0x05, 0x06, 0x84, 0xc2, 0x21, 0x41, 0x40, 0x80, 0xf0, 0xe0, 0x00, 0x80, 
		0xf1, 0xe4, 0x40, 0xc0, 0xf1, 0x10, 0xb8, 0x3c, 0x10, 0x44, 0x0c, 0x1e, 0x20, 0x00, 0x0c, 0xa8, 
		0x08, 0x1e, 0x6e, 0x0a, 0x2f, 0x05, 0x0c, 0x86, 0x83, 0xc4, 0xc3, 0x8a, 0x00, 0xe0, 0x50, 0x40, 
		0x88, 0x88, 0x4c, 0x10, 0xc8, 0x12, 0x0e, 0x22, 0x14, 0x85, 0x09, 0x04, 0x07, 0x89, 0x81, 0x8c, 
		0x82, 0x08, 0x04, 0x41, 0x60, 0x49, 0x40, 0x90, 0xc0, 0xe8, 0xb8, 0x3c, 0x10, 0x28, 0x14, 0x00, 
		0x1e, 0x13, 0x06, 0x84, 0x83, 0x45, 0x42, 0xdd, 0x40, 0xa1, 0xe4, 0x30, 0x6f, 0xf1, 0x50, 0x68, 
		0x44, 0x0a, 0x21, 0x0d, 0x88, 0x37, 0xc5, 0x98, 0x01, 0x43, 0xc4, 0x21, 0x4f, 0x22, 0x21, 0x8f, 
		0xf1, 0xcc, 0xc0, 0x6f, 0xf1, 0x90, 0xa8, 0x54, 0x25, 0xa0, 0x09, 0xfe, 0x30, 0xf0, 0x08, 0x1e, 
		0x32, 0x16, 0xff, 0x1b, 0x0a, 0x7f, 0x8e, 0x29, 0x06, 0x7f, 0x89, 0x86, 0x40, 0xe0, 0xef, 0xf1, 
		0xca, 0x50, 0x8f, 0xf1, 0x2f, 0x10, 0xaf, 0xf1, 0x10, 0xd8, 0x20, 0xfc, 0x20, 0xd0, 0x20, 0x00, 
		0x34, 0x08, 0x9c, 0x0a, 0x1e, 0x16, 0x08, 0x00, 0x0b, 0x0c, 0x82, 0x42, 0x4d, 0x02, 0x17, 0xe2, 
		0x1b, 0x60, 0xa1, 0x64, 0x90, 0xaa, 0xf0, 0xd0, 0xc1, 0x20, 0x20, 0x80, 0x55, 0xe0, 0xc0, 0x78, 
		0xb8, 0x7c, 0x08, 0x3e, 0x3a, 0x09, 0x02, 0x87, 0x04, 0x81, 0x3b, 0x45, 0x43, 0xe0, 0xd0, 0x98, 
		0x13, 0xfc, 0x6c, 0x1a, 0x0e, 0xff, 0x18, 0x52, 0x08, 0xff, 0x15, 0x09, 0x7f, 0x8e, 0x86, 0xb2, 
		0x03, 0x3f, 0xc4, 0xc2, 0x61, 0x0f, 0xf1, 0xcb, 0x90, 0x4f, 0xf1, 0x50, 0x68, 0x7c, 0x2e, 0x1c, 
		0xfb, 0x14, 0x00, 0x06, 0x53, 0x05, 0x0e, 0x86, 0xc3, 0x15, 0x61, 0x55, 0xe1, 0x21, 0x70, 0x81, 
		0xe8, 0x22, 0x30, 0x45, 0xf8, 0xa0, 0x78, 0x23, 0x58, 0x62, 0xb0, 0x68, 0x44, 0x2a, 0x1f, 0x0a, 
		0x1a, 0x04, 0x5e, 0x0c, 0x07, 0x8c, 0x3d, 0x05, 0x07, 0x89, 0x81, 0x83, 0xc7, 0x43, 0xe0, 0x71, 
		0x00, 0x90, 0x27, 0xf8, 0xd8, 0x23, 0xfc, 0x69, 0xdc, 0x1b, 0xfc, 0x54, 0x1a, 0x16, 0xff, 0x1c, 
		0xa3, 0x0c, 0xff, 0x11, 0x10, 0x52, 0x05, 0x7f, 0x8a, 0x3a, 0x05, 0x7f, 0x88, 0x83, 0x43, 0x16, 
		0xa1, 0x40, 0x02, 0x4a, 0x60, 0xe0, 0x90, 0xa7, 0x78, 0xa8, 0x8c, 0x1e, 0x09, 0x0f, 0x2c, 0x88, 
		0x4f, 0x87, 0x88, 0x83, 0xc7, 0x43, 0xe0, 0xf0, 0x28, 0x5c, 0x41, 0xfe, 0x2e, 0x1e, 0x72, 0x05, 
		0x10, 0x6f, 0x8d, 0x56, 0x85, 0x07, 0x09, 0x29, 0x85, 0x7f, 0x8a, 0x56, 0x04, 0x17, 0x8a, 0x87, 
		0xc4, 0x62, 0x30, 0x87, 0xf8, 0xe8, 0x63, 0xfc, 0x6c, 0x3e, 0x08, 0xff, 0x19, 0x06, 0x5b, 0x06, 
		0x7f, 0x88, 0x7f, 0x05, 0x7f, 0x89, 0x88, 0xc0, 0xdd, 0xa1, 0x5f, 0xe2, 0x61, 0x50, 0xc8, 0x1b, 
		0xfc, 0x70, 0xd0, 0x1c, 0x20, 0xae, 0x10, 0x1e, 0x1a, 0x21, 0x02, 0x85, 0xc1, 0xa0, 0xc2, 0x51, 
		0x0b, 0x80, 0x60, 0x30, 0x4d, 0xb0, 0x8a, 0xf1, 0x41, 0xf0, 0x46, 0xc0, 0xa9, 0x90, 0xf0, 0x38, 
		0x64, 0x3e, 0x14, 0x6c, 0x06, 0xbd, 0x16, 0x21, 0x06, 0x0e, 0x15, 0x0a, 0x77, 0x8e, 0x5e, 0x84, 
		0x76, 0x0b, 0x84, 0x42, 0x20, 0x4f, 0xf3, 0xb0, 0x68, 0x69, 0x88, 0x1b, 0xfc, 0x4c, 0x36, 0x1c, 
		0xff, 0x1a, 0x51, 0x08, 0xff, 0x15, 0x0b, 0x5a, 0x06, 0x7f, 0x88, 0x86, 0x43, 0xa1, 0x70, 0xa1, 
		0x20, 0x66, 0x78, 0x88, 0x49, 0x48, 0x18, 0x3c, 0x52, 0xd8, 0x14, 0x2e, 0x1f, 0x09, 0x08, 0x87, 
		0x32, 0x83, 0x84, 0x81, 0x01, 0x1a, 0x42, 0xbb, 0xc4, 0xa2, 0x01, 0xaf, 0xc5, 0xc1, 0x20, 0xf0, 
		0xb8, 0x1b, 0x3c, 0x64, 0x3e, 0x0d, 0x06, 0x08, 0x03, 0x66, 0x8b, 0x47, 0x03, 0x07, 0x0a, 0x3c, 
		0x03, 0x7f, 0x8c, 0x55, 0x04, 0x76, 0x8a, 0x86, 0x41, 0x46, 0x20, 0x9f, 0xe3, 0x13, 0x60, 0x9f, 
		0xe2, 0xe0, 0xd0, 0xd5, 0x30, 0x47, 0xf8, 0x85, 0xa8, 0x67, 0xf8, 0x87, 0x50, 0x77, 0xf8, 0x78, 
		0x52, 0xd4, 0x14, 0x0e, 0x20, 0xec, 0x12, 0x3b, 0x0a, 0xb7, 0x08, 0x00, 0x0e, 0xb6, 0x04, 0x87, 
		0x05, 0x0b, 0x86, 0x0e, 0x83, 0x8d, 0x81, 0xc1, 0x61, 0x4a, 0xc0, 0xca, 0xf1, 0x50, 0xa0, 0x78, 
		0xe8, 0x29, 0xd8, 0x13, 0x3c, 0x64, 0x2a, 0x19, 0x0d, 0x88, 0x3f, 0xc7, 0x43, 0xc4, 0x20, 0x81, 
		0xe2, 0xc3, 0xe3, 0xa1, 0xaf, 0xf1, 0xf0, 0x82, 0x88, 0x37, 0xf8, 0xb8, 0x6c, 0x24, 0x22, 0x0d, 
		0xfe, 0x2a, 0x0d, 0x04, 0x7f, 0x8c, 0x83, 0x42, 0x5b, 0x61, 0x1f, 0xe2, 0x14, 0x81, 0xdf, 0xe1, 
		0xc5, 0xa0, 0x80, 
	};
} HSpr_gear;

// "ghost" (GIF orig:168 raw_payload:277 shrunk_payload:138 total:146 bytes)
// Compared to GIF: 86.90% 	Compared to raw: 52.71%
// using GIF index 6 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; transparency = 6; )

FL_PROGMEM const struct HSpr_ghost {
	uint16_t datasize = 138;
	uint16_t frames = 1;
	uint16_t duration = 0;
	uint8_t flags = 0;
	uint8_t palette_entries = 7;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 6
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xf7, 0xf7, 0xf7,  // original palette index 5
		// 0xf7, 0xf7, 0xce,  // original palette index 4
		// 0x7b, 0x94, 0xbd,  // original palette index 1
		// 0x8c, 0xf7, 0xf7,  // original palette index 2
		// 0xf7, 0x00, 0x00,  // original palette index 3
	};
	uint8_t hs_data[138] = {
		0x00, 0x05, 0xfb, 0x80, 0x01, 0xf3, 0xaf, 0x79, 0x4d, 0xee, 0x30, 0x0e, 0x08, 0x26, 0x1a, 0x02, 
		0x00, 0x06, 0x0b, 0x0e, 0x0d, 0x05, 0x02, 0x00, 0x03, 0x08, 0x85, 0x80, 0xc0, 0x81, 0xa1, 0x40, 
		0x00, 0xa0, 0x62, 0x40, 0x80, 0xe0, 0x40, 0x20, 0xa0, 0xf0, 0x40, 0x70, 0x40, 0xf1, 0x40, 0x30, 
		0x42, 0x20, 0x42, 0xd0, 0xf0, 0x28, 0x18, 0x08, 0x14, 0x10, 0x1e, 0x22, 0x03, 0x02, 0x81, 0xc0, 
		0xe0, 0x70, 0x51, 0x70, 0x41, 0x78, 0x40, 0x78, 0x48, 0x20, 0x3c, 0x34, 0x06, 0x03, 0x06, 0x80, 
		0x87, 0x82, 0xc0, 0x20, 0x23, 0x60, 0x41, 0x10, 0x40, 0xf0, 0xa2, 0xf0, 0x70, 0x50, 0x40, 0x23, 
		0x48, 0x20, 0x78, 0x28, 0x2c, 0x16, 0x08, 0x30, 0x06, 0x10, 0x04, 0x30, 0x04, 0x0e, 0x06, 0x0f, 
		0x0c, 0x00, 0x10, 0x0e, 0x06, 0x41, 0x05, 0x04, 0x82, 0x03, 0x02, 0x83, 0x82, 0xb7, 0x41, 0x82, 
		0xc1, 0x83, 0x41, 0x38, 0x83, 0xbb, 0xc2, 0x83, 0x42, 0x80, 
	};
} HSpr_ghost;

// "ghost3" (GIF orig:620 raw_payload:530 shrunk_payload:177 total:185 bytes)
// Compared to GIF: 29.84% 	Compared to raw: 34.91%
// using GIF index 1 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 1; loop = 0; transparency = 1; )

FL_PROGMEM const struct HSpr_ghost3 {
	uint16_t datasize = 177;
	uint16_t frames = 2;
	uint16_t duration = 280;
	uint8_t flags = 0;
	uint8_t palette_entries = 6;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 1
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xc2, 0xc2, 0xc2,  // original palette index 3
		// 0xe2, 0xe2, 0xe2,  // original palette index 4
		// 0xfa, 0xfa, 0xfa,  // original palette index 2
		// 0xfa, 0x10, 0x59,  // original palette index 5
	};
	uint8_t hs_data[177] = {
		0x00, 0x05, 0xe1, 0x70, 0xb8, 0x5e, 0x2f, 0x17, 0x8b, 0xf4, 0x00, 0x05, 0x10, 0xac, 0x84, 0x42, 
		0xc0, 0x40, 0x00, 0xc3, 0xe2, 0x20, 0x30, 0x18, 0x10, 0x00, 0x18, 0x44, 0x38, 0x34, 0x14, 0x0c, 
		0x00, 0x0c, 0x22, 0x08, 0x1c, 0x16, 0x07, 0x03, 0x82, 0x00, 0x01, 0x84, 0x41, 0x04, 0x01, 0x03, 
		0x81, 0x03, 0x42, 0x41, 0x20, 0x30, 0x48, 0x08, 0x3c, 0x10, 0x38, 0x11, 0x28, 0x10, 0x3c, 0x30, 
		0x80, 0x10, 0x3c, 0x18, 0x2c, 0x18, 0x3c, 0x3c, 0x02, 0x02, 0x0f, 0x06, 0x00, 0x0c, 0x1f, 0x0a, 
		0x1d, 0x09, 0x04, 0x82, 0x80, 0x41, 0x83, 0xc1, 0x93, 0xc3, 0x41, 0x40, 0x00, 0xc3, 0xe1, 0x41, 
		0xe4, 0xc1, 0xc1, 0x91, 0xc2, 0x07, 0x80, 0xa0, 0x60, 0xf0, 0x8a, 0xe1, 0x0a, 0xf0, 0xec, 0xe0, 
		0xec, 0xf1, 0x0e, 0xe0, 0xce, 0xf1, 0x2f, 0xf4, 0x04, 0xf1, 0x90, 0x17, 0xf0, 0x67, 0xf8, 0x60, 
		0x78, 0x28, 0x23, 0xc0, 0x23, 0xfc, 0x28, 0xb4, 0x1b, 0xc0, 0x2b, 0xfc, 0x40, 0x30, 0x28, 0x3c, 
		0x6b, 0xfc, 0x40, 0xf8, 0x20, 0x3c, 0x53, 0xfc, 0x48, 0x04, 0x1b, 0xbc, 0x53, 0x84, 0x20, 0xbc, 
		0x18, 0x40, 0x31, 0xfc, 0x38, 0xc0, 0x32, 0x7c, 0x22, 0x3c, 0x2a, 0xbc, 0x73, 0x3c, 0x83, 0xbc, 
		0x60, 
	};
} HSpr_ghost3;

// "gwain2" (GIF orig:1417 raw_payload:2608 shrunk_payload:1433 total:1441 bytes)
// Compared to GIF: 101.69% 	Compared to raw: 55.25%
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; )

FL_PROGMEM const struct HSpr_gwain2 {
	uint16_t datasize = 1433;
	uint16_t frames = 10;
	uint16_t duration = 20;
	uint8_t flags = 0;
	uint8_t palette_entries = 16;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x99, 0xab, 0xd8,  // original palette index 8
		// 0xb1, 0xca, 0xf8,  // original palette index 13
		// 0x86, 0x99, 0xc6,  // original palette index 7
		// 0x74, 0x87, 0xb8,  // original palette index 4
		// 0xd2, 0xe7, 0xfd,  // original palette index 15
		// 0xc4, 0xd7, 0xfa,  // original palette index 14
		// 0x96, 0xb5, 0xff,  // original palette index 9
		// 0xae, 0xc0, 0xde,  // original palette index 12
		// 0xa5, 0xb7, 0xda,  // original palette index 10
		// 0x5e, 0x71, 0xa6,  // original palette index 2
		// 0x57, 0x6b, 0xa1,  // original palette index 1
		// 0x65, 0x78, 0xac,  // original palette index 3
		// 0x7e, 0x91, 0xc0,  // original palette index 6
		// 0x7c, 0x8e, 0xc0,  // original palette index 5
		// 0xa5, 0xbb, 0xec,  // original palette index 11
	};
	uint8_t hs_data[1433] = {
		0x00, 0x02, 0xcc, 0xea, 0xfb, 0x1b, 0x1e, 0x57, 0xe3, 0x0d, 0x99, 0xe3, 0x5d, 0x30, 0xfb, 0x8e, 
		0x97, 0x9f, 0xfb, 0xc4, 0xeb, 0xfe, 0xb2, 0xdb, 0x5f, 0xfe, 0xbb, 0x81, 0xde, 0xd2, 0xed, 0xfb, 
		0x55, 0xeb, 0x8e, 0x9a, 0xaf, 0x6b, 0xd0, 0xd9, 0x6f, 0x1a, 0xcb, 0xf6, 0x47, 0x81, 0x7c, 0xc7, 
		0x70, 0x34, 0xbb, 0xbf, 0x61, 0x08, 0xac, 0x06, 0x05, 0x03, 0x07, 0x0b, 0x82, 0x41, 0x60, 0x50, 
		0x58, 0x20, 0x78, 0x5c, 0x1a, 0x0f, 0x02, 0x84, 0x03, 0xc5, 0x42, 0x20, 0x50, 0x78, 0x3c, 0x16, 
		0x13, 0x08, 0x83, 0x42, 0x21, 0x50, 0x08, 0x04, 0x2a, 0x03, 0x08, 0x83, 0x41, 0x60, 0xf0, 0x78, 
		0x3c, 0x0a, 0x0d, 0x02, 0x81, 0x41, 0xa0, 0x21, 0xb0, 0x40, 0x70, 0x40, 0xe0, 0x40, 0x00, 0x90, 
		0x52, 0xa8, 0x21, 0x58, 0x30, 0x70, 0x78, 0x4c, 0x2e, 0x01, 0x00, 0x86, 0x41, 0xa0, 0xa1, 0x10, 
		0xd0, 0x58, 0x49, 0x30, 0x24, 0x2e, 0x06, 0x10, 0x0c, 0x3d, 0x06, 0x00, 0x09, 0x06, 0x17, 0x87, 
		0x2f, 0x02, 0x00, 0x02, 0x85, 0x17, 0x81, 0x40, 0xa0, 0xa1, 0x40, 0x44, 0xe0, 0x70, 0x08, 0x5c, 
		0x36, 0x09, 0x05, 0x07, 0x02, 0x86, 0xc2, 0x60, 0xb0, 0x68, 0x2c, 0x36, 0x07, 0x09, 0x80, 0x40, 
		0xe0, 0x45, 0x10, 0x50, 0x68, 0x64, 0x12, 0x19, 0x0c, 0x80, 0xc0, 0xe1, 0x90, 0x28, 0x34, 0x02, 
		0x07, 0x06, 0x81, 0xc3, 0x21, 0xd0, 0xc8, 0x1c, 0x1a, 0x0d, 0x01, 0x81, 0xc0, 0x60, 0x50, 0x68, 
		0x31, 0x78, 0x14, 0x06, 0x07, 0x03, 0x80, 0xc0, 0x61, 0x20, 0x00, 0xcf, 0xe2, 0x90, 0xc8, 0x4c, 
		0x05, 0x32, 0x08, 0x00, 0x26, 0x0d, 0x06, 0x83, 0x0a, 0x05, 0xc2, 0xd0, 0x00, 0xa0, 0xb0, 0xe8, 
		0x5c, 0x32, 0x1b, 0x0c, 0x17, 0x06, 0x48, 0x04, 0x00, 0x03, 0x08, 0x03, 0x85, 0xc3, 0x20, 0x2f, 
		0xf0, 0x8b, 0x00, 0x70, 0x48, 0x04, 0x02, 0x1b, 0x05, 0x82, 0xc1, 0x9c, 0x01, 0xa0, 0xd0, 0x22, 
		0xa8, 0x20, 0x60, 0x71, 0x08, 0x28, 0x33, 0x3c, 0x1c, 0x25, 0xfc, 0x1e, 0x0f, 0x05, 0x77, 0x84, 
		0x85, 0xc0, 0xe0, 0xc1, 0x10, 0xe4, 0xe0, 0x81, 0x10, 0x50, 0x97, 0x58, 0x21, 0xf8, 0x48, 0x41, 
		0xbc, 0x2c, 0x24, 0x3e, 0x08, 0xaa, 0x08, 0x80, 0x08, 0x9e, 0x0a, 0x17, 0x03, 0x86, 0x42, 0x20, 
		0x50, 0x78, 0x34, 0x26, 0x09, 0x01, 0x82, 0xc1, 0x60, 0x70, 0x47, 0xf8, 0x28, 0x34, 0x0e, 0x02, 
		0x71, 0x05, 0x0a, 0x81, 0xc1, 0x21, 0x50, 0xc8, 0x23, 0xfc, 0x24, 0x3e, 0x15, 0x01, 0x80, 0xc3, 
		0x21, 0x30, 0x68, 0x33, 0xf4, 0x13, 0xfc, 0x24, 0x26, 0x07, 0x0a, 0x86, 0x40, 0xe0, 0x2f, 0xf3, 
		0x70, 0x48, 0x0b, 0x64, 0x30, 0x00, 0x2c, 0x3a, 0x0b, 0x06, 0x55, 0x04, 0x36, 0x82, 0x00, 0x04, 
		0x80, 0xc1, 0x99, 0x40, 0xa1, 0x50, 0xd8, 0x44, 0x16, 0x06, 0x0f, 0x11, 0x07, 0x83, 0x41, 0x60, 
		0xb0, 0x28, 0x14, 0x14, 0x42, 0x14, 0x1e, 0x0d, 0xc0, 0x11, 0x5e, 0x12, 0x1d, 0x08, 0x67, 0x8c, 
		0x80, 0xbb, 0xc4, 0x41, 0x9d, 0xe1, 0x20, 0xc0, 0xe0, 0xec, 0xe0, 0x46, 0x40, 0x70, 0x32, 0x40, 
		0x21, 0x00, 0x71, 0xf8, 0x48, 0x51, 0x00, 0x10, 0x40, 0x34, 0x16, 0x08, 0x5f, 0x09, 0x0c, 0x07, 
		0x82, 0x81, 0x41, 0x60, 0xb0, 0x58, 0x31, 0x40, 0x1c, 0x2e, 0x07, 0x01, 0x07, 0x83, 0x82, 0xc3, 
		0x21, 0x50, 0xd8, 0x0c, 0x3a, 0x09, 0x01, 0x77, 0x82, 0x83, 0x42, 0xa0, 0xb0, 0x28, 0x2c, 0x0e, 
		0x09, 0x0f, 0x80, 0xc0, 0xde, 0x80, 0x81, 0xe0, 0xe1, 0xd0, 0xd8, 0x34, 0x06, 0x18, 0xfd, 0x08, 
		0xff, 0x0b, 0x01, 0x86, 0x42, 0xe1, 0x90, 0x37, 0xf9, 0xa8, 0x5c, 0x11, 0x10, 0x0c, 0x00, 0x26, 
		0x11, 0x05, 0x82, 0xc3, 0x82, 0xa0, 0xa1, 0xa7, 0xd0, 0xb0, 0x08, 0x54, 0x14, 0xfa, 0x0a, 0x06, 
		0xa7, 0x04, 0x15, 0x06, 0x2e, 0x06, 0x8e, 0x0b, 0x02, 0x83, 0xc1, 0xa0, 0x62, 0x00, 0xad, 0x20, 
		0xee, 0xf0, 0x90, 0x08, 0x04, 0x11, 0xa0, 0x1a, 0x0c, 0x6c, 0x09, 0x0a, 0x84, 0x37, 0xc3, 0xc1, 
		0x5f, 0xe1, 0x21, 0x10, 0x67, 0xf8, 0x70, 0x80, 0x50, 0x78, 0xa8, 0x3c, 0x16, 0x1a, 0xec, 0x05, 
		0x09, 0x83, 0x41, 0x5f, 0xe0, 0xe0, 0x43, 0x50, 0x44, 0x10, 0xb0, 0x08, 0x59, 0x80, 0x1c, 0x16, 
		0x11, 0x06, 0x82, 0xc1, 0x9f, 0xe1, 0x21, 0x30, 0x48, 0x49, 0xec, 0x14, 0x26, 0x17, 0x0a, 0x85, 
		0x43, 0x20, 0x30, 0x97, 0x78, 0x38, 0x0c, 0x0e, 0x0a, 0x7b, 0x05, 0x0f, 0x83, 0x3c, 0x81, 0x83, 
		0xc1, 0xc0, 0xa1, 0x90, 0x88, 0x2c, 0x0e, 0x1c, 0xff, 0x13, 0x09, 0x87, 0x42, 0xe1, 0x62, 0xa0, 
		0x4f, 0xf3, 0x10, 0x08, 0x58, 0x14, 0x52, 0x04, 0x14, 0x19, 0xb0, 0x0c, 0x86, 0x0c, 0x1e, 0x16, 
		0x13, 0x06, 0x3e, 0x02, 0x81, 0xc1, 0x60, 0xd0, 0x28, 0x28, 0x84, 0x28, 0x3c, 0x14, 0x1e, 0x0c, 
		0xd4, 0x05, 0x02, 0x81, 0x07, 0xc2, 0xc1, 0x15, 0xc0, 0xdd, 0xe0, 0xc5, 0xe1, 0xa1, 0x60, 0xf0, 
		0xd0, 0x58, 0x20, 0x38, 0x24, 0x2a, 0x10, 0x0f, 0x0d, 0x02, 0x28, 0x04, 0x86, 0x41, 0x5e, 0x02, 
		0x20, 0x50, 0x58, 0x09, 0x34, 0x28, 0x40, 0x44, 0x1a, 0x01, 0x00, 0x86, 0xc1, 0x56, 0xa0, 0x9d, 
		0xe0, 0xa0, 0x50, 0x50, 0x00, 0x20, 0xf8, 0x28, 0x04, 0x32, 0x1b, 0x0d, 0x80, 0x90, 0x41, 0x41, 
		0xa0, 0x30, 0x48, 0x23, 0xf8, 0x13, 0x3c, 0x14, 0x06, 0x07, 0x0a, 0x07, 0x82, 0x82, 0xc3, 0x20, 
		0x70, 0x16, 0x98, 0x27, 0x78, 0x38, 0x34, 0x12, 0x11, 0x02, 0x81, 0x42, 0x16, 0xc0, 0x9f, 0xe1, 
		0xa0, 0xd0, 0x10, 0x58, 0x28, 0x24, 0x05, 0xfe, 0x26, 0x03, 0x0c, 0x85, 0xc2, 0xe0, 0x82, 0xc0, 
		0x4f, 0xf2, 0xef, 0x60, 0xb0, 0xa0, 0x40, 0x78, 0x1a, 0xe0, 0x14, 0x2e, 0x11, 0x05, 0x82, 0x9b, 
		0x81, 0x82, 0x41, 0x41, 0xa0, 0xd0, 0x58, 0x44, 0x12, 0x11, 0x06, 0x83, 0xc1, 0xa1, 0xa1, 0xe0, 
		0xa7, 0xc0, 0x50, 0x26, 0x20, 0x36, 0xf8, 0x68, 0x02, 0xb4, 0x1b, 0xbc, 0x21, 0x00, 0x34, 0x0d, 
		0xfe, 0x1e, 0x03, 0x0b, 0x07, 0x84, 0x82, 0x03, 0xc3, 0x41, 0xe0, 0xb0, 0x61, 0x88, 0x38, 0x24, 
		0x14, 0x5e, 0x18, 0x8c, 0x0e, 0x16, 0x4e, 0x04, 0x0e, 0x13, 0x02, 0x83, 0x42, 0xe0, 0x10, 0xe2, 
		0xf0, 0x31, 0x68, 0x48, 0x2c, 0x1a, 0x10, 0x88, 0x0d, 0x06, 0x09, 0x83, 0x0d, 0x82, 0x47, 0x04, 
		0x86, 0x42, 0xa1, 0x90, 0xa8, 0x4c, 0x1a, 0x0f, 0x02, 0x84, 0xc1, 0x19, 0xe1, 0x1d, 0xe0, 0xe1, 
		0xe9, 0x30, 0x50, 0x58, 0x1b, 0xc0, 0x20, 0x3c, 0x23, 0xf0, 0x14, 0x16, 0x11, 0x0c, 0x81, 0x3f, 
		0xc4, 0x42, 0x60, 0x30, 0xa8, 0x58, 0x1c, 0x23, 0xfc, 0xd4, 0x0e, 0x02, 0xff, 0x0f, 0x0b, 0x34, 
		0x03, 0x80, 0xc1, 0x60, 0xb0, 0x80, 0x70, 0x58, 0x63, 0xf8, 0x14, 0x39, 0xa6, 0x0e, 0x0c, 0x0f, 
		0x0b, 0x01, 0x3d, 0x82, 0x82, 0xad, 0x01, 0x40, 0x81, 0xe1, 0x9d, 0xc1, 0xe0, 0x50, 0x25, 0x00, 
		0x68, 0x33, 0x40, 0x34, 0x16, 0x0c, 0x52, 0x0a, 0xff, 0x10, 0x90, 0x04, 0x5a, 0x0a, 0xf0, 0x0f, 
		0x07, 0x82, 0x88, 0x01, 0x0f, 0xc3, 0xc1, 0xe0, 0xd0, 0x58, 0x2c, 0x04, 0x7c, 0x08, 0xb4, 0x08, 
		0x36, 0x16, 0x11, 0x0d, 0x1f, 0x03, 0x85, 0xb1, 0x01, 0x1b, 0x81, 0xc1, 0xe0, 0xb0, 0xc7, 0xf8, 
		0x68, 0x0c, 0x0e, 0x18, 0x52, 0x07, 0x05, 0x86, 0x40, 0x5f, 0xe1, 0x21, 0x30, 0x38, 0x0c, 0x25, 
		0xde, 0x0a, 0x05, 0x05, 0x85, 0x3c, 0x01, 0xbf, 0xc2, 0xc0, 0xa1, 0x90, 0x88, 0x34, 0x0c, 0x12, 
		0x11, 0xfe, 0x16, 0x13, 0x03, 0x85, 0xc2, 0xe1, 0x42, 0xe0, 0x6f, 0xf3, 0x10, 0x38, 0x31, 0xec, 
		0x10, 0x00, 0x4c, 0x10, 0x9e, 0x08, 0xde, 0x16, 0x01, 0x0c, 0x84, 0xc0, 0x60, 0x90, 0xa6, 0x98, 
		0x28, 0x2c, 0x38, 0x1e, 0x14, 0xca, 0x0a, 0x0b, 0x05, 0x3f, 0x82, 0x83, 0x43, 0x51, 0xe1, 0x57, 
		0xc2, 0x20, 0xd0, 0x31, 0x88, 0x46, 0x78, 0x88, 0x14, 0x1a, 0x0b, 0x08, 0x08, 0x03, 0x84, 0xbb, 
		0xc6, 0x96, 0xc1, 0x08, 0x03, 0xc1, 0x60, 0x50, 0xb2, 0x80, 0x37, 0x80, 0x50, 0x68, 0x28, 0x18, 
		0x38, 0x18, 0xfc, 0x3c, 0x09, 0x56, 0x1a, 0x13, 0x06, 0x83, 0x9c, 0x01, 0x03, 0xc4, 0xc1, 0x20, 
		0xd0, 0x68, 0x4c, 0x10, 0xa6, 0x0a, 0x05, 0x08, 0x82, 0x3f, 0xc2, 0x40, 0xe1, 0x90, 0xa8, 0x74, 
		0x06, 0x19, 0x02, 0x82, 0xc1, 0x60, 0x2f, 0x00, 0x6f, 0xf0, 0xb0, 0x68, 0x4c, 0x32, 0x02, 0x13, 
		0x04, 0xff, 0x13, 0x09, 0x81, 0xc2, 0xa1, 0x80, 0x80, 0x8e, 0x00, 0xe6, 0x90, 0x6e, 0xf1, 0x70, 
		0x68, 0x33, 0xb8, 0x30, 0x74, 0x2c, 0x1a, 0x05, 0x06, 0x15, 0x08, 0x85, 0x42, 0xe0, 0x10, 0xd3, 
		0x70, 0x28, 0x30, 0x68, 0x34, 0x22, 0x0b, 0x05, 0x83, 0x41, 0x56, 0x40, 0xa0, 0xa1, 0x70, 0x4c, 
		0xd0, 0xec, 0x10, 0x70, 0x58, 0x2c, 0x16, 0x05, 0x0e, 0x16, 0x82, 0x0d, 0x83, 0x70, 0x08, 0x11, 
		0x02, 0x82, 0x04, 0x04, 0xc0, 0xa0, 0xc3, 0x20, 0x6f, 0xf0, 0xef, 0x00, 0x50, 0x42, 0x08, 0x82, 
		0x00, 0x38, 0x69, 0x84, 0x2c, 0x20, 0x5e, 0x18, 0x78, 0x0c, 0x00, 0x0a, 0x18, 0x1e, 0x04, 0x70, 
		0x0c, 0x7f, 0x09, 0x0a, 0x3f, 0x02, 0x84, 0xc3, 0x82, 0x00, 0xa0, 0xb0, 0x46, 0x88, 0x27, 0xf8, 
		0x38, 0x1c, 0x32, 0x09, 0x0d, 0x86, 0x25, 0x41, 0x3c, 0x01, 0xbf, 0xc1, 0x43, 0xe0, 0x70, 0xf8, 
		0x34, 0x1a, 0x03, 0x0c, 0x86, 0xc3, 0x20, 0x6f, 0xf1, 0x50, 0x18, 0x1c, 0x12, 0x07, 0x01, 0x7f, 
		0x8a, 0x00, 0x0d, 0x86, 0x41, 0xa0, 0xc8, 0xa0, 0x80, 0x00, 0xf0, 0x88, 0x12, 0xa8, 0x28, 0x00, 
		0x34, 0x29, 0x04, 0x0a, 0x0a, 0x20, 0x0f, 0x04, 0x87, 0x43, 0xa0, 0x29, 0x20, 0x70, 0x88, 0x74, 
		0x38, 0x24, 0x0e, 0x06, 0xf7, 0x04, 0xe1, 0x08, 0x07, 0x07, 0x01, 0x5e, 0x89, 0x77, 0x85, 0x7f, 
		0x0d, 0x82, 0xc0, 0xcd, 0x61, 0x1d, 0xe1, 0xa0, 0xc5, 0x20, 0xce, 0x00, 0x6e, 0xf0, 0x86, 0x10, 
		0xd0, 0xd0, 0xf8, 0x72, 0x68, 0x24, 0x60, 0x52, 0xe0, 0x38, 0x11, 0x34, 0x23, 0xfc, 0x14, 0x32, 
		0x05, 0x02, 0x24, 0x02, 0x81, 0xc1, 0x60, 0xd0, 0x28, 0x2c, 0x2a, 0x02, 0xff, 0x05, 0x01, 0x82, 
		0x41, 0xa0, 0x49, 0x30, 0x50, 0xc8, 0x44, 0x1a, 0x07, 0x0d, 0x7f, 0x84, 0x81, 0xc3, 0x20, 0x90, 
		0x18, 0x34, 0x1a, 0x03, 0x04, 0x7f, 0x8c, 0x00, 0x07, 
	};
} HSpr_gwain2;

// "invader" (GIF orig:400 raw_payload:1548 shrunk_payload:223 total:231 bytes)
// Compared to GIF: 57.75% 	Compared to raw: 14.92%
// using GIF index 3 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; transparency = 3; )

FL_PROGMEM const struct HSpr_invader {
	uint16_t datasize = 223;
	uint16_t frames = 6;
	uint16_t duration = 200;
	uint8_t flags = 0;
	uint8_t palette_entries = 4;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 3
		// 0xbf, 0xbf, 0xbf,  // original palette index 0
		// 0x7f, 0x7f, 0x7f,  // original palette index 1
		// 0x40, 0x40, 0x40,  // original palette index 2
	};
	uint8_t hs_data[223] = {
		0x00, 0x02, 0xdf, 0xef, 0xf7, 0xf7, 0xfb, 0xfd, 0xfe, 0x81, 0x40, 0xa0, 0x06, 0x88, 0xc0, 0x60, 
		0x20, 0x91, 0xa0, 0xf1, 0xe1, 0x72, 0xe0, 0xf2, 0xe0, 0x70, 0x70, 0x10, 0x00, 0x20, 0x48, 0xd0, 
		0x28, 0x70, 0x02, 0x11, 0x38, 0x91, 0xb8, 0xf2, 0xb8, 0xb2, 0xe8, 0x74, 0xfb, 0x10, 0x00, 0xf8, 
		0x14, 0x08, 0x12, 0x34, 0x1e, 0x3c, 0x2e, 0x5c, 0x1e, 0x5c, 0x0e, 0x0e, 0x04, 0x00, 0x04, 0x09, 
		0x1a, 0x05, 0x0e, 0x00, 0x42, 0x27, 0x12, 0x37, 0x1e, 0x57, 0x16, 0x5d, 0x0e, 0x9f, 0x62, 0x00, 
		0x1f, 0x03, 0x81, 0x82, 0x46, 0x83, 0xc7, 0x85, 0xcb, 0x83, 0xcb, 0x81, 0xc1, 0xc0, 0xc0, 0x00, 
		0x81, 0x23, 0x40, 0xa1, 0xc0, 0x08, 0x44, 0xe2, 0x46, 0xe3, 0xca, 0xe2, 0xcb, 0xa1, 0xd3, 0xec, 
		0x5f, 0xef, 0x4f, 0xe3, 0xc1, 0xe4, 0x56, 0xe6, 0xdf, 0xf0, 0xc1, 0x21, 0x4d, 0x63, 0xd1, 0x62, 
		0xd3, 0xe6, 0xdf, 0xe4, 0x60, 0x50, 0x20, 0x48, 0xd0, 0x78, 0xf0, 0xb8, 0xd0, 0x28, 0x30, 0x48, 
		0xb0, 0x79, 0x10, 0xb8, 0xb0, 0x79, 0x50, 0x01, 0xb5, 0x08, 0x31, 0xb8, 0x95, 0xf8, 0x50, 0x78, 
		0xd1, 0x18, 0x50, 0x58, 0x31, 0x68, 0x70, 0x78, 0x94, 0x28, 0x57, 0x78, 0x91, 0xa8, 0x70, 0x78, 
		0x97, 0xf9, 0x18, 0x0c, 0x04, 0x12, 0x34, 0x1e, 0x3c, 0x2e, 0x34, 0x0a, 0x0c, 0x12, 0x2c, 0x1e, 
		0x44, 0x2e, 0x2c, 0x1e, 0x54, 0x00, 0x6d, 0x4a, 0x0c, 0x6e, 0x25, 0xfe, 0x14, 0x1e, 0x34, 0x46, 
		0x14, 0x16, 0x0c, 0x5a, 0x1c, 0x1e, 0x25, 0x0a, 0x15, 0xde, 0x24, 0x6a, 0x1c, 0x1e, 0x24, 
	};
} HSpr_invader;

// "joystick" (GIF orig:1072 raw_payload:1668 shrunk_payload:535 total:543 bytes)
// Compared to GIF: 50.65% 	Compared to raw: 32.55%
// using GIF index 63 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 43; loop = 0; transparency = 63; )

FL_PROGMEM const struct HSpr_joystick {
	uint16_t datasize = 535;
	uint16_t frames = 6;
	uint16_t duration = 100;
	uint8_t flags = 0;
	uint8_t palette_entries = 44;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 63
		// 0x90, 0x00, 0x28,  // original palette index 0
		// 0xc4, 0x00, 0x10,  // original palette index 6
		// 0xe3, 0x00, 0x02,  // original palette index 19
		// 0xdd, 0x00, 0x02,  // original palette index 14
		// 0xba, 0x00, 0x10,  // original palette index 4
		// 0xf9, 0x66, 0x66,  // original palette index 29
		// 0xfb, 0xa3, 0xa3,  // original palette index 36
		// 0xea, 0x00, 0x00,  // original palette index 22
		// 0xde, 0x00, 0x00,  // original palette index 15
		// 0xb6, 0x00, 0x10,  // original palette index 2
		// 0xe5, 0x00, 0x02,  // original palette index 21
		// 0xfc, 0xa3, 0xa3,  // original palette index 37
		// 0xfa, 0x66, 0x66,  // original palette index 30
		// 0xeb, 0x00, 0x00,  // original palette index 23
		// 0xdf, 0x00, 0x00,  // original palette index 17
		// 0xce, 0x00, 0x02,  // original palette index 10
		// 0xde, 0x00, 0x02,  // original palette index 16
		// 0xec, 0x00, 0x00,  // original palette index 24
		// 0xe5, 0x00, 0x00,  // original palette index 20
		// 0xdb, 0x00, 0x00,  // original palette index 12
		// 0xcb, 0x00, 0x02,  // original palette index 7
		// 0xbc, 0x00, 0x10,  // original palette index 5
		// 0xe1, 0x00, 0x00,  // original palette index 18
		// 0xdc, 0x00, 0x00,  // original palette index 13
		// 0xd4, 0x00, 0x00,  // original palette index 11
		// 0xb1, 0x00, 0x10,  // original palette index 1
		// 0xb7, 0x00, 0x10,  // original palette index 3
		// 0xcc, 0x00, 0x02,  // original palette index 8
		// 0x85, 0x10, 0x35,  // original palette index 9
		// 0x98, 0x1e, 0x41,  // original palette index 26
		// 0x90, 0x18, 0x3c,  // original palette index 25
		// 0x49, 0x70, 0x88,  // original palette index 27
		// 0xcb, 0xd2, 0xd6,  // original palette index 40
		// 0x90, 0xa6, 0xb3,  // original palette index 34
		// 0x53, 0x78, 0x8e,  // original palette index 28
		// 0xb0, 0xbd, 0xc6,  // original palette index 38
		// 0xa9, 0xb8, 0xc1,  // original palette index 35
		// 0x77, 0x92, 0xa3,  // original palette index 31
		// 0x78, 0x94, 0xa4,  // original palette index 32
		// 0xb3, 0xc0, 0xc8,  // original palette index 39
		// 0xdb, 0xde, 0xdf,  // original palette index 41
		// 0xe6, 0xe6, 0xe6,  // original palette index 42
		// 0x8f, 0xa5, 0xb2,  // original palette index 33
	};
	uint8_t hs_data[535] = {
		0x00, 0x02, 0xc8, 0x40, 0x25, 0x1c, 0x48, 0x04, 0x43, 0xc7, 0x00, 0x81, 0x77, 0x60, 0x10, 0x2d, 
		0xd4, 0x02, 0x21, 0xf9, 0xb3, 0x59, 0xbf, 0x7a, 0x3d, 0x1f, 0xaa, 0x01, 0x00, 0xef, 0x40, 0x20, 
		0x1b, 0x68, 0x04, 0x43, 0xcb, 0x00, 0x81, 0x7f, 0x34, 0x7a, 0x3f, 0xd5, 0x9a, 0xcd, 0xeb, 0x80, 
		0x40, 0x3b, 0xf0, 0x08, 0x07, 0x3a, 0x01, 0x02, 0xef, 0x40, 0x20, 0x5e, 0xc8, 0x04, 0x03, 0xcb, 
		0x00, 0x80, 0x76, 0xe0, 0x10, 0x0e, 0x5c, 0x02, 0x05, 0xbc, 0x80, 0x44, 0x3c, 0x30, 0x08, 0x07, 
		0x72, 0x01, 0x00, 0xea, 0x40, 0x20, 0x1b, 0x18, 0x04, 0x43, 0x6f, 0x00, 0x88, 0x73, 0x20, 0x10, 
		0x2c, 0x2c, 0x42, 0x6b, 0x98, 0x8f, 0x50, 0x72, 0x11, 0x89, 0xe5, 0x26, 0xe1, 0x88, 0xe5, 0xf4, 
		0xba, 0xd9, 0x0d, 0x36, 0xce, 0xa7, 0x78, 0xc7, 0x6c, 0x37, 0xbc, 0x6d, 0x4e, 0xe3, 0x83, 0x77, 
		0xc9, 0x68, 0xef, 0x19, 0x4d, 0x26, 0xcf, 0x81, 0xc8, 0xed, 0xf7, 0xbb, 0xfe, 0x6f, 0x37, 0x9b, 
		0x1f, 0xa5, 0xd9, 0x21, 0x82, 0xc0, 0x40, 0x00, 0x92, 0xa2, 0xa0, 0x30, 0x28, 0x1c, 0x12, 0x0a, 
		0x10, 0x13, 0x01, 0x81, 0x41, 0xa0, 0xf0, 0x88, 0x4c, 0x28, 0x20, 0x22, 0x03, 0x0b, 0x86, 0x43, 
		0x61, 0xd0, 0xf8, 0x80, 0x3c, 0x4c, 0x46, 0x25, 0x12, 0x89, 0xc5, 0x22, 0xa0, 0xf1, 0x31, 0x68, 
		0xbc, 0x5e, 0x31, 0x19, 0x8d, 0x10, 0x05, 0x46, 0xe2, 0x11, 0xc0, 0x70, 0xa8, 0x04, 0x02, 0x3b, 
		0x1e, 0x8f, 0xc7, 0x41, 0xc2, 0xa0, 0x12, 0x09, 0x0c, 0x8a, 0x40, 0x0d, 0x15, 0x20, 0x07, 0x83, 
		0x90, 0x04, 0x43, 0xc8, 0xe4, 0x92, 0x10, 0x78, 0x39, 0x0c, 0x92, 0x46, 0x1d, 0x0b, 0x24, 0x90, 
		0xc8, 0x64, 0xb2, 0x69, 0x34, 0x96, 0x43, 0x21, 0x92, 0x08, 0x41, 0xc8, 0x24, 0xf2, 0x20, 0x00, 
		0x89, 0x38, 0x40, 0x14, 0x82, 0x51, 0x21, 0x94, 0xca, 0x80, 0x01, 0x25, 0x32, 0x19, 0x40, 0x3c, 
		0x1c, 0xac, 0x1e, 0x26, 0x56, 0x30, 0x08, 0x00, 0x14, 0xfd, 0xf2, 0xee, 0x14, 0xfe, 0x06, 0xff, 
		0x1c, 0x0f, 0x06, 0xff, 0x15, 0x25, 0x7f, 0x83, 0x92, 0xbf, 0xeb, 0x3f, 0x72, 0x37, 0x45, 0x3f, 
		0x41, 0xbb, 0x45, 0xbf, 0xc2, 0x04, 0x06, 0x3f, 0xf6, 0xa9, 0x02, 0x00, 0x01, 0x20, 0x05, 0x40, 
		0x60, 0x50, 0x38, 0x24, 0x15, 0x84, 0x2a, 0x05, 0x06, 0x83, 0xc2, 0x21, 0x30, 0xa7, 0x18, 0x98, 
		0x5c, 0x32, 0x1b, 0x0e, 0x87, 0xc4, 0x01, 0xe2, 0x62, 0x31, 0x28, 0x94, 0x4e, 0x29, 0x15, 0x07, 
		0x89, 0x8b, 0x45, 0xe2, 0xf1, 0x88, 0xcc, 0x68, 0x80, 0x2a, 0x37, 0x10, 0x8e, 0x03, 0x85, 0x40, 
		0x20, 0x11, 0xd8, 0xf4, 0x7e, 0x3a, 0x0e, 0x15, 0x00, 0x6f, 0x83, 0x7f, 0x8b, 0x07, 0x83, 0x7f, 
		0x8a, 0x90, 0x83, 0xc1, 0xc8, 0x5f, 0xf6, 0x94, 0x40, 0x80, 0x00, 0x92, 0x02, 0xa0, 0x30, 0x28, 
		0x1c, 0x12, 0x0a, 0xc0, 0x15, 0x02, 0x83, 0x41, 0xe1, 0x10, 0x98, 0x53, 0x84, 0x4c, 0x2e, 0x19, 
		0x0d, 0x87, 0x43, 0xe2, 0x00, 0xf1, 0x31, 0x18, 0x94, 0x4a, 0x27, 0x14, 0x8a, 0x83, 0xc4, 0xc5, 
		0xa2, 0xf1, 0x78, 0xc4, 0x65, 0xe4, 0x2a, 0x03, 0x1b, 0x88, 0x47, 0x01, 0xc2, 0xa0, 0x12, 0x08, 
		0xec, 0x7a, 0x3f, 0x1d, 0x7f, 0x8b, 0x70, 0x02, 0x7f, 0x8c, 0x07, 0x82, 0x7f, 0x89, 0x92, 0xbf, 
		0xc1, 0xc9, 0x5f, 0xf7, 0x14, 0x40, 0x80, 0x00, 0x81, 0xc2, 0xe0, 0x50, 0x38, 0x24, 0x15, 0x80, 
		0x2a, 0x05, 0x06, 0x83, 0xc2, 0x21, 0x30, 0xa7, 0x08, 0x98, 0x5c, 0x32, 0x1b, 0x0e, 0x87, 0xc4, 
		0x01, 0xe2, 0x62, 0x31, 0x28, 0x94, 0x4e, 0x29, 0x15, 0x07, 0x89, 0x8b, 0x45, 0xe2, 0xf1, 0x88, 
		0xcb, 0xc8, 0x4c, 0x82, 0x03, 0x1b, 0x88, 0x47, 0x01, 0xc2, 0x60, 0x12, 0x09, 0x14, 0x76, 0x3d, 
		0x1f, 0x8e, 0x83, 0x84, 0xbf, 0xfb, 0x80, 
	};
} HSpr_joystick;

// "kirby_run" (GIF orig:573 raw_payload:1057 shrunk_payload:537 total:545 bytes)
// Compared to GIF: 95.11% 	Compared to raw: 51.56%
// using GIF index 10 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 10; loop = 0; transparency = 10; )

FL_PROGMEM const struct HSpr_kirby_run {
	uint16_t datasize = 537;
	uint16_t frames = 4;
	uint16_t duration = 100;
	uint8_t flags = 0;
	uint8_t palette_entries = 11;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 10
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xce, 0x10, 0xbd,  // original palette index 4
		// 0xef, 0x42, 0xde,  // original palette index 5
		// 0x73, 0x00, 0x5a,  // original palette index 2
		// 0xff, 0xad, 0xf7,  // original palette index 8
		// 0xff, 0x73, 0xef,  // original palette index 7
		// 0xff, 0xff, 0xff,  // original palette index 9
		// 0x31, 0x31, 0x31,  // original palette index 1
		// 0xce, 0x00, 0x00,  // original palette index 3
		// 0xff, 0x10, 0x21,  // original palette index 6
	};
	uint8_t hs_data[537] = {
		0x00, 0x05, 0xe7, 0x44, 0x37, 0xbe, 0xfa, 0x17, 0x7a, 0xe7, 0x00, 0xad, 0x7f, 0xf5, 0xbf, 0x7f, 
		0xfd, 0xcf, 0xdf, 0xff, 0xff, 0xff, 0xe6, 0x33, 0x19, 0x8f, 0x3a, 0x01, 0x00, 0xff, 0xc4, 0x24, 
		0x22, 0x00, 0xb0, 0x10, 0x00, 0x21, 0x70, 0x98, 0x0c, 0x0a, 0x06, 0x00, 0x05, 0x04, 0x08, 0x87, 
		0x80, 0xc0, 0xe0, 0xa0, 0x00, 0x70, 0x68, 0x10, 0x40, 0x28, 0x38, 0x1c, 0x1c, 0x20, 0x2a, 0x03, 
		0x06, 0x82, 0xc1, 0xa0, 0xb0, 0x50, 0xa0, 0x21, 0x98, 0x20, 0x80, 0x20, 0xf0, 0x38, 0x40, 0x08, 
		0x18, 0xd4, 0x18, 0x40, 0x10, 0x78, 0x10, 0x3c, 0x4c, 0x1a, 0x03, 0x01, 0x82, 0x01, 0x81, 0x03, 
		0xc2, 0x84, 0x01, 0x40, 0xa0, 0x23, 0xd0, 0x70, 0x38, 0x44, 0x1a, 0x0d, 0x08, 0x81, 0xc1, 0x60, 
		0x50, 0x22, 0x80, 0x21, 0xf0, 0x28, 0x31, 0x30, 0x20, 0xb0, 0x11, 0x80, 0x1c, 0x06, 0x09, 0x01, 
		0x81, 0x10, 0x41, 0x20, 0x42, 0xa4, 0x81, 0x40, 0x61, 0x30, 0x68, 0x51, 0x48, 0x18, 0x00, 0x19, 
		0xb8, 0x24, 0x2a, 0x15, 0x0a, 0x84, 0x84, 0x02, 0x40, 0xe0, 0x50, 0x40, 0xf8, 0x40, 0x78, 0x28, 
		0x41, 0x28, 0x10, 0x34, 0x14, 0x12, 0x12, 0x20, 0x07, 0x01, 0x84, 0xb7, 0x41, 0x80, 0x01, 0x41, 
		0x21, 0x20, 0xf0, 0x6e, 0xb0, 0x6f, 0x41, 0x0f, 0x11, 0x0f, 0xf1, 0xb0, 0x48, 0x14, 0x0c, 0x9a, 
		0x09, 0xfe, 0x24, 0xde, 0x12, 0x0c, 0x6e, 0x06, 0x0e, 0x0c, 0xff, 0x0a, 0x10, 0x09, 0x01, 0x82, 
		0x07, 0x41, 0x00, 0x81, 0x2c, 0x01, 0x9f, 0xc1, 0xc1, 0x20, 0xcf, 0x00, 0xec, 0x00, 0x50, 0x46, 
		0xf8, 0x37, 0x80, 0x77, 0xf8, 0x55, 0xc8, 0x40, 0x78, 0x78, 0x28, 0x7c, 0x24, 0x0e, 0x07, 0x08, 
		0x81, 0xc1, 0x80, 0x40, 0xa0, 0xb0, 0x30, 0xf8, 0x28, 0x11, 0xb4, 0x19, 0x30, 0x11, 0x3c, 0x1c, 
		0x0e, 0x04, 0x50, 0x06, 0x09, 0x04, 0xef, 0x0c, 0x5f, 0x09, 0x04, 0x81, 0x03, 0xc3, 0xbc, 0x01, 
		0xbb, 0xc1, 0x2b, 0x41, 0x03, 0x42, 0x40, 0xa0, 0x90, 0xa7, 0x50, 0x28, 0x24, 0x2a, 0x14, 0x22, 
		0x04, 0x00, 0x06, 0x09, 0x06, 0x30, 0x04, 0x00, 0x18, 0xe4, 0x12, 0x00, 0x18, 0xff, 0x1f, 0x03, 
		0x00, 0x02, 0x3d, 0x82, 0x07, 0x06, 0x81, 0x30, 0xc2, 0x41, 0x5f, 0xe1, 0xc1, 0xc1, 0x60, 0xe1, 
		0x00, 0xd0, 0x11, 0x50, 0x25, 0x68, 0x56, 0xe8, 0x20, 0x70, 0x31, 0x48, 0x37, 0x00, 0x61, 0x00, 
		0x27, 0xf8, 0x40, 0x78, 0x71, 0x00, 0x28, 0x0a, 0xf4, 0x14, 0x18, 0x1e, 0x1e, 0x0a, 0x9f, 0x06, 
		0xa9, 0x05, 0x05, 0x81, 0xc2, 0x20, 0xd0, 0x68, 0x41, 0x1c, 0x10, 0x80, 0x24, 0x18, 0x64, 0x08, 
		0xa4, 0x12, 0x0c, 0x40, 0x09, 0x04, 0x3e, 0x85, 0x1b, 0x02, 0x81, 0x40, 0x45, 0xe0, 0x8c, 0x21, 
		0x51, 0xc1, 0x21, 0x50, 0x68, 0x48, 0x7c, 0x1c, 0x11, 0x20, 0x12, 0x0d, 0x01, 0x84, 0xc2, 0xa1, 
		0x50, 0xa0, 0x78, 0x28, 0x4c, 0x11, 0xfe, 0x16, 0x10, 0x0f, 0x04, 0x1f, 0x07, 0x09, 0x84, 0xc1, 
		0x1f, 0x81, 0xa1, 0x2e, 0x40, 0x8e, 0xa1, 0x0f, 0x31, 0x4f, 0xf1, 0xf0, 0x27, 0xf0, 0x23, 0x58, 
		0x30, 0x70, 0x58, 0x1a, 0x04, 0x24, 0x19, 0xfe, 0x1c, 0x1c, 0x09, 0xf8, 0x08, 0x20, 0x1d, 0x3e, 
		0x11, 0x62, 0x16, 0x0c, 0xce, 0x07, 0x04, 0x5f, 0x03, 0x77, 0x06, 0x08, 0x02, 0x7f, 0x84, 0x77, 
		0x07, 0x52, 0x02, 0x80, 0xae, 0xc2, 0x03, 0xc3, 0xc1, 0x43, 0xe1, 0x20, 0x70, 0x38, 0x44, 0x0d, 
		0xfc, 0x09, 0xdc, 0x08, 0x3e, 0x0a, 0x04, 0x6d, 0x06, 0xfe, 0x08, 0x60, 0x05, 0x02, 0x28, 0x03, 
		0x77, 0x86, 0x09, 0x02, 0x64, 0x03, 0x6e, 0x02, 0x07, 0x87, 0x81, 0x41, 0x02, 0x00, 0xa1, 0x30, 
		0xa5, 0x68, 0x20, 0x68, 0x48, 0x14, 0x11, 0xde, 0x0a, 0x03, 0x04, 0x85, 0x42, 0x9f, 0xe1, 0x41, 
		0xc0, 0xa1, 0x49, 0x00, 0x60, 0x01, 0x8f, 0xf2, 0x00, 
	};
} HSpr_kirby_run;

// "kputrummis" (GIF orig:462 raw_payload:599 shrunk_payload:388 total:396 bytes)
// Compared to GIF: 85.71% 	Compared to raw: 66.11%
// using GIF index 0 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; transparency = 0; )

FL_PROGMEM const struct HSpr_kputrummis {
	uint16_t datasize = 388;
	uint16_t frames = 2;
	uint16_t duration = 100;
	uint8_t flags = 0;
	uint8_t palette_entries = 29;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x29, 0x29, 0x29,  // original palette index 3
		// 0x5a, 0x3d, 0x29,  // original palette index 17
		// 0x80, 0x4f, 0x34,  // original palette index 19
		// 0xb8, 0x66, 0x32,  // original palette index 22
		// 0xd8, 0x87, 0x53,  // original palette index 28
		// 0x4c, 0x36, 0x2e,  // original palette index 16
		// 0xa3, 0x59, 0x2c,  // original palette index 21
		// 0xbe, 0x7e, 0x55,  // original palette index 27
		// 0x21, 0x21, 0x21,  // original palette index 2
		// 0x90, 0x53, 0x27,  // original palette index 20
		// 0x71, 0x48, 0x2f,  // original palette index 18
		// 0x31, 0x35, 0x4a,  // original palette index 10
		// 0x50, 0x49, 0x63,  // original palette index 23
		// 0x42, 0x57, 0x94,  // original palette index 15
		// 0x3c, 0x47, 0x6b,  // original palette index 13
		// 0xa0, 0x65, 0x49,  // original palette index 25
		// 0x56, 0x58, 0x86,  // original palette index 24
		// 0xb9, 0x97, 0x7f,  // original palette index 29
		// 0xcf, 0xc6, 0xde,  // original palette index 30
		// 0x3d, 0x42, 0x5a,  // original palette index 12
		// 0x42, 0x39, 0x4a,  // original palette index 11
		// 0x78, 0x68, 0x96,  // original palette index 26
		// 0x31, 0x29, 0x21,  // original palette index 4
		// 0x2d, 0x2d, 0x39,  // original palette index 8
		// 0x42, 0x31, 0x25,  // original palette index 7
		// 0x3d, 0x4a, 0x7b,  // original palette index 14
		// 0x39, 0x34, 0x39,  // original palette index 9
		// 0x39, 0x31, 0x29,  // original palette index 6
	};
	uint8_t hs_data[388] = {
		0x00, 0x02, 0x94, 0xca, 0x65, 0x35, 0xa9, 0xec, 0xa7, 0x01, 0x4f, 0x9a, 0x6e, 0x2c, 0xd3, 0x2e, 
		0xc6, 0x1e, 0xa7, 0x4c, 0x9b, 0x4b, 0xb4, 0x75, 0x99, 0x66, 0xfa, 0xfd, 0x55, 0x90, 0xc8, 0x64, 
		0x39, 0x0a, 0x9c, 0x9e, 0xe3, 0x48, 0x97, 0xcc, 0x66, 0xb4, 0xaa, 0x85, 0x26, 0xc7, 0x42, 0xab, 
		0xe5, 0x27, 0x94, 0x7b, 0x5e, 0x82, 0xcb, 0x49, 0xab, 0x56, 0x30, 0xdb, 0x9c, 0xbd, 0xff, 0x9f, 
		0xc6, 0xef, 0x4f, 0x68, 0x55, 0xaa, 0x14, 0xe6, 0x95, 0x78, 0xb4, 0x65, 0xa6, 0x32, 0x99, 0x0c, 
		0xb6, 0x5b, 0x39, 0xa1, 0x4c, 0x64, 0xb3, 0xda, 0x55, 0xee, 0x73, 0x34, 0x9c, 0xce, 0x66, 0x32, 
		0x92, 0xe0, 0x88, 0x0c, 0x0a, 0x05, 0x02, 0x80, 0x9a, 0xc4, 0xc0, 0x60, 0x70, 0x48, 0x2c, 0x16, 
		0x06, 0x10, 0x13, 0x06, 0x83, 0x83, 0xc1, 0x42, 0x20, 0xc0, 0xf1, 0x10, 0x28, 0x20, 0x3c, 0x14, 
		0x16, 0x04, 0x0e, 0x0f, 0x09, 0x85, 0x41, 0xe0, 0xf0, 0x48, 0x3c, 0x2a, 0x15, 0x09, 0x1f, 0x07, 
		0x85, 0x41, 0xa0, 0x50, 0x48, 0x14, 0x0a, 0x0e, 0x40, 0x11, 0x06, 0x85, 0xc2, 0x89, 0xe0, 0x87, 
		0xe2, 0x20, 0x30, 0xc8, 0x5c, 0x1e, 0x15, 0x05, 0x85, 0xc3, 0x03, 0xe1, 0xe1, 0xb0, 0xe8, 0x7c, 
		0x0e, 0x17, 0x03, 0x87, 0xc3, 0xa1, 0xa0, 0xf0, 0xd0, 0xc8, 0x84, 0x46, 0x1b, 0x12, 0x86, 0xc4, 
		0x62, 0x10, 0xc3, 0x70, 0x78, 0x1c, 0x46, 0x23, 0x13, 0x8a, 0x45, 0x61, 0x07, 0x00, 0xf0, 0x18, 
		0xac, 0x5a, 0x2d, 0x11, 0x89, 0xc2, 0xe2, 0x51, 0x75, 0x70, 0x88, 0x84, 0x5a, 0x2d, 0x13, 0x89, 
		0x42, 0x83, 0xe2, 0x21, 0xd0, 0xd8, 0xac, 0x5a, 0x27, 0x08, 0x07, 0x88, 0x80, 0x43, 0x22, 0x91, 
		0x88, 0xac, 0x4a, 0x17, 0x0a, 0x8c, 0xa0, 0x04, 0x00, 0x02, 0xbc, 0x04, 0xc2, 0x60, 0x50, 0x28, 
		0x32, 0xf4, 0x3b, 0x40, 0x24, 0x12, 0x0b, 0x08, 0x7f, 0x8a, 0x81, 0x41, 0xe1, 0x0f, 0xf1, 0xb0, 
		0x87, 0xf8, 0x98, 0xa4, 0x36, 0x01, 0x01, 0x83, 0xbf, 0xc2, 0x8c, 0x02, 0x45, 0x22, 0xd0, 0xd8, 
		0x0c, 0x1e, 0x33, 0x02, 0x84, 0x41, 0xa1, 0x70, 0x72, 0x88, 0x58, 0x6c, 0x5a, 0x2b, 0x0b, 0x85, 
		0xc1, 0xc9, 0xe0, 0x87, 0xe1, 0xc2, 0x00, 0xa0, 0x6f, 0xf0, 0x88, 0xe1, 0x11, 0x68, 0xb3, 0xfc, 
		0x14, 0x6a, 0x35, 0x1b, 0x5f, 0x88, 0x8b, 0x43, 0x62, 0xd1, 0x18, 0x74, 0x3e, 0x34, 0x8e, 0x0e, 
		0xee, 0x07, 0x0f, 0x86, 0xc2, 0x23, 0x81, 0xf0, 0xf1, 0x18, 0x74, 0x5a, 0x27, 0x0d, 0x8d, 0xc4, 
		0x99, 0xe1, 0xe0, 0x30, 0x38, 0x6c, 0x0e, 0x23, 0x13, 0x88, 0x28, 0x04, 0x3f, 0xc1, 0x46, 0xe2, 
		0x4f, 0xf1, 0x50, 0x17, 0xf8, 0x28, 0xb4, 0x4e, 0x20, 0x0f, 0x11, 0x00, 0x84, 0xbf, 0x01, 0x40, 
		0xe3, 0x30, 0x28, 0x48, 
	};
} HSpr_kputrummis;

// "lemming" (GIF orig:169 raw_payload:283 shrunk_payload:159 total:167 bytes)
// Compared to GIF: 98.82% 	Compared to raw: 59.01%
// using GIF index 9 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; transparency = 9; )

FL_PROGMEM const struct HSpr_lemming {
	uint16_t datasize = 159;
	uint16_t frames = 1;
	uint16_t duration = 0;
	uint8_t flags = 0;
	uint8_t palette_entries = 9;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 9
		// 0x33, 0x33, 0x33,  // original palette index 8
		// 0x55, 0xcc, 0x33,  // original palette index 5
		// 0x11, 0x99, 0x00,  // original palette index 4
		// 0xcc, 0x88, 0x88,  // original palette index 7
		// 0xff, 0xff, 0xff,  // original palette index 1
		// 0xee, 0xaa, 0x99,  // original palette index 6
		// 0x00, 0x44, 0x99,  // original palette index 2
		// 0x00, 0x66, 0xdd,  // original palette index 3
	};
	uint8_t hs_data[159] = {
		0x00, 0x02, 0x99, 0xcc, 0xe6, 0x75, 0x5e, 0x64, 0xce, 0x23, 0x99, 0x80, 0x73, 0x31, 0x18, 0x8f, 
		0xff, 0xff, 0xff, 0xee, 0xd5, 0x66, 0x60, 0x14, 0x4c, 0xcc, 0x02, 0xcd, 0xdd, 0x16, 0x14, 0x80, 
		0xc0, 0x60, 0x30, 0x08, 0x08, 0x34, 0x54, 0x0a, 0x05, 0x02, 0x80, 0xc0, 0x82, 0x80, 0xc1, 0xc1, 
		0x20, 0x70, 0x38, 0x18, 0x40, 0x14, 0x0c, 0x02, 0x08, 0x20, 0x0c, 0x1c, 0x08, 0x16, 0x10, 0x00, 
		0x10, 0x20, 0x18, 0x00, 0x18, 0x1e, 0x10, 0x1c, 0x12, 0x05, 0x02, 0x82, 0x40, 0x45, 0x00, 0xc2, 
		0x00, 0xa0, 0x30, 0x28, 0x1c, 0x06, 0x08, 0x51, 0x05, 0x04, 0x82, 0x40, 0x48, 0x00, 0xc1, 0xc0, 
		0xa0, 0x65, 0x90, 0x41, 0xf0, 0x62, 0x00, 0x40, 0xf0, 0x42, 0xd0, 0x50, 0x18, 0x24, 0x16, 0x0d, 
		0x06, 0x82, 0xc1, 0x83, 0xe1, 0x02, 0x00, 0xc5, 0xe0, 0xa0, 0xd0, 0x60, 0x20, 0x20, 0x78, 0x98, 
		0x30, 0x00, 0x10, 0xbc, 0x28, 0x40, 0x48, 0x38, 0x30, 0x40, 0x30, 0xb4, 0x10, 0x38, 0x30, 0x40, 
		0x14, 0x1e, 0x0f, 0x01, 0x80, 0xc1, 0xc1, 0xc2, 0xc0, 0x00, 0xe1, 0x10, 0x70, 0x80, 0x30, 
	};
} HSpr_lemming;

// "load" (GIF orig:1096 raw_payload:2129 shrunk_payload:931 total:939 bytes)
// Compared to GIF: 85.68% 	Compared to raw: 44.11%
// using GIF index 31 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 26; loop = 0; transparency = 31; )

FL_PROGMEM const struct HSpr_load {
	uint16_t datasize = 931;
	uint16_t frames = 8;
	uint16_t duration = 100;
	uint8_t flags = 0;
	uint8_t palette_entries = 27;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 31
		// 0xa5, 0xa5, 0xa5,  // original palette index 11
		// 0xa4, 0xa4, 0xa3,  // original palette index 9
		// 0xb0, 0xb0, 0xaf,  // original palette index 20
		// 0xa3, 0xa3, 0xa2,  // original palette index 6
		// 0x96, 0x96, 0x96,  // original palette index 17
		// 0xaf, 0xaf, 0xae,  // original palette index 7
		// 0xa2, 0xa2, 0xa1,  // original palette index 22
		// 0x95, 0x95, 0x94,  // original palette index 5
		// 0xae, 0xae, 0xac,  // original palette index 1
		// 0x94, 0x94, 0x93,  // original palette index 4
		// 0x94, 0x94, 0x92,  // original palette index 21
		// 0xbb, 0xbb, 0xb9,  // original palette index 10
		// 0x88, 0x88, 0x86,  // original palette index 14
		// 0xba, 0xba, 0xb8,  // original palette index 23
		// 0x87, 0x87, 0x85,  // original palette index 25
		// 0xb9, 0xb9, 0xb7,  // original palette index 12
		// 0x86, 0x86, 0x84,  // original palette index 16
		// 0xc6, 0xc6, 0xc4,  // original palette index 18
		// 0x79, 0x79, 0x77,  // original palette index 0
		// 0xc6, 0xc6, 0xc3,  // original palette index 8
		// 0xc5, 0xc5, 0xc3,  // original palette index 2
		// 0xd2, 0xd2, 0xcf,  // original palette index 15
		// 0x79, 0x79, 0x76,  // original palette index 3
		// 0xd1, 0xd1, 0xcf,  // original palette index 24
		// 0x78, 0x78, 0x76,  // original palette index 13
		// 0xd1, 0xd1, 0xce,  // original palette index 19
	};
	uint8_t hs_data[931] = {
		0x00, 0x02, 0xd2, 0xe9, 0x74, 0xba, 0x4d, 0x26, 0x8f, 0x61, 0xb0, 0xd7, 0xe8, 0xf4, 0x7a, 0x2c, 
		0xb6, 0x5b, 0x2d, 0xaf, 0xd7, 0xeb, 0xb4, 0x5a, 0x2d, 0x0e, 0x57, 0x2b, 0x94, 0xd7, 0x6b, 0xb5, 
		0x99, 0x4c, 0xa6, 0x4f, 0x29, 0x94, 0xc9, 0x6e, 0xf7, 0x7b, 0x9c, 0x46, 0x23, 0x0d, 0xba, 0xdd, 
		0x6e, 0x30, 0xf8, 0x7c, 0x2e, 0xe7, 0x73, 0xb7, 0xc3, 0x61, 0xb0, 0x9c, 0x6e, 0x37, 0x12, 0xf3, 
		0x79, 0xbb, 0xf1, 0xb8, 0xdc, 0x3e, 0x2f, 0x17, 0x87, 0xd2, 0xe9, 0x73, 0xef, 0x37, 0x9b, 0xb7, 
		0x47, 0xa3, 0xcf, 0xbc, 0x5e, 0x00, 0xa0, 0xb9, 0xc5, 0x40, 0xd0, 0x18, 0x09, 0x8c, 0x64, 0x08, 
		0x00, 0x08, 0x18, 0x22, 0x07, 0x03, 0x80, 0x41, 0x00, 0x00, 0xa0, 0x10, 0x58, 0x28, 0x38, 0x24, 
		0x18, 0x00, 0x0a, 0x01, 0x07, 0x83, 0xc0, 0x21, 0x00, 0x00, 0x40, 0xf0, 0x70, 0x90, 0x00, 0x20, 
		0x38, 0x38, 0x50, 0x00, 0x10, 0x80, 0x20, 0x38, 0x2c, 0x02, 0x01, 0x0b, 0x85, 0x81, 0x41, 0xc3, 
		0x21, 0x85, 0x61, 0x30, 0xd8, 0x6c, 0x02, 0x1c, 0x00, 0x04, 0x0e, 0x0f, 0x0f, 0x00, 0x02, 0x07, 
		0x8f, 0x80, 0x44, 0x22, 0x02, 0xf1, 0x31, 0x18, 0x88, 0x14, 0x1c, 0x4a, 0x24, 0x0d, 0x0b, 0x13, 
		0x89, 0x81, 0x82, 0x45, 0x00, 0x00, 0x81, 0xc1, 0x42, 0x01, 0x62, 0xa0, 0x00, 0x50, 0x08, 0xb4, 
		0x5a, 0x01, 0x17, 0x00, 0x02, 0x10, 0x04, 0x07, 0x02, 0x8c, 0x00, 0x01, 0x40, 0x23, 0x31, 0x92, 
		0x40, 0x80, 0x78, 0x40, 0x00, 0xb8, 0xd4, 0x68, 0x1c, 0x31, 0xc6, 0x0c, 0x00, 0x2d, 0xc6, 0x10, 
		0x00, 0x1d, 0x82, 0x09, 0xc6, 0x12, 0x03, 0x01, 0x07, 0x04, 0x58, 0x84, 0x07, 0x02, 0x81, 0x00, 
		0x01, 0x03, 0xc4, 0x00, 0x01, 0x41, 0x00, 0x00, 0x84, 0x01, 0x18, 0x21, 0xe0, 0xf0, 0x75, 0xe8, 
		0xb0, 0x00, 0x38, 0x2c, 0x15, 0x7a, 0x20, 0x00, 0x0e, 0x10, 0x00, 0x04, 0xbd, 0x08, 0x00, 0x0d, 
		0x0a, 0x00, 0x02, 0x5e, 0x83, 0x00, 0x08, 0x85, 0xc2, 0xc0, 0xa0, 0xdb, 0x60, 0x80, 0x01, 0x21, 
		0xb0, 0xd6, 0x58, 0xc8, 0x78, 0x00, 0x10, 0x3c, 0x44, 0x4e, 0x26, 0x0f, 0x10, 0xdb, 0x07, 0x13, 
		0x00, 0x02, 0x80, 0x44, 0x62, 0x24, 0x81, 0x11, 0x70, 0x00, 0x27, 0x00, 0xc8, 0xcc, 0x65, 0xfe, 
		0x35, 0xc6, 0x08, 0x00, 0x2d, 0xa6, 0x1c, 0x00, 0x11, 0x82, 0x08, 0x1e, 0x12, 0x07, 0x03, 0x07, 
		0x04, 0x60, 0x84, 0x71, 0x82, 0x83, 0x00, 0x01, 0x03, 0xc1, 0xb0, 0x43, 0xc2, 0x40, 0x00, 0x84, 
		0x01, 0x18, 0x21, 0xc1, 0xc1, 0x57, 0xa1, 0xc0, 0x00, 0xe0, 0x30, 0x15, 0xe8, 0x80, 0x00, 0x38, 
		0x10, 0x00, 0x10, 0x3c, 0x5c, 0x10, 0x00, 0x09, 0x7a, 0x0c, 0x00, 0x22, 0x0f, 0x07, 0x02, 0x83, 
		0x65, 0x02, 0x00, 0x04, 0x82, 0xc1, 0x40, 0xc1, 0x1b, 0x61, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x4d, 
		0xb1, 0x10, 0xd8, 0x6c, 0x02, 0x14, 0x00, 0x04, 0xdb, 0x0f, 0x0f, 0x00, 0x02, 0x80, 0x42, 0xe1, 
		0x64, 0x81, 0x00, 0xf0, 0x80, 0x01, 0x71, 0x18, 0x8b, 0xfc, 0x6b, 0x8c, 0x10, 0x00, 0x5b, 0x8c, 
		0x20, 0x00, 0x3b, 0x04, 0x13, 0x8c, 0x24, 0x32, 0x18, 0x0e, 0x08, 0xb1, 0x08, 0x0e, 0x05, 0x0e, 
		0x00, 0x02, 0x07, 0x88, 0x00, 0x02, 0x07, 0x87, 0x60, 0x88, 0x88, 0x44, 0x17, 0xa2, 0xc0, 0x00, 
		0xe0, 0x70, 0x35, 0xe8, 0x80, 0x00, 0x38, 0x30, 0x00, 0x12, 0xf4, 0x20, 0x00, 0x34, 0x24, 0x00, 
		0x09, 0x7a, 0x0c, 0x00, 0x20, 0x1c, 0x08, 0x00, 0x09, 0xb6, 0x08, 0x00, 0x12, 0x03, 0x01, 0x65, 
		0x8c, 0x81, 0x00, 0x01, 0x03, 0xc4, 0x41, 0x60, 0xb0, 0x08, 0x20, 0x00, 0x13, 0x6c, 0x3c, 0x20, 
		0x00, 0x0a, 0x01, 0x07, 0x83, 0x92, 0x04, 0x42, 0x80, 0x00, 0x9c, 0x03, 0x21, 0x70, 0xb7, 0xf8, 
		0xd7, 0x18, 0x20, 0x00, 0xb6, 0x98, 0x70, 0x00, 0x45, 0x80, 0x20, 0x78, 0x48, 0x94, 0x48, 0x1c, 
		0x18, 0x20, 0x09, 0xc6, 0x0a, 0x28, 0x00, 0x04, 0x0f, 0x06, 0xc1, 0x0f, 0x15, 0x00, 0x02, 0x10, 
		0x04, 0x60, 0x87, 0x07, 0x05, 0x5e, 0x87, 0x00, 0x03, 0x86, 0x43, 0x17, 0xa2, 0x00, 0x00, 0xe1, 
		0xc0, 0x00, 0x40, 0xf1, 0xeb, 0xd0, 0x60, 0x01, 0x11, 0x08, 0x80, 0x14, 0x1b, 0x6c, 0x10, 0x00, 
		0x24, 0x0e, 0x06, 0x06, 0x08, 0xdb, 0x08, 0x00, 0x05, 0x06, 0x00, 0x02, 0x6d, 0x88, 0x80, 0xc0, 
		0x60, 0x10, 0x90, 0x00, 0x26, 0xd8, 0x78, 0x10, 0x00, 0x10, 0x40, 0x11, 0x20, 0x44, 0x10, 0x00, 
		0x09, 0xc0, 0x32, 0x0f, 0x07, 0x7f, 0x8d, 0x69, 0x02, 0x07, 0x0d, 0x08, 0x0a, 0x60, 0x82, 0x71, 
		0x84, 0x8b, 0x45, 0x81, 0xc1, 0x16, 0x21, 0x1c, 0x60, 0xa3, 0x00, 0x00, 0x40, 0xf1, 0x00, 0x00, 
		0x40, 0xf0, 0xec, 0x11, 0x11, 0xa8, 0xd2, 0xf4, 0x58, 0x00, 0x1c, 0x4a, 0x24, 0xbd, 0x10, 0x00, 
		0x07, 0x14, 0x00, 0x02, 0x5e, 0x84, 0x00, 0x06, 0x8a, 0x80, 0x01, 0x2f, 0x41, 0x80, 0x04, 0x03, 
		0x81, 0x00, 0x01, 0x36, 0xc1, 0x00, 0x02, 0x43, 0x21, 0x80, 0x60, 0x8d, 0xb0, 0x80, 0x00, 0x50, 
		0xe0, 0x00, 0x26, 0xd8, 0x88, 0x1c, 0x0c, 0x1e, 0x21, 0xb6, 0x0e, 0x0c, 0x00, 0x05, 0x00, 0x88, 
		0x44, 0x09, 0x02, 0x21, 0x20, 0x00, 0x4e, 0x01, 0x80, 0xe1, 0xce, 0x30, 0x60, 0x01, 0x6d, 0x30, 
		0xe0, 0x00, 0x8c, 0x10, 0x40, 0xf0, 0x91, 0x38, 0x98, 0x38, 0x23, 0x04, 0x23, 0x8c, 0x14, 0x4c, 
		0x00, 0x08, 0x1e, 0x0d, 0x82, 0x1e, 0x2e, 0x00, 0x04, 0x20, 0x08, 0xc1, 0x0f, 0x19, 0x8c, 0xaf, 
		0x45, 0x80, 0x01, 0xc5, 0xa2, 0xcb, 0xd1, 0x00, 0x00, 0x71, 0x80, 0x00, 0x25, 0xe8, 0x40, 0x78, 
		0xa5, 0xe8, 0x30, 0x00, 0x88, 0xd4, 0x68, 0x0a, 0x0d, 0xb6, 0x08, 0x00, 0x12, 0x25, 0x12, 0x03, 
		0x04, 0x6d, 0x84, 0x00, 0x02, 0x8a, 0x00, 0x01, 0x36, 0xc4, 0x43, 0x21, 0x90, 0x08, 0xa8, 0x00, 
		0x13, 0x6c, 0x3c, 0x38, 0x00, 0x08, 0x20, 0x08, 0x90, 0x20, 0x1e, 0x10, 0x00, 0x2e, 0x21, 0x10, 
		0x7f, 0x8d, 0x71, 0x82, 0x00, 0x0b, 0x71, 0x84, 0x00, 0x07, 0x60, 0x82, 0x71, 0x84, 0x86, 0xc3, 
		0x41, 0xc1, 0x18, 0x21, 0x1c, 0x60, 0xa1, 0xe0, 0x00, 0x40, 0xf0, 0x6c, 0x10, 0xe0, 0xf0, 0xec, 
		0x11, 0x11, 0x18, 0x8a, 0xf4, 0x58, 0x00, 0x1c, 0x4e, 0x26, 0xbd, 0x10, 0x0e, 0x0b, 0x13, 0x89, 
		0xaf, 0x42, 0x00, 0x03, 0x45, 0xc0, 0x00, 0x97, 0xa0, 0xc0, 0x02, 0x23, 0x31, 0x90, 0x28, 0x36, 
		0xd8, 0x20, 0x00, 0x48, 0xb4, 0x59, 0x96, 0x32, 0x30, 0x00, 0x04, 0x0f, 0x11, 0x12, 0x89, 0x03, 
		0xc4, 0x36, 0xc1, 0xc5, 0x00, 0x00, 0xa0, 0x11, 0xa8, 0xd1, 0x20, 0x44, 0x54, 0x00, 0x09, 0xc0, 
		0x30, 0x1c, 0x20, 
	};
} HSpr_load;

// "mspacman" (GIF orig:306 raw_payload:1039 shrunk_payload:195 total:203 bytes)
// Compared to GIF: 66.34% 	Compared to raw: 19.54%
// using GIF index 5 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 5; loop = 0; transparency = 5; )

FL_PROGMEM const struct HSpr_mspacman {
	uint16_t datasize = 195;
	uint16_t frames = 4;
	uint16_t duration = 75;
	uint8_t flags = 0;
	uint8_t palette_entries = 5;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 5
		// 0xff, 0x00, 0x00,  // original palette index 3
		// 0xff, 0xff, 0x00,  // original palette index 4
		// 0x21, 0x21, 0xde,  // original palette index 2
		// 0x00, 0x00, 0x00,  // original palette index 7
	};
	uint8_t hs_data[195] = {
		0x00, 0x02, 0xff, 0x80, 0x81, 0x7f, 0xe0, 0x12, 0x19, 0x0f, 0x78, 0x4c, 0x76, 0x03, 0x01, 0x05, 
		0x08, 0x81, 0x00, 0x01, 0x40, 0x41, 0xe2, 0x01, 0xa0, 0xc1, 0xe0, 0xe0, 0x61, 0x00, 0xa0, 0xe0, 
		0xa1, 0x10, 0x70, 0x31, 0x10, 0x48, 0x0c, 0x04, 0x16, 0x0a, 0x09, 0x04, 0x19, 0x0e, 0x81, 0x84, 
		0x01, 0x14, 0x45, 0x0d, 0x43, 0x1b, 0xc5, 0x83, 0xc6, 0x87, 0xc6, 0x82, 0xc1, 0x94, 0x41, 0xa5, 
		0xc2, 0x9c, 0x44, 0x1f, 0xc6, 0x8b, 0x83, 0x83, 0x87, 0x04, 0x43, 0xbb, 0x4e, 0xbf, 0xcd, 0x9c, 
		0x02, 0x33, 0x04, 0x84, 0x02, 0xbf, 0xc4, 0x18, 0x02, 0xb7, 0x81, 0xbf, 0xc2, 0x84, 0x02, 0xc1, 
		0x1d, 0xe1, 0x04, 0x22, 0xa0, 0x70, 0x47, 0xf8, 0xc4, 0x99, 0x10, 0x78, 0xe0, 0xf8, 0xe7, 0xf8, 
		0x97, 0x18, 0xa0, 0x70, 0xe0, 0x78, 0x85, 0x80, 0x40, 0x70, 0xf7, 0xfc, 0x82, 0xe0, 0x57, 0xf8, 
		0x83, 0xd8, 0x67, 0xf8, 0x88, 0x08, 0xb8, 0x1b, 0xf8, 0x18, 0xc8, 0x63, 0xf8, 0x13, 0xfc, 0x63, 
		0x00, 0x73, 0xfc, 0x80, 0x7c, 0x68, 0x2c, 0x1b, 0xfc, 0x39, 0x7c, 0x20, 0x78, 0x50, 0x34, 0x40, 
		0xb8, 0x38, 0x38, 0x73, 0xff, 0x7a, 0x38, 0x48, 0xc8, 0x20, 0x28, 0x2c, 0x10, 0x00, 0x09, 0xfe, 
		0x11, 0x78, 0x25, 0x26, 0x15, 0x9a, 0x28, 0x1e, 0x14, 0x3e, 0x38, 0x9c, 0x25, 0xfe, 0x1d, 0xde, 
		0x3d, 0xfe, 0xf0, 
	};
} HSpr_mspacman;

// "mwk" (GIF orig:462 raw_payload:1292 shrunk_payload:253 total:261 bytes)
// Compared to GIF: 56.49% 	Compared to raw: 20.20%
// using GIF index 3 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 3; loop = 0; transparency = 3; )

FL_PROGMEM const struct HSpr_mwk {
	uint16_t datasize = 253;
	uint16_t frames = 5;
	uint16_t duration = 75;
	uint8_t flags = 0;
	uint8_t palette_entries = 4;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 3
		// 0x66, 0x66, 0x66,  // original palette index 2
		// 0xad, 0xad, 0xad,  // original palette index 1
		// 0xff, 0xff, 0xff,  // original palette index 0
	};
	uint8_t hs_data[253] = {
		0x00, 0x02, 0xb3, 0x59, 0xac, 0xda, 0xdd, 0x6e, 0xb7, 0xff, 0xff, 0xff, 0x87, 0x09, 0xc0, 0x60, 
		0x30, 0x10, 0x20, 0x60, 0x70, 0x58, 0x14, 0x0a, 0x05, 0x01, 0x02, 0x04, 0x07, 0x07, 0x0d, 0x82, 
		0x09, 0x04, 0x08, 0x04, 0x06, 0x04, 0x07, 0x02, 0x81, 0xc0, 0xc4, 0x02, 0x41, 0xe2, 0xe0, 0x30, 
		0x38, 0x10, 0x28, 0x10, 0x0c, 0x20, 0xbc, 0x30, 0x6c, 0x10, 0x2c, 0x10, 0x38, 0x18, 0x40, 0x18, 
		0x3c, 0x31, 0x3c, 0x10, 0x38, 0x20, 0xf8, 0x30, 0xb0, 0x20, 0x3c, 0x41, 0x84, 0x28, 0xa8, 0x11, 
		0xc0, 0x49, 0xf4, 0x22, 0x88, 0x31, 0x2c, 0x18, 0x80, 0x28, 0x38, 0x30, 0x04, 0x18, 0x3c, 0x50, 
		0x38, 0x33, 0x48, 0x50, 0x00, 0x20, 0xf8, 0x3b, 0xf8, 0x80, 0x14, 0x49, 0x70, 0x31, 0x08, 0x1b, 
		0x74, 0x33, 0xfc, 0x2a, 0x00, 0x39, 0xb4, 0x33, 0xbc, 0x20, 0x80, 0x50, 0x3c, 0x5b, 0xfc, 0x39, 
		0x00, 0x3b, 0xfc, 0x42, 0xfc, 0x33, 0xfc, 0x43, 0xbc, 0x53, 0xff, 0xe0, 0x74, 0x18, 0x10, 0x33, 
		0x3c, 0x41, 0xc8, 0x2b, 0xfc, 0x48, 0x10, 0x20, 0x40, 0x2a, 0x38, 0x2b, 0x0c, 0x13, 0xc0, 0x43, 
		0xfc, 0x30, 0x3c, 0x33, 0xfc, 0x3b, 0xcc, 0x1b, 0xfc, 0x62, 0x7c, 0x33, 0xfc, 0x42, 0x3c, 0x33, 
		0xff, 0xf8, 0x78, 0x28, 0x10, 0x33, 0x40, 0x41, 0xcc, 0x29, 0x78, 0x3a, 0x08, 0x21, 0x58, 0x19, 
		0x78, 0x33, 0xc0, 0x68, 0x38, 0x38, 0x3c, 0x2b, 0x3c, 0x30, 0x38, 0x18, 0x3c, 0x28, 0xfc, 0x1a, 
		0xc0, 0x30, 0x7c, 0x52, 0x78, 0x43, 0xff, 0xf8, 0x74, 0x28, 0x10, 0x2b, 0xf8, 0x72, 0x3c, 0x3b, 
		0xf8, 0x43, 0x3c, 0x2a, 0x74, 0x2b, 0xb8, 0x1b, 0xfc, 0x68, 0x7c, 0x34, 0x0d, 0xf6, 0x09, 0xfe, 
		0x0d, 0xde, 0x1c, 0x6e, 0x08, 0x16, 0x0c, 0x8c, 0x10, 0x1e, 0x25, 0xff, 0xd8, 
	};
} HSpr_mwk;

// "octorokblue" (GIF orig:380 raw_payload:786 shrunk_payload:366 total:374 bytes)
// Compared to GIF: 98.42% 	Compared to raw: 47.58%
// using GIF index 4 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 4; loop = 0; transparency = 4; )

FL_PROGMEM const struct HSpr_octorokblue {
	uint16_t datasize = 366;
	uint16_t frames = 3;
	uint16_t duration = 100;
	uint8_t flags = 0;
	uint8_t palette_entries = 6;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 4
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x48, 0x60, 0xa8,  // original palette index 1
		// 0x78, 0x98, 0xf8,  // original palette index 2
		// 0xa8, 0xc8, 0xf8,  // original palette index 3
		// 0xf8, 0xf8, 0xf8,  // original palette index 5
	};
	uint8_t hs_data[366] = {
		0x00, 0x05, 0xa4, 0x58, 0x35, 0x17, 0x8c, 0xc7, 0xe3, 0x51, 0xc8, 0xfc, 0x00, 0x01, 0x03, 0x81, 
		0x40, 0x40, 0x00, 0xc3, 0x82, 0x20, 0x30, 0x18, 0x14, 0x0c, 0x00, 0x08, 0x22, 0x20, 0x1c, 0x0e, 
		0x09, 0x04, 0x82, 0x40, 0xe0, 0x41, 0x00, 0xb0, 0x18, 0x14, 0x0a, 0x07, 0x04, 0x82, 0xc1, 0x42, 
		0x01, 0x04, 0x60, 0xc3, 0xc1, 0x01, 0xe0, 0xe0, 0x42, 0x30, 0xa2, 0xe0, 0xd0, 0x48, 0x1c, 0x10, 
		0x84, 0x08, 0x3e, 0x18, 0x20, 0x08, 0x1c, 0x0e, 0x0b, 0x05, 0x08, 0x02, 0x2e, 0x85, 0x30, 0x04, 
		0x80, 0xc0, 0x60, 0x90, 0x43, 0x68, 0x20, 0x80, 0x38, 0x10, 0xe8, 0x10, 0x0c, 0x10, 0xcc, 0x1c, 
		0x08, 0x20, 0x0e, 0x05, 0x03, 0x07, 0x06, 0x38, 0x04, 0x81, 0x40, 0xa0, 0x20, 0xf0, 0x41, 0x70, 
		0x60, 0xf0, 0x60, 0x90, 0x70, 0x13, 0xe0, 0x20, 0x78, 0x20, 0x70, 0x38, 0x22, 0x1c, 0x18, 0x38, 
		0x18, 0xc4, 0x10, 0x3c, 0x10, 0xcc, 0x11, 0x2c, 0x20, 0x08, 0x11, 0x70, 0x13, 0x70, 0x20, 0x48, 
		0x10, 0x30, 0x18, 0x0c, 0x14, 0x10, 0x60, 0x10, 0x4c, 0x08, 0x3a, 0x15, 0xc6, 0x1c, 0x12, 0x0d, 
		0xdc, 0x1c, 0xc0, 0x11, 0x22, 0x0c, 0x38, 0x21, 0xfe, 0x19, 0xb8, 0x0c, 0x1e, 0x19, 0xfe, 0x14, 
		0x20, 0x15, 0xfe, 0x22, 0x06, 0x96, 0x06, 0x2e, 0x10, 0x1e, 0x04, 0x12, 0x06, 0xef, 0x0c, 0x0e, 
		0x08, 0xf1, 0x06, 0xce, 0x08, 0xde, 0x06, 0x0e, 0x07, 0x05, 0x82, 0x84, 0x01, 0x03, 0xc1, 0xbc, 
		0x03, 0x40, 0xa0, 0x4a, 0x00, 0x6e, 0x80, 0x80, 0x10, 0x50, 0x10, 0xa0, 0x25, 0x50, 0x57, 0xf8, 
		0x80, 0x70, 0x34, 0xf8, 0x47, 0xf8, 0x70, 0x78, 0x37, 0x70, 0x30, 0x70, 0x26, 0x78, 0x32, 0x20, 
		0x26, 0xf8, 0x57, 0xf0, 0x71, 0x70, 0x40, 0x78, 0x20, 0xe0, 0x57, 0xe8, 0x30, 0x78, 0x32, 0x98, 
		0x20, 0xe0, 0x40, 0x80, 0x62, 0x90, 0x41, 0x58, 0x50, 0x68, 0x75, 0x90, 0x22, 0xa8, 0x30, 0x70, 
		0x61, 0xc8, 0x26, 0x80, 0x47, 0x78, 0x40, 0x70, 0x57, 0x80, 0x40, 0x80, 0x50, 0x78, 0xe6, 0x78, 
		0x41, 0x78, 0x60, 0x78, 0x95, 0x50, 0x21, 0x28, 0x21, 0x00, 0x37, 0xf8, 0x78, 0x1a, 0x58, 0x11, 
		0xd0, 0x1b, 0xfc, 0x38, 0x38, 0x14, 0x16, 0x0a, 0x9b, 0x08, 0xef, 0x06, 0xda, 0x06, 0xf0, 0x06, 
		0x0f, 0x06, 0x08, 0x06, 0xff, 0x0a, 0x35, 0x04, 0x0f, 0x04, 0xba, 0x06, 0xff, 0x06, 0xef, 0x0a, 
		0xde, 0x04, 0x1d, 0x04, 0xff, 0x08, 0x2a, 0x05, 0x00, 0x80, 0x03, 0x81, 0xbc, 0x81, 0xbb, 0x84, 
		0x18, 0xc1, 0x9a, 0xc1, 0xbb, 0x45, 0x03, 0x81, 0x40, 0x0a, 0x20, 0x81, 0x81, 0x00, 
	};
} HSpr_octorokblue;

// "owl" (GIF orig:1596 raw_payload:5138 shrunk_payload:325 total:333 bytes)
// Compared to GIF: 20.86% 	Compared to raw: 6.48%
// using GIF index 4 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 3; loop = 0; transparency = 7; )

FL_PROGMEM const struct HSpr_owl {
	uint16_t datasize = 325;
	uint16_t frames = 20;
	uint16_t duration = 50;
	uint8_t flags = 0;
	uint8_t palette_entries = 6;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 4
		// 0x9f, 0x48, 0x00,  // original palette index 1
		// 0xff, 0xff, 0xff,  // original palette index 3
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xff, 0xf6, 0x00,  // original palette index 2
		// 0xff, 0xff, 0xff,  // original palette index 7
	};
	uint8_t hs_data[325] = {
		0x00, 0x02, 0xcf, 0xd2, 0x20, 0x1f, 0xff, 0xff, 0xfc, 0x10, 0x0b, 0xff, 0xf6, 0x04, 0x03, 0x80, 
		0xc0, 0x20, 0x10, 0x10, 0x00, 0x80, 0x58, 0xb0, 0x90, 0x70, 0x70, 0xe0, 0x78, 0xf0, 0x18, 0x28, 
		0x14, 0x08, 0x16, 0x14, 0x0e, 0x1a, 0x05, 0x03, 0x81, 0x82, 0x02, 0x01, 0xc3, 0x01, 0x81, 0x82, 
		0x01, 0x81, 0xc5, 0x06, 0x02, 0x01, 0xc3, 0x86, 0x02, 0x41, 0x00, 0x00, 0x86, 0xe1, 0xc8, 0xe1, 
		0x20, 0x90, 0x42, 0x78, 0x78, 0x19, 0xb8, 0x5c, 0x0c, 0x1c, 0x34, 0x3a, 0x39, 0x5e, 0x49, 0x60, 
		0x3d, 0xee, 0x0a, 0x00, 0x5b, 0x06, 0x00, 0x09, 0x04, 0x82, 0x07, 0x41, 0x41, 0x60, 0xa1, 0xd1, 
		0x20, 0xb1, 0x61, 0x20, 0xe0, 0xe1, 0xc0, 0xf1, 0xef, 0xff, 0xea, 0xf3, 0xcb, 0x01, 0xf0, 0x50, 
		0x00, 0x27, 0xf8, 0xa0, 0xe8, 0x27, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 
		0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xfc, 0x14, 
		0x89, 0x20, 0x20, 0x20, 0x38, 0x78, 0x0b, 0x9c, 0x18, 0x2c, 0x20, 0x1c, 0x30, 0x00, 0x9b, 0xfc, 
		0x18, 0x40, 0x73, 0x84, 0xa3, 0xff, 0xfb, 0xfc, 0xa4, 0x0a, 0x04, 0x0b, 0x0a, 0x07, 0x0d, 0x02, 
		0x81, 0xc0, 0xc1, 0x01, 0x00, 0xe1, 0x80, 0xc0, 0xc1, 0x00, 0xc0, 0xe2, 0x83, 0x01, 0x00, 0xe1, 
		0xc3, 0x01, 0x1f, 0xe0, 0xc6, 0xe1, 0xc8, 0xe1, 0x14, 0x60, 0xc9, 0xe1, 0x5f, 0xff, 0xdf, 0xff, 
		0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 
		0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xe8, 0x52, 0x24, 0x80, 0x80, 
		0x80, 0xe1, 0xe0, 0x2e, 0x70, 0x60, 0xb0, 0x80, 0x70, 0xc0, 0x02, 0x6f, 0xf0, 0x61, 0x01, 0xce, 
		0x12, 0x8f, 0xff, 0xef, 0xf2, 0x90, 0x28, 0x10, 0x2c, 0x28, 0x1c, 0x34, 0x0a, 0x07, 0x03, 0x04, 
		0x04, 0x03, 0x86, 0x03, 0x03, 0x04, 0x03, 0x03, 0x8a, 0x0c, 0x04, 0x03, 0x87, 0x0c, 0x04, 0x7f, 
		0x83, 0x1b, 0x87, 0x23, 0x84, 0x51, 0x83, 0x27, 0x85, 0x7f, 0xff, 0x7f, 0xa1, 0x48, 0x92, 0x02, 
		0x02, 0x03, 0x87, 0x80, 0xb9, 0xc1, 0x82, 0xc2, 0x01, 0xc3, 0x00, 0x09, 0xbf, 0xc1, 0x84, 0x07, 
		0x38, 0x4a, 0x3f, 0xe8, 0x80, 
	};
} HSpr_owl;

// "plane" (GIF orig:360 raw_payload:798 shrunk_payload:143 total:151 bytes)
// Compared to GIF: 41.94% 	Compared to raw: 18.92%
// using GIF index 15 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 8; loop = 0; transparency = 15; )

FL_PROGMEM const struct HSpr_plane {
	uint16_t datasize = 143;
	uint16_t frames = 3;
	uint16_t duration = 20;
	uint8_t flags = 0;
	uint8_t palette_entries = 10;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 15
		// 0xff, 0xff, 0xff,  // original palette index 8
		// 0xff, 0x00, 0x00,  // original palette index 1
		// 0x80, 0x80, 0x80,  // original palette index 6
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x00, 0x6c, 0xd9,  // original palette index 4
		// 0x00, 0x40, 0x80,  // original palette index 2
		// 0x00, 0x80, 0xff,  // original palette index 5
		// 0x80, 0xff, 0xff,  // original palette index 7
		// 0x00, 0x5c, 0xb9,  // original palette index 3
	};
	uint8_t hs_data[143] = {
		0x00, 0x02, 0xff, 0x80, 0x01, 0x40, 0x20, 0x18, 0x0c, 0x06, 0x00, 0x18, 0x0e, 0xd9, 0xd9, 0x80, 
		0x50, 0x30, 0x10, 0x0c, 0x07, 0xff, 0x00, 0x13, 0x05, 0x5c, 0xdc, 0x84, 0x41, 0xc0, 0x60, 0x30, 
		0x18, 0x14, 0x0a, 0x07, 0x03, 0x81, 0x8c, 0x45, 0x41, 0x20, 0x84, 0x01, 0x90, 0x48, 0x2c, 0x18, 
		0x20, 0x30, 0x1e, 0x76, 0x09, 0x04, 0x83, 0xc1, 0xe0, 0xf0, 0x62, 0x10, 0x68, 0x24, 0x10, 0x38, 
		0x0a, 0x0f, 0x08, 0x84, 0x41, 0xa0, 0xb0, 0x90, 0x50, 0x28, 0x00, 0x68, 0x18, 0x3c, 0x1c, 0x1e, 
		0x0d, 0x05, 0x04, 0x02, 0x84, 0x84, 0x01, 0x41, 0x01, 0xe0, 0xc5, 0xe0, 0xa1, 0x30, 0x91, 0x00, 
		0x21, 0x88, 0x61, 0x18, 0x31, 0x68, 0x32, 0x80, 0x70, 0x78, 0x43, 0x78, 0xc1, 0xc8, 0x23, 0x80, 
		0xb2, 0xe0, 0x30, 0x70, 0x92, 0x70, 0x22, 0xd8, 0x40, 0xf9, 0x66, 0xf8, 0xf7, 0xd0, 0x28, 0x14, 
		0x0a, 0x03, 0x01, 0x80, 0xbf, 0xff, 0xbf, 0xfe, 0x01, 0x01, 0x3f, 0xff, 0xbf, 0xf9, 0x80, 
	};
} HSpr_plane;

// "pouet_avatar_mario" (GIF orig:328 raw_payload:554 shrunk_payload:237 total:245 bytes)
// Compared to GIF: 74.70% 	Compared to raw: 44.22%
// using GIF index 13 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 13; loop = 0; transparency = 13; )

FL_PROGMEM const struct HSpr_pouet_avatar_mario {
	uint16_t datasize = 237;
	uint16_t frames = 2;
	uint16_t duration = 200;
	uint8_t flags = 0;
	uint8_t palette_entries = 14;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 13
		// 0x52, 0x00, 0x00,  // original palette index 9
		// 0xff, 0x41, 0x73,  // original palette index 5
		// 0xff, 0xfb, 0x9c,  // original palette index 0
		// 0xff, 0xfb, 0xff,  // original palette index 8
		// 0xff, 0xdb, 0x00,  // original palette index 1
		// 0xb5, 0x28, 0x63,  // original palette index 3
		// 0x00, 0x00, 0x00,  // original palette index 12
		// 0xff, 0x71, 0x6b,  // original palette index 7
		// 0xff, 0xd3, 0xc6,  // original palette index 10
		// 0x8c, 0x59, 0x18,  // original palette index 11
		// 0x21, 0x30, 0x8c,  // original palette index 6
		// 0x84, 0xdb, 0xce,  // original palette index 2
		// 0x42, 0x82, 0x9c,  // original palette index 4
	};
	uint8_t hs_data[237] = {
		0x00, 0x02, 0xa9, 0x40, 0x20, 0x1f, 0xfa, 0x0d, 0xcf, 0xff, 0xfb, 0xce, 0x7f, 0xff, 0x7f, 0xff, 
		0xff, 0x6e, 0x01, 0xb5, 0x94, 0x58, 0xc2, 0x80, 0xbf, 0xf7, 0x1b, 0x5f, 0xff, 0xa7, 0xc6, 0xc6, 
		0x56, 0x63, 0x12, 0x19, 0x86, 0x33, 0x09, 0xdb, 0xe7, 0x50, 0xb0, 0x59, 0xc1, 0x50, 0x38, 0x08, 
		0x00, 0x18, 0xe4, 0x4c, 0x06, 0x05, 0x03, 0x81, 0x40, 0xa0, 0x41, 0x11, 0x30, 0x18, 0x24, 0x0e, 
		0x0b, 0x06, 0x83, 0x04, 0x41, 0x03, 0x42, 0x41, 0xc0, 0x01, 0xe0, 0xd0, 0x68, 0x30, 0x88, 0x34, 
		0x22, 0x0e, 0x01, 0x07, 0x07, 0x83, 0xc2, 0x41, 0xe1, 0x21, 0x50, 0xa8, 0x4c, 0x1c, 0x02, 0x0a, 
		0x11, 0x07, 0x84, 0xc2, 0x82, 0x00, 0xe1, 0x50, 0x90, 0x00, 0x50, 0xf0, 0x28, 0x54, 0x20, 0x40, 
		0x0c, 0x7c, 0x1a, 0x13, 0x08, 0x19, 0x02, 0x28, 0x88, 0x84, 0x42, 0x21, 0x10, 0xa8, 0x50, 0x38, 
		0x2c, 0x02, 0x01, 0x0b, 0x86, 0x43, 0x21, 0xb0, 0xd8, 0x11, 0x78, 0x44, 0x2e, 0x09, 0x0c, 0x82, 
		0x41, 0x21, 0xb0, 0xa8, 0x54, 0x28, 0x1e, 0x2e, 0x15, 0x04, 0x01, 0x82, 0x17, 0x0a, 0x86, 0x84, 
		0x01, 0x03, 0xc3, 0x40, 0x21, 0x70, 0xd8, 0x58, 0x3c, 0x64, 0x1e, 0x07, 0x07, 0x81, 0x8f, 0x81, 
		0x17, 0x83, 0xb0, 0x84, 0x38, 0x04, 0x3f, 0xff, 0xbf, 0xc2, 0x42, 0x1f, 0xe3, 0x21, 0x4f, 0xf0, 
		0x4b, 0xf0, 0x90, 0x78, 0x3b, 0xbc, 0x48, 0x80, 0x14, 0x1d, 0x98, 0x08, 0x1e, 0x0d, 0xbe, 0x10, 
		0x20, 0x0a, 0x0f, 0x07, 0x85, 0x41, 0xe1, 0x6f, 0xf0, 0xe2, 0x00, 0xa1, 0x00, 0x40, 0x00, 0x70, 
		0xa7, 0xa0, 0x22, 0x88, 0x32, 0xe8, 0x27, 0xf8, 0x67, 0x88, 0x77, 0xf8, 0xb0, 
	};
} HSpr_pouet_avatar_mario;

// "pouet_avatar_poi_charly_walk2" (GIF orig:964 raw_payload:2075 shrunk_payload:764 total:772 bytes)
// Compared to GIF: 80.08% 	Compared to raw: 37.20%
// using GIF index 8 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 8; loop = 0; transparency = 8; )

FL_PROGMEM const struct HSpr_pouet_avatar_poi_charly_walk2 {
	uint16_t datasize = 764;
	uint16_t frames = 8;
	uint16_t duration = 75;
	uint8_t flags = 0;
	uint8_t palette_entries = 9;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 8
		// 0x3e, 0x3f, 0x50,  // original palette index 2
		// 0x27, 0x07, 0x07,  // original palette index 7
		// 0xa0, 0x20, 0x00,  // original palette index 1
		// 0xdb, 0xbb, 0x1b,  // original palette index 4
		// 0x8e, 0x4e, 0x0e,  // original palette index 6
		// 0xb4, 0x74, 0x34,  // original palette index 5
		// 0xdf, 0xdf, 0xdf,  // original palette index 0
		// 0x4c, 0x6e, 0x90,  // original palette index 3
	};
	uint8_t hs_data[764] = {
		0x00, 0x02, 0x9f, 0x4f, 0xea, 0x12, 0x78, 0x3c, 0x1f, 0x41, 0x20, 0x80, 0x76, 0xf7, 0x71, 0xbc, 
		0x75, 0x3a, 0x1d, 0xb4, 0xba, 0x4d, 0x3b, 0xfd, 0xfe, 0xfd, 0x32, 0xdd, 0x90, 0x0d, 0x83, 0x80, 
		0xc0, 0xa0, 0x30, 0x28, 0x14, 0x04, 0x10, 0x0a, 0x06, 0x2b, 0x0b, 0x02, 0x82, 0x41, 0x60, 0xb0, 
		0x58, 0x14, 0x08, 0x76, 0x22, 0x05, 0x06, 0x81, 0x41, 0x60, 0xf0, 0x78, 0x28, 0x40, 0x44, 0x0a, 
		0x0b, 0x05, 0x83, 0x41, 0xe0, 0x50, 0x51, 0x90, 0x40, 0x80, 0x68, 0x30, 0x00, 0x14, 0x10, 0x20, 
		0x1a, 0x04, 0x00, 0x05, 0x05, 0x82, 0xc1, 0xe0, 0xb0, 0x58, 0x20, 0xc4, 0x24, 0x0a, 0x09, 0x06, 
		0x83, 0x13, 0xc1, 0x14, 0x01, 0x04, 0x02, 0x03, 0x81, 0x40, 0xa0, 0x41, 0x10, 0x70, 0x21, 0x40, 
		0x32, 0xd8, 0x22, 0xe0, 0x21, 0xf0, 0x38, 0x20, 0x34, 0x1a, 0x2c, 0x18, 0x9c, 0x11, 0x34, 0x2c, 
		0x16, 0x0c, 0x3f, 0x0a, 0x2b, 0x04, 0x0e, 0x04, 0x3f, 0x06, 0x0f, 0x08, 0x21, 0x04, 0x4d, 0x04, 
		0x36, 0x05, 0x01, 0x48, 0x05, 0x13, 0x82, 0x2d, 0x85, 0x07, 0x02, 0x84, 0x42, 0x0b, 0xe0, 0xc4, 
		0xe0, 0xc2, 0xa0, 0xa0, 0x90, 0x28, 0x44, 0x00, 0x1e, 0x08, 0xc2, 0x0c, 0x8c, 0x16, 0x04, 0x1e, 
		0x04, 0x9f, 0x0a, 0x06, 0x0a, 0x1d, 0x04, 0x00, 0x08, 0xff, 0x10, 0xce, 0x0e, 0xff, 0x90, 0x78, 
		0x08, 0xff, 0x34, 0x5c, 0x0c, 0xff, 0x0c, 0x6b, 0x0a, 0x0f, 0x04, 0xff, 0x0c, 0x10, 0x06, 0x99, 
		0x04, 0xff, 0x0e, 0xc6, 0x08, 0x11, 0x06, 0x4d, 0x06, 0x26, 0x04, 0xfe, 0x0c, 0x4c, 0x06, 0x5b, 
		0x04, 0x30, 0x04, 0xff, 0x06, 0x64, 0x04, 0xba, 0x08, 0x10, 0x04, 0xdf, 0x06, 0x0f, 0x04, 0xfe, 
		0x0c, 0x07, 0x06, 0xff, 0x06, 0x9d, 0x06, 0xa4, 0x0d, 0x02, 0x7f, 0xbe, 0x10, 0x09, 0x58, 0x86, 
		0x22, 0x07, 0x7f, 0x87, 0x49, 0x03, 0x27, 0x84, 0x61, 0x02, 0x28, 0x02, 0x58, 0x87, 0x82, 0x41, 
		0x9a, 0x60, 0xc9, 0xc2, 0x41, 0xc0, 0x87, 0xa0, 0xc1, 0xe2, 0x42, 0x00, 0xc9, 0xa0, 0x8b, 0x81, 
		0xc4, 0x00, 0xc6, 0x60, 0x81, 0xe1, 0xc0, 0x00, 0x9f, 0xe1, 0x03, 0xc1, 0xd5, 0xa0, 0x9f, 0xc1, 
		0x9f, 0xe0, 0x9f, 0x01, 0x04, 0x20, 0xc3, 0xe0, 0xdf, 0xe0, 0x95, 0x80, 0xc1, 0x20, 0x9f, 0xc1, 
		0x03, 0xc0, 0xc7, 0xe0, 0xdf, 0xc1, 0xc3, 0xa0, 0x9f, 0xea, 0x20, 0x90, 0x42, 0x30, 0x28, 0x1b, 
		0xfc, 0x51, 0x58, 0x1b, 0xbc, 0x43, 0xfc, 0x33, 0xbc, 0x39, 0xf8, 0x19, 0x0c, 0x14, 0x1a, 0x0a, 
		0x1f, 0x08, 0xc0, 0x04, 0x4f, 0x04, 0x51, 0x06, 0x0e, 0x13, 0x04, 0x02, 0x82, 0x2e, 0x87, 0x50, 
		0x83, 0x83, 0x0e, 0xc3, 0xa3, 0x41, 0xaa, 0xc1, 0xbb, 0x84, 0x1f, 0x41, 0x07, 0xc1, 0x83, 0xc4, 
		0xaa, 0xc1, 0x12, 0x81, 0x35, 0x82, 0x9f, 0x84, 0x24, 0x81, 0xbc, 0x01, 0xb8, 0x02, 0x02, 0x81, 
		0x91, 0x02, 0x3f, 0xc1, 0xb3, 0x81, 0x8f, 0x41, 0x80, 0x01, 0x87, 0x82, 0x3e, 0xc3, 0x00, 0x01, 
		0xbf, 0xc7, 0x40, 0xdb, 0xe1, 0xdf, 0xe1, 0xe0, 0x61, 0x10, 0xaf, 0xf0, 0x6c, 0xf0, 0x41, 0x00, 
		0x6f, 0xf1, 0x10, 0x40, 0x78, 0x37, 0xf9, 0x52, 0xf0, 0x37, 0xf8, 0xa1, 0xe8, 0x37, 0xf8, 0xa0, 
		0x70, 0x41, 0x58, 0x25, 0xf0, 0x66, 0x38, 0x30, 0x78, 0x28, 0x31, 0xbc, 0x23, 0x74, 0x2a, 0xfc, 
		0x1b, 0xc0, 0x13, 0x3c, 0x1b, 0xfc, 0x3b, 0x00, 0x1b, 0xbc, 0x3b, 0xfc, 0x18, 0xb4, 0x10, 0xbc, 
		0x31, 0xf0, 0x20, 0x38, 0x12, 0xc0, 0x2b, 0x80, 0x13, 0xb4, 0x10, 0xa4, 0x19, 0x50, 0x1b, 0xfc, 
		0x21, 0x28, 0x18, 0xa8, 0x19, 0x18, 0x13, 0xfc, 0x48, 0x18, 0x2b, 0xfc, 0x7b, 0x78, 0x33, 0xfc, 
		0x40, 0x38, 0x32, 0xc8, 0x23, 0xbc, 0x23, 0xfc, 0x54, 0x1c, 0x42, 0x08, 0x3c, 0x19, 0xfe, 0x24, 
		0x88, 0x10, 0xc0, 0x11, 0xfe, 0x12, 0x09, 0x04, 0x34, 0x05, 0x70, 0x83, 0x28, 0x84, 0x07, 0x08, 
		0x81, 0x3f, 0xc4, 0x0b, 0x41, 0x86, 0x81, 0x41, 0x82, 0x20, 0x81, 0xe1, 0xa0, 0x2d, 0x00, 0x8f, 
		0x00, 0x47, 0xd1, 0x0f, 0xe0, 0x60, 0xf1, 0x21, 0xf0, 0x45, 0x00, 0x60, 0xf0, 0xed, 0xf0, 0x65, 
		0xa0, 0x68, 0xf0, 0x90, 0x88, 0x42, 0xa4, 0x10, 0x68, 0x20, 0x1c, 0x13, 0x7c, 0x18, 0x3c, 0x13, 
		0xf8, 0x30, 0x1c, 0x1b, 0xfc, 0x18, 0xa8, 0x10, 0x3c, 0x20, 0x00, 0x1b, 0xfc, 0x7b, 0x7c, 0x3b, 
		0xfc, 0x34, 0x02, 0x06, 0x0f, 0x0c, 0xff, 0x05, 0x07, 0x83, 0xbb, 0xc4, 0xbf, 0xc2, 0x30, 0x01, 
		0x3b, 0x42, 0xbf, 0xc5, 0x04, 0x05, 0x41, 0x60, 0xef, 0xf0, 0x4a, 0x31, 0x10, 0x62, 0x80, 0x44, 
		0x90, 0x32, 0xf8, 0x56, 0x78, 0x22, 0x70, 0x20, 0xf0, 0x92, 0x00, 0x30, 0xe0, 0x66, 0x90, 0x56, 
		0xa0, 0x21, 0xe8, 0x98, 0x28, 0x3c, 0x18, 0xcc, 0x13, 0xc4, 0x43, 0xcc, 0x18, 0x38, 0x4c, 0x16, 
		0x08, 0x0d, 0x08, 0xff, 0x0a, 0x8c, 0x08, 0x21, 0x06, 0xff, 0x0c, 0x8b, 0x08, 0x19, 0x04, 0xff, 
		0x10, 0x3f, 0x06, 0xff, 0xba, 0x7d, 0x08, 0xff, 0x12, 0xed, 0x04, 0xfe, 0x06, 0xff, 0x0e, 0xfc, 
		0x06, 0xbe, 0x04, 0x94, 0x06, 0x27, 0x04, 0x5c, 0x0a, 0x3e, 0x06, 0xee, 0x0c, 0x1a, 0x04, 0x4d, 
		0x0e, 0x70, 0x08, 0x99, 0x04, 0x2b, 0x04, 0x0e, 0x05, 0x05, 0x14, 0x02, 0x56, 0x86, 0x18, 0x02, 
		0x08, 0x83, 0x7f, 0x88, 0x78, 0x83, 0x6f, 0x03, 0x7f, 0x86, 0x07, 0x03, 0x02, 0x03, 0x77, 0x82, 
		0x7f, 0x84, 0x40, 0x03, 0x77, 0x04, 0x7f, 0x88, 0x00, 0x07, 0x07, 0x02, 
	};
} HSpr_pouet_avatar_poi_charly_walk2;

// "ptititi" (GIF orig:173 raw_payload:283 shrunk_payload:156 total:164 bytes)
// Compared to GIF: 94.80% 	Compared to raw: 57.95%
// using GIF index 3 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; transparency = 3; )

FL_PROGMEM const struct HSpr_ptititi {
	uint16_t datasize = 156;
	uint16_t frames = 1;
	uint16_t duration = 0;
	uint8_t flags = 0;
	uint8_t palette_entries = 9;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 3
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xd6, 0xff, 0xd6,  // original palette index 8
		// 0x7b, 0xad, 0x7b,  // original palette index 6
		// 0x52, 0x8c, 0x4a,  // original palette index 4
		// 0x9c, 0xce, 0x9c,  // original palette index 7
		// 0x31, 0x63, 0x31,  // original palette index 2
		// 0x5a, 0x5a, 0x5a,  // original palette index 5
		// 0x18, 0x4a, 0x18,  // original palette index 1
	};
	uint8_t hs_data[156] = {
		0x00, 0x05, 0xeb, 0x7f, 0xfa, 0xd7, 0xbd, 0x6d, 0xee, 0xa5, 0x8c, 0xa5, 0x67, 0x39, 0xd9, 0xc9, 
		0x8d, 0x8e, 0x63, 0x5a, 0xad, 0x56, 0xa3, 0x14, 0xa8, 0xc4, 0x02, 0x01, 0x01, 0x80, 0xc0, 0x43, 
		0xe1, 0x41, 0x01, 0x60, 0x30, 0x28, 0x1c, 0x10, 0x20, 0x10, 0x10, 0x1a, 0x03, 0x03, 0x82, 0x03, 
		0xc3, 0x02, 0x03, 0x0b, 0xc7, 0x01, 0xc1, 0x18, 0x03, 0x85, 0xc3, 0x86, 0x41, 0x87, 0x01, 0x89, 
		0xc4, 0x41, 0x20, 0x90, 0x31, 0xe0, 0x31, 0x70, 0x68, 0x24, 0x0e, 0x0b, 0x05, 0x82, 0xc0, 0xc0, 
		0x00, 0x89, 0xc1, 0x41, 0xc0, 0xa0, 0x50, 0x28, 0x10, 0x40, 0x1c, 0x12, 0x0c, 0x6f, 0x08, 0x0e, 
		0x0e, 0x6f, 0x09, 0x01, 0x83, 0x03, 0xc1, 0x41, 0xe0, 0x30, 0x38, 0x18, 0x0c, 0x14, 0x10, 0x40, 
		0x08, 0x5c, 0x0a, 0x07, 0x05, 0x80, 0x83, 0xc1, 0x15, 0x41, 0x94, 0xc1, 0xc1, 0x20, 0x30, 0x88, 
		0x30, 0x24, 0x18, 0x70, 0x14, 0x20, 0x18, 0x08, 0x9e, 0x08, 0x0e, 0x08, 0x00, 0x10, 0x2e, 0x09, 
		0x5e, 0x14, 0xfc, 0x0c, 0x78, 0x09, 0x00, 0x1d, 0x3c, 0x18, 0x1a, 0x14, 
	};
} HSpr_ptititi;

// "rjb" (GIF orig:934 raw_payload:3677 shrunk_payload:884 total:892 bytes)
// Compared to GIF: 95.50% 	Compared to raw: 24.26%
// using GIF index 30 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 30; loop = 0; transparency = 30; )

FL_PROGMEM const struct HSpr_rjb {
	uint16_t datasize = 884;
	uint16_t frames = 14;
	uint16_t duration = 20;
	uint8_t flags = 0;
	uint8_t palette_entries = 31;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 30
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xca, 0x46, 0x29,  // original palette index 23
		// 0xd1, 0x60, 0x2f,  // original palette index 2
		// 0xcb, 0x47, 0x29,  // original palette index 5
		// 0xd1, 0x61, 0x2f,  // original palette index 16
		// 0xca, 0x46, 0x28,  // original palette index 25
		// 0xdc, 0x8c, 0x41,  // original palette index 12
		// 0xd7, 0x77, 0x39,  // original palette index 19
		// 0xd7, 0x76, 0x38,  // original palette index 13
		// 0xdd, 0x8c, 0x41,  // original palette index 24
		// 0xc4, 0x27, 0x25,  // original palette index 29
		// 0xc4, 0x26, 0x24,  // original palette index 18
		// 0xdc, 0x8b, 0x41,  // original palette index 22
		// 0xff, 0xff, 0xff,  // original palette index 4
		// 0xfb, 0xcd, 0xa3,  // original palette index 9
		// 0xfa, 0xcd, 0xa3,  // original palette index 3
		// 0xf5, 0xf5, 0xf5,  // original palette index 17
		// 0xee, 0x86, 0x51,  // original palette index 11
		// 0xfb, 0xcd, 0xa4,  // original palette index 8
		// 0xf3, 0x9f, 0x6c,  // original palette index 6
		// 0xed, 0x85, 0x50,  // original palette index 7
		// 0xc3, 0x26, 0x24,  // original palette index 14
		// 0xf6, 0xb6, 0x87,  // original palette index 1
		// 0xf5, 0xb5, 0x86,  // original palette index 28
		// 0xfb, 0xce, 0xa4,  // original palette index 21
		// 0xea, 0x6c, 0x39,  // original palette index 15
		// 0xeb, 0xeb, 0xeb,  // original palette index 27
		// 0xf3, 0x9f, 0x6b,  // original palette index 26
		// 0xe9, 0x6b, 0x39,  // original palette index 10
		// 0xf2, 0x9f, 0x6b,  // original palette index 20
	};
	uint8_t hs_data[884] = {
		0x00, 0x05, 0xe5, 0x51, 0xa5, 0x3d, 0x1b, 0x04, 0xbf, 0x97, 0x47, 0x94, 0xf4, 0x6c, 0x32, 0xfe, 
		0x55, 0x1a, 0x51, 0xdc, 0xc6, 0x50, 0x7a, 0xf7, 0x79, 0xcf, 0x5e, 0xed, 0x38, 0xee, 0xe3, 0x28, 
		0x3c, 0x49, 0x3c, 0x97, 0x89, 0x26, 0x92, 0x77, 0x31, 0x74, 0x1f, 0xff, 0xff, 0xff, 0xfb, 0xe6, 
		0xe8, 0xff, 0x5c, 0xdd, 0x1f, 0xd7, 0xeb, 0xf5, 0xf7, 0x61, 0xaa, 0x3f, 0xbe, 0x6e, 0x93, 0xe7, 
		0x9f, 0xb6, 0x7b, 0x70, 0xb5, 0x0e, 0x1c, 0x9a, 0x49, 0xf6, 0xdb, 0x61, 0xfe, 0xbb, 0x5c, 0x37, 
		0xef, 0x9d, 0xa4, 0xf5, 0x5b, 0x27, 0x3e, 0xbf, 0x5f, 0xaf, 0xe7, 0x9f, 0xb5, 0xfa, 0x6d, 0x73, 
		0x9f, 0x96, 0x7e, 0xd6, 0x6a, 0x27, 0x01, 0x00, 0x05, 0x07, 0x08, 0x81, 0x40, 0xe0, 0x90, 0x48, 
		0x2c, 0x0e, 0x06, 0x10, 0x0d, 0x01, 0x83, 0x41, 0xe1, 0x10, 0x38, 0x4c, 0x1e, 0x15, 0x08, 0x08, 
		0x06, 0x80, 0xc2, 0xe0, 0x30, 0x18, 0x60, 0xb8, 0x14, 0x0e, 0x1a, 0x10, 0x0f, 0x0e, 0x87, 0xc4, 
		0x21, 0xd0, 0xf8, 0x14, 0x0e, 0x15, 0x04, 0x07, 0x87, 0x88, 0x44, 0x61, 0xd1, 0x18, 0x94, 0x12, 
		0x13, 0x0c, 0x07, 0x87, 0x89, 0xc3, 0xa1, 0xd0, 0xe8, 0xa4, 0x56, 0x2c, 0x50, 0x0f, 0x0e, 0x87, 
		0x83, 0xc1, 0x45, 0xe1, 0xf1, 0x83, 0x88, 0x78, 0x0c, 0x4e, 0x03, 0x0e, 0x87, 0x46, 0x63, 0x51, 
		0x00, 0xf8, 0x78, 0xdc, 0x4c, 0x7e, 0x0a, 0x1f, 0x0f, 0x8b, 0x83, 0xc3, 0xc7, 0x22, 0xf1, 0x38, 
		0x84, 0x3e, 0x29, 0x12, 0x8e, 0x8b, 0xc4, 0x45, 0x22, 0xf1, 0xe8, 0xac, 0x76, 0x34, 0xb0, 0x10, 
		0xc0, 0x0c, 0xda, 0x26, 0x00, 0x48, 0xff, 0x1f, 0x04, 0x82, 0xc1, 0x20, 0x90, 0x38, 0x2b, 0xfc, 
		0x44, 0x11, 0xfe, 0x12, 0x0f, 0x09, 0x77, 0x07, 0x8b, 0x3f, 0xc7, 0xc5, 0x63, 0x31, 0x08, 0xac, 
		0x4e, 0x09, 0x03, 0x83, 0xbf, 0xc7, 0xc2, 0xc1, 0xe2, 0x1f, 0xe0, 0xe2, 0x4f, 0xf1, 0x20, 0xf0, 
		0x71, 0x76, 0xf8, 0x88, 0x04, 0x06, 0x20, 0xff, 0x05, 0x10, 0x8d, 0x44, 0xdf, 0xe2, 0x07, 0xe0, 
		0xe2, 0x71, 0x07, 0xf8, 0x88, 0xa4, 0x5e, 0x1f, 0x10, 0x89, 0xc5, 0x22, 0x4f, 0x01, 0x0f, 0xf0, 
		0x71, 0x28, 0xd4, 0x75, 0xff, 0xfd, 0xfe, 0x62, 0x2f, 0x10, 0x8b, 0xc7, 0xa2, 0xef, 0xff, 0xef, 
		0xff, 0xb1, 0x47, 0xf8, 0xb8, 0xac, 0x42, 0x2b, 0x17, 0x8a, 0xbf, 0xff, 0xbf, 0xd5, 0x41, 0xa0, 
		0x6f, 0xf0, 0x50, 0x37, 0xf8, 0xa8, 0x4c, 0x0e, 0x10, 0xff, 0x05, 0x05, 0x67, 0x06, 0x7e, 0x02, 
		0x8b, 0x3f, 0xc1, 0xc2, 0x9f, 0xe2, 0x22, 0x11, 0x38, 0xac, 0x42, 0x09, 0x03, 0x85, 0x41, 0x9f, 
		0xe1, 0xe2, 0x6f, 0xf0, 0xaf, 0x00, 0xcf, 0xf0, 0xd1, 0x58, 0x61, 0x40, 0x3c, 0x76, 0x27, 0x1d, 
		0x8a, 0x47, 0x62, 0xed, 0xf1, 0x10, 0x08, 0x0c, 0x4d, 0xfe, 0x0a, 0x1f, 0x1d, 0x87, 0xbf, 0xcb, 
		0xc7, 0xa2, 0xf1, 0x08, 0x7c, 0x3e, 0x29, 0x12, 0x78, 0x08, 0x80, 0xc7, 0x23, 0x11, 0x48, 0xac, 
		0x76, 0x34, 0xff, 0xfe, 0xff, 0xb1, 0x12, 0x88, 0x45, 0x22, 0xb1, 0x47, 0xff, 0xa8, 0x14, 0x0e, 
		0x09, 0x02, 0x7f, 0x8a, 0x81, 0x41, 0xe1, 0x10, 0x58, 0x4c, 0x1e, 0x1a, 0xff, 0x10, 0xfc, 0x04, 
		0xff, 0x09, 0x0d, 0x7f, 0x8b, 0x87, 0xc1, 0x20, 0xb0, 0x78, 0x23, 0xfc, 0x3c, 0x3d, 0xfe, 0x0e, 
		0x04, 0xff, 0x13, 0x19, 0x7f, 0x82, 0x8e, 0x44, 0x81, 0xc1, 0x9f, 0xe0, 0xa2, 0x0f, 0xf1, 0xb0, 
		0x48, 0x84, 0x12, 0x09, 0x04, 0x88, 0x46, 0xa3, 0x2f, 0xf1, 0x11, 0x37, 0xf8, 0x48, 0xc0, 0x3c, 
		0x3c, 0x52, 0x2f, 0x0f, 0x8c, 0xc3, 0xe3, 0x91, 0x57, 0xf8, 0x98, 0xa4, 0x5e, 0x3d, 0x12, 0x8e, 
		0x83, 0x84, 0x3f, 0xe9, 0xc1, 0x20, 0xaf, 0xf1, 0x30, 0x68, 0x3c, 0x22, 0x07, 0x09, 0x83, 0xc2, 
		0xa1, 0x0e, 0xe0, 0xf0, 0xb8, 0x0c, 0x06, 0x18, 0xff, 0x1b, 0x0f, 0x88, 0x45, 0x61, 0xf0, 0x28, 
		0x1c, 0x29, 0xfe, 0x22, 0x20, 0xff, 0x07, 0x04, 0x84, 0xc3, 0x03, 0xe1, 0xe2, 0x6f, 0xf0, 0x51, 
		0x48, 0xab, 0xfc, 0x4c, 0x3d, 0xfe, 0x0e, 0x1e, 0xdf, 0x0f, 0x00, 0x80, 0xc4, 0xc9, 0xc0, 0xa3, 
		0x31, 0xa8, 0x83, 0xfc, 0x64, 0x3e, 0x1f, 0x17, 0x07, 0x87, 0x8e, 0x45, 0xe2, 0x71, 0x08, 0x7c, 
		0x52, 0x24, 0xff, 0x19, 0x15, 0x8e, 0xc6, 0x9f, 0xf6, 0xe0, 0x50, 0x37, 0xf8, 0x98, 0x14, 0x1e, 
		0x11, 0x05, 0x84, 0xc1, 0xe1, 0xb0, 0x98, 0x2b, 0x38, 0x34, 0x5a, 0x02, 0x02, 0x06, 0xff, 0x17, 
		0x10, 0x89, 0xc5, 0x61, 0xf0, 0x48, 0x2c, 0x1d, 0xfe, 0x22, 0x1e, 0xff, 0x07, 0x02, 0x84, 0xbc, 
		0x03, 0x40, 0x62, 0xb1, 0x97, 0xf8, 0x28, 0xe4, 0x49, 0xfe, 0x26, 0x20, 0xff, 0x07, 0x10, 0x6f, 
		0x87, 0x80, 0x41, 0x22, 0x10, 0x48, 0x24, 0x12, 0x21, 0x1a, 0x8c, 0xbf, 0xc6, 0x44, 0xe2, 0x11, 
		0x80, 0x78, 0x78, 0xa4, 0x5e, 0x1f, 0x19, 0x87, 0xc7, 0x22, 0xaf, 0xf1, 0x91, 0x28, 0xe8, 0x38, 
		0x43, 0xfe, 0x84, 0x1a, 0x07, 0x04, 0x82, 0x3f, 0xc5, 0x41, 0x20, 0xf0, 0x98, 0x1c, 0x22, 0x0f, 
		0x07, 0x7f, 0x88, 0x86, 0x3f, 0xc3, 0x42, 0x9f, 0xe2, 0xe2, 0x10, 0x48, 0x1c, 0x2a, 0x0c, 0xff, 
		0x0f, 0x13, 0x7f, 0x83, 0x82, 0x3f, 0xc4, 0xc4, 0x1f, 0xe0, 0xa2, 0x91, 0x58, 0x63, 0xfc, 0x44, 
		0x4d, 0xfe, 0x36, 0x03, 0x13, 0x80, 0xc3, 0xa1, 0xd0, 0xf8, 0xec, 0x3d, 0xfe, 0x22, 0x20, 0xff, 
		0x08, 0x1f, 0x0f, 0x01, 0x8f, 0x45, 0xe2, 0x10, 0xf8, 0x7c, 0x52, 0x24, 0xff, 0x13, 0x1c, 0x8c, 
		0x45, 0x22, 0xb1, 0xd8, 0xd3, 0xff, 0xfb, 0xfe, 0xc4, 0x6e, 0x21, 0x11, 0x87, 0x44, 0x5f, 0xfe, 
		0xa0, 0x90, 0x57, 0xf8, 0x28, 0x2b, 0xfc, 0x54, 0x22, 0x07, 0x09, 0x7f, 0x82, 0x77, 0x07, 0x7e, 
		0x02, 0x86, 0x3f, 0xc1, 0xc3, 0x5f, 0xe2, 0x23, 0x31, 0x08, 0xac, 0x4e, 0x09, 0x03, 0x83, 0xc1, 
		0x1f, 0xe1, 0xe2, 0x0f, 0xf0, 0xb0, 0xb7, 0xf8, 0xc8, 0x94, 0x58, 0xa0, 0x1e, 0x1d, 0x10, 0x87, 
		0x43, 0xa1, 0xd1, 0x78, 0x7b, 0xfc, 0x4c, 0x41, 0xfe, 0x0a, 0x21, 0x1a, 0x89, 0xbf, 0xcb, 0xc5, 
		0x22, 0xf0, 0xf8, 0x84, 0x4e, 0x29, 0x12, 0x78, 0x08, 0x08, 0x02, 0x8f, 0x44, 0xa3, 0x51, 0xd7, 
		0xff, 0xf7, 0xf9, 0xb8, 0xf3, 0xfc, 0x5b, 0xbc, 0x23, 0xff, 0xfb, 0xff, 0x54, 0x39, 0x7e, 0x0d, 
		0xff, 0xfc, 0x00, 0x58, 
	};
} HSpr_rjb;

// "rockhell" (GIF orig:515 raw_payload:1045 shrunk_payload:400 total:408 bytes)
// Compared to GIF: 79.22% 	Compared to raw: 39.04%
// using GIF index 0 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 32000; transparency = 0; )

FL_PROGMEM const struct HSpr_rockhell {
	uint16_t datasize = 400;
	uint16_t frames = 4;
	uint16_t duration = 160;
	uint8_t flags = 0;
	uint8_t palette_entries = 7;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xc0, 0x40, 0x00,  // original palette index 12
		// 0xe0, 0x80, 0x00,  // original palette index 13
		// 0xe0, 0xc0, 0x00,  // original palette index 14
		// 0xe0, 0xe0, 0xc0,  // original palette index 15
		// 0x80, 0x20, 0x40,  // original palette index 11
		// 0x40, 0x20, 0x40,  // original palette index 3
	};
	uint8_t hs_data[400] = {
		0x00, 0x02, 0xe0, 0x50, 0x20, 0x1e, 0x0c, 0x04, 0x03, 0xc1, 0xc0, 0x80, 0x78, 0x3c, 0x1c, 0x0c, 
		0x04, 0x82, 0x81, 0x40, 0x90, 0x50, 0x06, 0xe9, 0x60, 0x30, 0x28, 0x1c, 0x0e, 0x07, 0x02, 0x80, 
		0x83, 0x43, 0xc0, 0x41, 0xa0, 0xc2, 0x40, 0xa0, 0x40, 0xe0, 0xb0, 0x38, 0x24, 0x10, 0x1a, 0x10, 
		0x3e, 0x14, 0x1c, 0x0e, 0x08, 0x2e, 0x09, 0x05, 0x82, 0x83, 0xc1, 0xc1, 0x81, 0xa0, 0xa0, 0xc2, 
		0xf0, 0x70, 0x10, 0x10, 0x20, 0x80, 0x40, 0x70, 0x31, 0xf8, 0x40, 0xf8, 0x40, 0x78, 0x48, 0x28, 
		0x80, 0x21, 0x74, 0x30, 0x00, 0x1c, 0x14, 0x7e, 0x0e, 0x02, 0x11, 0x06, 0x4e, 0x04, 0x2e, 0x08, 
		0x3f, 0x06, 0x1f, 0x06, 0x8a, 0x06, 0x0e, 0x09, 0x01, 0x1f, 0x05, 0x80, 0x02, 0xc1, 0x03, 0x85, 
		0x90, 0x41, 0xc1, 0x47, 0x40, 0x81, 0xc2, 0x20, 0x00, 0xd0, 0x40, 0x30, 0x40, 0xf1, 0x06, 0x80, 
		0x62, 0xf1, 0x83, 0x30, 0xa7, 0xf0, 0xee, 0x10, 0xe0, 0x30, 0x49, 0x11, 0x0e, 0xe0, 0xce, 0x01, 
		0x28, 0x40, 0x6e, 0xf2, 0x29, 0xf0, 0x90, 0x17, 0x80, 0x52, 0x70, 0x28, 0x18, 0x80, 0x28, 0x30, 
		0x13, 0xfc, 0x24, 0x0c, 0xe2, 0x18, 0x1e, 0x11, 0xbe, 0x08, 0x7e, 0x08, 0x40, 0x0d, 0xde, 0x15, 
		0xe0, 0x08, 0x7e, 0x1a, 0x06, 0xf0, 0x0f, 0x01, 0x81, 0x0b, 0xc2, 0x3b, 0xc2, 0x03, 0x81, 0xbb, 
		0xc5, 0xb8, 0x05, 0x82, 0x81, 0x84, 0x41, 0xbb, 0x84, 0x87, 0x41, 0x8f, 0x02, 0x84, 0x03, 0x08, 
		0xc2, 0x3b, 0x85, 0x84, 0xc1, 0x80, 0x15, 0x40, 0x5d, 0xe2, 0x96, 0x20, 0xd2, 0x01, 0x00, 0x60, 
		0x81, 0xc1, 0x56, 0x00, 0x81, 0xa1, 0x03, 0xe1, 0x41, 0xc0, 0xd8, 0x01, 0x20, 0x26, 0x30, 0xb0, 
		0x60, 0x68, 0x27, 0xf8, 0x48, 0x0b, 0xc4, 0x18, 0x40, 0x18, 0x38, 0x18, 0xfc, 0x22, 0x0c, 0x28, 
		0x3c, 0x1c, 0x14, 0x40, 0x10, 0xba, 0x18, 0x00, 0x0e, 0x0a, 0x3f, 0x07, 0x01, 0x08, 0x83, 0x27, 
		0x02, 0x17, 0x04, 0x1f, 0x83, 0x7f, 0x04, 0x06, 0x82, 0x07, 0x04, 0x68, 0x87, 0x05, 0x82, 0x07, 
		0x0b, 0x20, 0x83, 0x82, 0xbb, 0xc6, 0x03, 0x41, 0x00, 0xc1, 0x03, 0xc4, 0x1a, 0x01, 0x8b, 0xc6, 
		0x0c, 0x82, 0x04, 0x41, 0x83, 0x44, 0xc0, 0xe0, 0x60, 0x30, 0x80, 0xe0, 0xc7, 0x00, 0x6f, 0xf1, 
		0x2e, 0xf0, 0x80, 0xe0, 0x88, 0xf0, 0x8e, 0xf1, 0x22, 0xf0, 0xa2, 0xd0, 0x4d, 0xf0, 0x80, 0xe0, 
		0x47, 0x70, 0x4c, 0x00, 0x6e, 0xe0, 0xcc, 0x00, 0x40, 0xf0, 0xed, 0xd0, 0x4c, 0xf1, 0x0e, 0xe0, 
		0xa5, 0x00, 0x50, 0x10, 0x70, 0x48, 0x04, 0x0d, 0xe0, 0x14, 0x1c, 0x08, 0xde, 0x15, 0xde, 0x10, 
		0x78, 0x09, 0x60, 0x1e, 0x0a, 0xef, 0x1b, 0x05, 0x81, 0x36, 0x81, 0x00, 0x02, 0x3b, 0x03, 0x3f, 
		0x41, 0x81, 0x81, 0xb7, 0x83, 0x84, 0x01, 0x81, 0x81, 0xba, 0xc4, 0x0a, 0x43, 0x80, 0x02, 0x00, 
	};
} HSpr_rockhell;

// "scheisse" (GIF orig:478 raw_payload:1126 shrunk_payload:304 total:312 bytes)
// Compared to GIF: 65.27% 	Compared to raw: 27.71%
// using GIF index 33 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 33; loop = 0; transparency = 33; )

FL_PROGMEM const struct HSpr_scheisse {
	uint16_t datasize = 304;
	uint16_t frames = 4;
	uint16_t duration = 200;
	uint8_t flags = 0;
	uint8_t palette_entries = 34;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 33
		// 0x5f, 0x77, 0x8f,  // original palette index 15
		// 0x32, 0x32, 0x32,  // original palette index 32
		// 0x00, 0x00, 0x00,  // original palette index 31
		// 0x63, 0x79, 0x90,  // original palette index 20
		// 0x48, 0x69, 0x8a,  // original palette index 23
		// 0x17, 0x1c, 0x21,  // original palette index 11
		// 0x51, 0x70, 0x8f,  // original palette index 22
		// 0x5a, 0x6c, 0x7d,  // original palette index 26
		// 0x58, 0x66, 0x74,  // original palette index 14
		// 0x4b, 0x6c, 0x8c,  // original palette index 24
		// 0x37, 0x40, 0x4a,  // original palette index 17
		// 0x35, 0x3c, 0x42,  // original palette index 12
		// 0x55, 0x73, 0x91,  // original palette index 27
		// 0x90, 0x90, 0x90,  // original palette index 13
		// 0x80, 0x80, 0x80,  // original palette index 25
		// 0x40, 0x40, 0x40,  // original palette index 5
		// 0x10, 0x10, 0x10,  // original palette index 10
		// 0x2f, 0x26, 0x0b,  // original palette index 9
		// 0xd8, 0xb2, 0x3b,  // original palette index 0
		// 0xfe, 0xdc, 0x6d,  // original palette index 4
		// 0xfe, 0xf8, 0xe6,  // original palette index 29
		// 0xfe, 0xe5, 0x91,  // original palette index 19
		// 0xde, 0xb6, 0x35,  // original palette index 1
		// 0xfe, 0xd0, 0x3d,  // original palette index 28
		// 0xfe, 0xfb, 0xf2,  // original palette index 2
		// 0xfe, 0xfe, 0xfd,  // original palette index 18
		// 0x2e, 0x26, 0x0a,  // original palette index 7
		// 0xfe, 0xdb, 0x6d,  // original palette index 6
		// 0xfe, 0xe4, 0x91,  // original palette index 21
		// 0xcc, 0xac, 0x47,  // original palette index 16
		// 0xfe, 0xd0, 0x3c,  // original palette index 30
		// 0xcb, 0xab, 0x47,  // original palette index 3
		// 0xfe, 0xfe, 0xfe,  // original palette index 8
	};
	uint8_t hs_data[304] = {
		0x00, 0x02, 0xaf, 0xdd, 0xf1, 0xf3, 0x29, 0x94, 0xc8, 0x10, 0x0a, 0xc7, 0x79, 0xc8, 0x52, 0x2d, 
		0x38, 0xa8, 0xbc, 0x72, 0x43, 0x51, 0xb8, 0x63, 0xeb, 0x56, 0xcb, 0xed, 0x62, 0xcd, 0x74, 0xa5, 
		0xdb, 0x31, 0x93, 0x7a, 0x05, 0x2a, 0x6b, 0x3c, 0xa1, 0x55, 0x6e, 0x79, 0x1c, 0x86, 0x43, 0x21, 
		0x80, 0xc0, 0x60, 0x28, 0x14, 0x0a, 0x04, 0x42, 0x21, 0x10, 0x97, 0xc9, 0xa1, 0x7d, 0x8d, 0x94, 
		0xef, 0xfd, 0xdc, 0xb6, 0xff, 0xbf, 0x1e, 0x6f, 0xf7, 0x97, 0x23, 0xde, 0xdb, 0x4d, 0x7f, 0xdd, 
		0x09, 0xef, 0xfb, 0xf7, 0xf2, 0xff, 0x7f, 0xbf, 0xb2, 0xe9, 0x34, 0x2b, 0xfd, 0xdb, 0xb6, 0xff, 
		0xbc, 0x99, 0x1e, 0x66, 0xb2, 0x8f, 0xfe, 0xe8, 0x4f, 0x39, 0x7a, 0xba, 0x3f, 0xfb, 0xfd, 0xfe, 
		0x2e, 0x02, 0x80, 0xc0, 0xa0, 0x50, 0x30, 0x08, 0x48, 0x14, 0x10, 0xe8, 0x0e, 0x0b, 0x06, 0x07, 
		0x88, 0x81, 0xc1, 0xc1, 0xe0, 0xa1, 0x00, 0x80, 0x60, 0xf0, 0xd0, 0x98, 0x04, 0x02, 0x15, 0x0b, 
		0x07, 0x8a, 0x86, 0x43, 0x60, 0x10, 0xe0, 0x40, 0x40, 0x78, 0x68, 0x14, 0x3e, 0x01, 0x10, 0x07, 
		0x8c, 0x88, 0x40, 0x22, 0x30, 0x28, 0x94, 0x4e, 0x29, 0x15, 0x8a, 0xc5, 0xa2, 0xb1, 0x58, 0xa4, 
		0x4e, 0x25, 0x02, 0x81, 0xc0, 0x20, 0x70, 0x28, 0xbc, 0x62, 0x33, 0x02, 0x81, 0x46, 0xa0, 0x50, 
		0x28, 0xcc, 0x62, 0x2e, 0x0f, 0x29, 0x1b, 0x89, 0xc7, 0x22, 0xb1, 0x58, 0xec, 0x56, 0x2b, 0x1c, 
		0x89, 0xc6, 0xc1, 0xe1, 0x09, 0xe2, 0xc1, 0xe5, 0x23, 0xd1, 0x88, 0xf8, 0x04, 0x24, 0x80, 0x1e, 
		0x1a, 0x3f, 0x1f, 0x8f, 0xc0, 0xa0, 0x50, 0x20, 0x28, 0x20, 0x78, 0x69, 0x00, 0x28, 0x10, 0x00, 
		0x18, 0x7c, 0x38, 0xfc, 0x63, 0xff, 0x9c, 0x0a, 0x05, 0x21, 0x01, 0x02, 0x7f, 0x89, 0x07, 0x8d, 
		0x7f, 0xc2, 0x7f, 0x02, 0x81, 0x40, 0x9f, 0xff, 0xdf, 0xe6, 0x63, 0x30, 0x28, 0x14, 0x6a, 0x05, 
		0x02, 0x7f, 0x89, 0x07, 0x8d, 0x7f, 0xc2, 0x8f, 0xbf, 0x82, 0x3f, 0xff, 0xbf, 0xcc, 0xc8, 0x60, 
		0x50, 0x20, 0x10, 0x27, 0xf8, 0x90, 0x78, 0xc7, 0xfc, 0x27, 0xf0, 0x28, 0x14, 0x09, 0xfe, 0x90, 
	};
} HSpr_scheisse;

// "scoopexrulez" (GIF orig:932 raw_payload:1069 shrunk_payload:824 total:832 bytes)
// Compared to GIF: 89.27% 	Compared to raw: 77.83%
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; )

FL_PROGMEM const struct HSpr_scoopexrulez {
	uint16_t datasize = 824;
	uint16_t frames = 4;
	uint16_t duration = 20;
	uint8_t flags = 0;
	uint8_t palette_entries = 15;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x08, 0x08, 0x08,  // original palette index 1
		// 0x19, 0x19, 0x19,  // original palette index 2
		// 0x27, 0x27, 0x27,  // original palette index 3
		// 0xc7, 0xc7, 0xc7,  // original palette index 12
		// 0xd7, 0xd7, 0xd7,  // original palette index 13
		// 0x7f, 0x7f, 0x7f,  // original palette index 8
		// 0x6f, 0x6f, 0x6f,  // original palette index 7
		// 0xe7, 0xe7, 0xe7,  // original palette index 14
		// 0x9f, 0x9f, 0x9f,  // original palette index 10
		// 0x8f, 0x8f, 0x8f,  // original palette index 9
		// 0x37, 0x37, 0x37,  // original palette index 4
		// 0x5c, 0x5c, 0x5c,  // original palette index 6
		// 0x48, 0x48, 0x48,  // original palette index 5
		// 0xb6, 0xb6, 0xb6,  // original palette index 11
	};
	uint8_t hs_data[824] = {
		0x00, 0x02, 0x84, 0x42, 0x21, 0x11, 0x98, 0xcc, 0x66, 0x4f, 0x27, 0x93, 0xf1, 0xf8, 0xfc, 0x7e, 
		0xbf, 0x5f, 0xaf, 0x7f, 0xbf, 0xdf, 0xed, 0xf6, 0xfb, 0x7f, 0x9f, 0xcf, 0xe7, 0xcf, 0xe7, 0xf3, 
		0xf8, 0xfc, 0x7e, 0x3e, 0x6f, 0x37, 0x9b, 0xd7, 0x2b, 0x95, 0xca, 0x45, 0x22, 0x91, 0xb6, 0xdb, 
		0x6d, 0xa0, 0x10, 0x18, 0x10, 0x00, 0x54, 0x06, 0x03, 0x00, 0x81, 0xc1, 0x20, 0xa0, 0x01, 0x10, 
		0x48, 0x30, 0x3c, 0x14, 0x1e, 0x11, 0x09, 0x83, 0xc1, 0xa0, 0x90, 0x58, 0x54, 0x1a, 0x13, 0x08, 
		0x85, 0x40, 0xe0, 0x30, 0x18, 0x5c, 0x26, 0x19, 0x0b, 0x85, 0xc3, 0x61, 0xd0, 0x48, 0x64, 0x36, 
		0x1b, 0x0c, 0x84, 0xc3, 0x20, 0x30, 0x18, 0x34, 0x1e, 0x07, 0x03, 0x85, 0xc3, 0x21, 0xd0, 0xe8, 
		0x34, 0x32, 0x19, 0x0c, 0x83, 0xc2, 0x60, 0x50, 0x28, 0x34, 0x34, 0x30, 0x0e, 0x1c, 0x10, 0x05, 
		0x07, 0x83, 0xc1, 0xe1, 0x50, 0x28, 0x0c, 0x1e, 0x15, 0x09, 0x85, 0x42, 0x60, 0x90, 0xe8, 0x74, 
		0x12, 0x13, 0x09, 0x87, 0x0b, 0xc1, 0xc3, 0x61, 0x70, 0xa8, 0x4c, 0x32, 0x1d, 0x0c, 0x83, 0xc3, 
		0xa0, 0xd0, 0x98, 0x54, 0x2c, 0x9e, 0x0c, 0x7a, 0x0e, 0x12, 0x32, 0x05, 0x04, 0x83, 0xc3, 0x60, 
		0x60, 0xf0, 0x50, 0xd8, 0x14, 0x0a, 0x07, 0x0a, 0x84, 0xc2, 0x61, 0x30, 0x58, 0x24, 0x36, 0x07, 
		0x02, 0x85, 0xc0, 0x60, 0x30, 0x78, 0x14, 0x06, 0x07, 0x0a, 0x86, 0x43, 0xa0, 0xb0, 0x68, 0x24, 
		0x32, 0x17, 0x03, 0x83, 0x83, 0xc1, 0x42, 0xe0, 0x50, 0xd8, 0x34, 0x2a, 0x19, 0x07, 0x82, 0x43, 
		0xa0, 0xf0, 0xb8, 0x6c, 0x26, 0x05, 0x01, 0x85, 0xc1, 0xa0, 0x70, 0x78, 0x32, 0x08, 0x1c, 0x26, 
		0x15, 0x0d, 0x85, 0x43, 0x20, 0x30, 0x08, 0x0c, 0x36, 0x15, 0x07, 0x81, 0x90, 0xc1, 0x42, 0xe1, 
		0x70, 0x70, 0x40, 0x20, 0x78, 0x21, 0x08, 0x28, 0x39, 0x90, 0x14, 0x36, 0x0f, 0x06, 0x2d, 0x02, 
		0x80, 0x00, 0x01, 0x40, 0x40, 0x02, 0x01, 0xa1, 0x1f, 0xe4, 0xc0, 0x60, 0xdf, 0xe1, 0xe0, 0xd0, 
		0x57, 0xf8, 0x27, 0xe0, 0x28, 0x4c, 0x3a, 0x11, 0x06, 0x4f, 0x83, 0x84, 0xc3, 0x21, 0xb0, 0xb8, 
		0x5c, 0x36, 0x1d, 0x05, 0x83, 0xc3, 0x60, 0xf0, 0x98, 0x6b, 0xfc, 0x14, 0x2a, 0x15, 0x07, 0x86, 
		0xc3, 0x60, 0xf0, 0x48, 0x24, 0x1a, 0x18, 0x97, 0x04, 0xef, 0x04, 0xdf, 0x05, 0x0e, 0x84, 0xc1, 
		0x61, 0x50, 0xe0, 0xa8, 0x28, 0x68, 0x3c, 0x14, 0x2e, 0x05, 0x0b, 0x77, 0x82, 0x87, 0x41, 0x60, 
		0x90, 0xa8, 0x64, 0x2e, 0x16, 0xff, 0x04, 0xaa, 0x07, 0x0e, 0x84, 0xbf, 0xc1, 0x09, 0x41, 0x41, 
		0xc7, 0xe0, 0x9c, 0x80, 0xa1, 0x90, 0xe8, 0x34, 0x34, 0x26, 0x0a, 0x13, 0x0e, 0x83, 0x07, 0xc1, 
		0x42, 0xe0, 0x50, 0x31, 0x78, 0x28, 0x34, 0x26, 0x0a, 0xdf, 0x05, 0x03, 0x07, 0x82, 0x86, 0x37, 
		0x81, 0x14, 0x41, 0x13, 0xc1, 0xc2, 0xe0, 0x70, 0x68, 0x14, 0x06, 0x0d, 0x07, 0x83, 0xc3, 0x60, 
		0x70, 0x32, 0x88, 0x28, 0x38, 0x14, 0x11, 0x7c, 0x14, 0x36, 0x0d, 0x03, 0x81, 0x40, 0x60, 0x50, 
		0x38, 0x54, 0x10, 0xbc, 0x09, 0x1e, 0x0a, 0x01, 0x01, 0x86, 0x3f, 0x82, 0x43, 0x61, 0x27, 0xd0, 
		0x50, 0xc7, 0xf8, 0x48, 0x6c, 0x1a, 0x18, 0xff, 0x04, 0xc3, 0x04, 0xff, 0x1a, 0xec, 0x06, 0xff, 
		0x43, 0x01, 0x81, 0xc2, 0x80, 0xc0, 0x80, 0x00, 0xa1, 0x50, 0xa8, 0x2c, 0x22, 0x14, 0xff, 0x05, 
		0x0c, 0x85, 0x43, 0x61, 0x45, 0xb0, 0x4c, 0x00, 0x50, 0xe7, 0xf8, 0x48, 0x54, 0x36, 0x06, 0x0a, 
		0x07, 0x06, 0x82, 0x38, 0x01, 0x41, 0xe1, 0x30, 0x25, 0x78, 0x28, 0x14, 0x36, 0x13, 0x06, 0x82, 
		0xc1, 0x60, 0xd0, 0x48, 0x63, 0xfc, 0x34, 0x0a, 0x16, 0xea, 0x05, 0x0e, 0x87, 0x42, 0x56, 0xc0, 
		0xdf, 0xe1, 0xa0, 0xc3, 0xe0, 0x89, 0x50, 0x40, 0xf0, 0x50, 0xb8, 0x54, 0x24, 0x90, 0x0a, 0x0f, 
		0x04, 0x83, 0x43, 0xa1, 0x50, 0xb2, 0x78, 0x28, 0x6c, 0x1a, 0x13, 0x06, 0x85, 0x43, 0xa1, 0x4f, 
		0xf0, 0x4f, 0x40, 0x50, 0x78, 0x0c, 0x06, 0x0f, 0x0b, 0x85, 0xc2, 0xe1, 0xb0, 0xa8, 0x54, 0x3a, 
		0x13, 0x07, 0x83, 0xc3, 0x1d, 0xe0, 0xe0, 0xc3, 0x30, 0x42, 0x40, 0x50, 0xe8, 0x3c, 0x35, 0xa6, 
		0x0a, 0x15, 0x01, 0x80, 0xc2, 0xe0, 0xc9, 0x40, 0x50, 0x38, 0x4c, 0x26, 0x1a, 0x26, 0x05, 0x09, 
		0x85, 0xbb, 0xc1, 0x43, 0x60, 0xd0, 0xb8, 0x14, 0x0e, 0x0c, 0x5c, 0x04, 0xa9, 0x05, 0x03, 0x76, 
		0x83, 0x85, 0xc1, 0xa0, 0xf0, 0xd8, 0x64, 0x32, 0x0f, 0x06, 0x83, 0xc0, 0xdf, 0xea, 0x00, 0x01, 
		0x9f, 0xe0, 0xa0, 0x10, 0x38, 0x34, 0x16, 0x15, 0x09, 0x84, 0x42, 0xa1, 0x50, 0x68, 0x34, 0x2a, 
		0x0b, 0x09, 0x35, 0x02, 0x86, 0x9a, 0x41, 0x43, 0x21, 0xd0, 0x96, 0xe0, 0x28, 0x6c, 0x32, 0x12, 
		0xcf, 0x05, 0x06, 0x86, 0x35, 0x81, 0x2a, 0x81, 0xc1, 0xd4, 0x60, 0x9f, 0xe0, 0x8c, 0xa0, 0xa0, 
		0x70, 0xc8, 0x74, 0x2a, 0x0b, 0x04, 0x82, 0x41, 0x21, 0xd0, 0xd8, 0x34, 0x0a, 0x02, 0xf5, 0x05, 
		0x0d, 0x85, 0x41, 0x21, 0xd0, 0xe6, 0xf8, 0x28, 0x6c, 0x0d, 0xbe, 0x0a, 0x19, 0x06, 0x84, 0xc2, 
		0xa1, 0x50, 0xa8, 0x64, 0x1e, 0x13, 0x04, 0x51, 0x02, 0x27, 0x83, 0x83, 0xc2, 0x42, 0x00, 0xa1, 
		0x90, 0xc8, 0x74, 0x11, 0xa2, 0x0c, 0x1e, 0x0a, 0x05, 0x02, 0x85, 0xc1, 0xa1, 0xc2, 0xf1, 0x30, 
		0x74, 0xa0, 0x28, 0x5c, 0x2a, 0x0f, 0x04, 0x87, 0x41, 0x21, 0xd0, 0x98, 0x59, 0x3c, 0x14, 0x1c, 
		0x26, 0x0a, 0x07, 0x07, 0x37, 0x02, 0x86, 0x41, 0xc8, 0xe0, 0x81, 0x60, 0xa0, 0xd0, 0x38, 0x14, 
		0x2e, 0x13, 0x07, 0x85, 0x80, 0x01, 0x26, 0x81, 0x3f, 0xc1, 0x42, 0xe0, 0xd0, 0xd8, 0x5c, 0x2a, 
		0x16, 0x5b, 0x05, 0x0d, 0x7f, 0x82, 0x07, 0x82, 0x16, 0x82, 0x83, 0x41, 0xd5, 0x80, 0xa0, 0xd0, 
		0x78, 0x5b, 0xfc, 0x39, 0x48, 0x13, 0xfc, 0x38, 
	};
} HSpr_scoopexrulez;

// "sirlord" (GIF orig:313 raw_payload:1036 shrunk_payload:214 total:222 bytes)
// Compared to GIF: 70.93% 	Compared to raw: 21.43%
// using GIF index 3 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 3; loop = 0; transparency = 3; )

FL_PROGMEM const struct HSpr_sirlord {
	uint16_t datasize = 214;
	uint16_t frames = 4;
	uint16_t duration = 140;
	uint8_t flags = 0;
	uint8_t palette_entries = 4;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 3
		// 0xff, 0xae, 0xc9,  // original palette index 1
		// 0x7f, 0x7f, 0x7f,  // original palette index 0
		// 0xc3, 0xc3, 0xc3,  // original palette index 2
	};
	uint8_t hs_data[214] = {
		0x00, 0x02, 0xff, 0xeb, 0xb9, 0x37, 0xfb, 0xfd, 0xff, 0x87, 0xc3, 0xe1, 0x86, 0xc9, 0x40, 0x60, 
		0x21, 0x04, 0x00, 0xe1, 0xb0, 0x20, 0x00, 0x20, 0x70, 0xb8, 0x18, 0x00, 0x10, 0x40, 0x54, 0x0a, 
		0x06, 0x20, 0x1a, 0x0f, 0x12, 0x14, 0x0a, 0x2f, 0x04, 0x12, 0x04, 0x0e, 0x10, 0x4f, 0x0c, 0x01, 
		0x06, 0x60, 0x12, 0x1d, 0x14, 0x8e, 0x05, 0x01, 0x20, 0x83, 0x08, 0x08, 0x80, 0xc0, 0xc1, 0xe0, 
		0x93, 0xc3, 0x12, 0x03, 0xd7, 0xc3, 0x81, 0xe3, 0xc0, 0x07, 0x9f, 0xc4, 0x42, 0x04, 0x0b, 0xe3, 
		0x8f, 0xc3, 0xa0, 0x60, 0x00, 0x4f, 0xf2, 0x80, 0xf1, 0xc1, 0x30, 0xc2, 0xf0, 0x41, 0x20, 0x4a, 
		0x61, 0x41, 0xe0, 0x6e, 0xe1, 0x21, 0x00, 0x8c, 0x41, 0x90, 0x18, 0x0b, 0xc4, 0x10, 0x40, 0x54, 
		0x06, 0x07, 0x01, 0x71, 0x0c, 0x81, 0x07, 0x81, 0xbf, 0x87, 0x08, 0x06, 0x3b, 0xfb, 0x21, 0x03, 
		0x3b, 0xc3, 0xa4, 0xc4, 0x3b, 0x83, 0x0c, 0x84, 0x8b, 0x42, 0x03, 0x84, 0x3b, 0x81, 0x10, 0x41, 
		0x84, 0x04, 0x3b, 0x81, 0x1b, 0x85, 0x84, 0x01, 0x23, 0xc6, 0xbb, 0x89, 0xbf, 0x8d, 0x00, 0x08, 
		0x3f, 0x88, 0x84, 0x08, 0x17, 0x07, 0x1f, 0xc6, 0xb7, 0xc1, 0x38, 0x41, 0x3f, 0xc9, 0x83, 0xc8, 
		0x01, 0x42, 0x0b, 0xc1, 0x04, 0x81, 0x29, 0x45, 0x07, 0x82, 0xbc, 0x04, 0x84, 0x01, 0x07, 0x45, 
		0x40, 0x60, 0x30, 0x11, 0x80, 0x21, 0x10, 0x30, 0x80, 0x58, 0x0c, 0x0c, 0x1e, 0x0d, 0x3a, 0x2d, 
		0x1e, 0x38, 0x7e, 0x1c, 0x00, 0x10, 
	};
} HSpr_sirlord;

// "slime" (GIF orig:6753 raw_payload:1039 shrunk_payload:212 total:220 bytes)
// Compared to GIF: 3.26% 	Compared to raw: 21.17%
// using GIF index 0 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; transparency = 0; )

FL_PROGMEM const struct HSpr_slime {
	uint16_t datasize = 212;
	uint16_t frames = 4;
	uint16_t duration = 80;
	uint8_t flags = 0;
	uint8_t palette_entries = 5;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x0e, 0x5e, 0x20,  // original palette index 1
		// 0x32, 0xa9, 0x2a,  // original palette index 2
		// 0x82, 0xd3, 0x4f,  // original palette index 3
		// 0xbd, 0xed, 0x89,  // original palette index 4
	};
	uint8_t hs_data[212] = {
		0x00, 0x02, 0x87, 0x57, 0xa4, 0x13, 0x2d, 0x4c, 0xab, 0x05, 0xd3, 0xa7, 0xef, 0x7d, 0xb8, 0x93, 
		0x8e, 0x58, 0x08, 0x00, 0x10, 0x34, 0x54, 0x0a, 0x06, 0x00, 0x05, 0x02, 0x08, 0x87, 0x80, 0xc0, 
		0xe0, 0x80, 0x00, 0x90, 0x30, 0x80, 0x50, 0x70, 0x68, 0x0c, 0x12, 0x02, 0x10, 0x0a, 0x2c, 0x06, 
		0x0f, 0x05, 0x02, 0x82, 0x40, 0xa0, 0x70, 0x20, 0xf0, 0x40, 0x00, 0x50, 0x68, 0x28, 0x18, 0x80, 
		0x18, 0x3c, 0x38, 0x00, 0x20, 0x3c, 0x19, 0x70, 0x20, 0x8c, 0x30, 0x3c, 0x1c, 0x06, 0x04, 0x11, 
		0x0f, 0x02, 0x42, 0x04, 0x45, 0x83, 0x00, 0x07, 0x7e, 0xe5, 0x39, 0x06, 0x7f, 0x09, 0x7f, 0x85, 
		0x4e, 0x83, 0x07, 0x04, 0x7f, 0x87, 0x08, 0x05, 0x7f, 0x93, 0x09, 0x02, 0x77, 0x83, 0x7f, 0x83, 
		0x80, 0x3f, 0xc5, 0x8b, 0x82, 0x3f, 0xce, 0x9b, 0x83, 0x83, 0x83, 0xa3, 0x43, 0xbf, 0xae, 0x17, 
		0x06, 0xa4, 0x82, 0x9f, 0x43, 0x03, 0x82, 0xbb, 0x41, 0x04, 0x04, 0x3f, 0xc2, 0xbb, 0xc1, 0x37, 
		0x82, 0x07, 0x81, 0xbf, 0xc6, 0x38, 0x02, 0x3f, 0xc2, 0x83, 0xc4, 0xbb, 0x84, 0x03, 0xc9, 0x3b, 
		0x83, 0x83, 0xc4, 0x3f, 0xf8, 0x98, 0xc1, 0x03, 0x46, 0x20, 0x41, 0x3f, 0x84, 0x2c, 0x42, 0x3f, 
		0xc1, 0x84, 0x03, 0xc0, 0x5d, 0xe1, 0xd3, 0xc1, 0x9f, 0xe4, 0x81, 0xe0, 0xa0, 0x50, 0x47, 0xf8, 
		0x66, 0xf0, 0x98, 0x1c, 0x09, 0xdc, 0x34, 0xc6, 0x10, 0x1e, 0x40, 0x20, 0x26, 0x04, 0x61, 0x08, 
		0xfe, 0x12, 0x0e, 0x06, 
	};
} HSpr_slime;

// "twylogo" (GIF orig:3976 raw_payload:15131 shrunk_payload:743 total:751 bytes)
// Compared to GIF: 18.89% 	Compared to raw: 4.96%
// using GIF index 0 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 1000; transparency = 0; )

FL_PROGMEM const struct HSpr_twylogo {
	uint16_t datasize = 743;
	uint16_t frames = 59;
	uint16_t duration = 20;
	uint8_t flags = 0;
	uint8_t palette_entries = 9;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xc4, 0xc4, 0xc4,  // original palette index 6
		// 0x84, 0x84, 0x84,  // original palette index 4
		// 0x51, 0x51, 0x51,  // original palette index 5
		// 0x00, 0x00, 0x00,  // original palette index 2
		// 0x16, 0x16, 0x16,  // original palette index 8
		// 0x1e, 0x96, 0xff,  // original palette index 1
		// 0x00, 0xff, 0xe9,  // original palette index 3
		// 0xff, 0xff, 0xff,  // original palette index 7
	};
	uint8_t hs_data[743] = {
		0x00, 0x02, 0xe2, 0x71, 0x38, 0x98, 0x4c, 0x26, 0x12, 0xa3, 0x51, 0xa8, 0x82, 0xc1, 0x45, 0xa2, 
		0xd1, 0x68, 0xf6, 0x5b, 0xff, 0x00, 0xff, 0xfa, 0x7f, 0xff, 0xff, 0xfc, 0x02, 0x02, 0x00, 0x19, 
		0x02, 0x80, 0x84, 0x06, 0x40, 0xa0, 0x70, 0x18, 0x0c, 0x10, 0x00, 0x2a, 0x06, 0x0f, 0x63, 0x02, 
		0x81, 0xc0, 0xe0, 0x70, 0x20, 0x58, 0x58, 0x1c, 0x0e, 0x0b, 0x03, 0x07, 0x04, 0x11, 0x84, 0x07, 
		0x83, 0x81, 0xc1, 0x41, 0x20, 0xc6, 0x61, 0x60, 0x70, 0x31, 0xa8, 0x70, 0x7d, 0x03, 0xa0, 0x33, 
		0xd8, 0x20, 0x78, 0x70, 0x70, 0x43, 0xd8, 0x67, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 
		0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf7, 0xfa, 0x18, 0x30, 0x00, 0x53, 0xff, 0xfb, 0xff, 
		0xfb, 0x7c, 0x18, 0x3c, 0x7b, 0xff, 0xfb, 0xff, 0xf8, 0x3c, 0x7b, 0xff, 0xfb, 0xfe, 0x7c, 0x1c, 
		0x00, 0x29, 0xfe, 0x8c, 0x1e, 0x39, 0xff, 0xfd, 0xff, 0x01, 0xbe, 0x3e, 0x0e, 0x00, 0x14, 0xff, 
		0x4e, 0x0b, 0x0a, 0xff, 0xfe, 0xff, 0x6a, 0xef, 0x3e, 0x1f, 0x3c, 0xff, 0x28, 0x0f, 0x0e, 0xff, 
		0xfe, 0xff, 0x66, 0xef, 0x3c, 0x1f, 0x1e, 0xff, 0x48, 0x0f, 0x0a, 0xff, 0xfe, 0xff, 0x6a, 0x0f, 
		0x1e, 0xcb, 0x06, 0x00, 0x0e, 0xff, 0x0e, 0x1b, 0x0a, 0xff, 0x52, 0x0f, 0x1e, 0xff, 0xb3, 0x08, 
		0x7f, 0x8f, 0x08, 0x0c, 0x7f, 0x83, 0x67, 0x8e, 0x77, 0x90, 0x84, 0x00, 0x05, 0x07, 0xc9, 0x3c, 
		0x02, 0x3b, 0xc3, 0xbf, 0xc3, 0x86, 0xc2, 0xbf, 0xd4, 0x83, 0xc7, 0xbf, 0xf5, 0xbb, 0xc7, 0xa2, 
		0xc1, 0x80, 0x03, 0xbb, 0xc9, 0x3f, 0xca, 0x3b, 0xc3, 0xbf, 0xc3, 0x8e, 0xc2, 0xbf, 0xc4, 0x87, 
		0xc2, 0xbf, 0xd4, 0x83, 0xc7, 0xbf, 0xed, 0xbb, 0xcf, 0x87, 0xcf, 0x3f, 0xca, 0x03, 0xc3, 0xbf, 
		0xc3, 0xb3, 0xc7, 0x87, 0xc2, 0xbf, 0xd4, 0x83, 0xc7, 0xbf, 0xed, 0xbb, 0xcf, 0x07, 0xc7, 0xbf, 
		0xd2, 0x3b, 0xcf, 0x87, 0xcf, 0x83, 0xcf, 0x3f, 0xee, 0x03, 0xc7, 0xaa, 0xc1, 0x80, 0x03, 0xbf, 
		0xc3, 0x86, 0xc2, 0xbf, 0xd4, 0xbb, 0xcf, 0x87, 0xcf, 0xbf, 0xfd, 0x83, 0xc7, 0x3c, 0x02, 0x3b, 
		0xc3, 0xbf, 0xc3, 0x86, 0xc2, 0xbf, 0xd4, 0xbb, 0xcf, 0x87, 0xcf, 0x3f, 0xde, 0x0d, 0x43, 0x80, 
		0x01, 0xbf, 0xdb, 0xbb, 0xc3, 0xbf, 0xc3, 0xab, 0xc2, 0xbf, 0xc4, 0xb3, 0xcf, 0x83, 0xcf, 0x8f, 
		0xcf, 0x3f, 0xe6, 0x03, 0xc7, 0xbf, 0xd9, 0x83, 0xc3, 0xbf, 0xc3, 0xb3, 0xd7, 0x03, 0xd0, 0x0f, 
		0xc7, 0x3f, 0xee, 0x03, 0xc7, 0xbf, 0xd9, 0xbb, 0xcf, 0x87, 0xcf, 0x83, 0xcf, 0x3f, 0xf6, 0x03, 
		0xc7, 0x3f, 0xda, 0x3b, 0xcf, 0x87, 0xcf, 0xbf, 0xff, 0xbf, 0xc7, 0x82, 0xc2, 0xbf, 0xdc, 0xbb, 
		0xcf, 0x87, 0xcf, 0x3f, 0xff, 0xbf, 0xc8, 0x03, 0xc3, 0xbf, 0xdb, 0xbb, 0xcf, 0x07, 0xc7, 0xbf, 
		0xff, 0xbf, 0xd0, 0x03, 0xc2, 0xbf, 0xdc, 0x83, 0xc7, 0xc1, 0xc0, 0x00, 0x9f, 0xff, 0xdf, 0xee, 
		0xc1, 0xe3, 0xdf, 0xeb, 0xc1, 0xe3, 0x9f, 0xff, 0xdf, 0xf0, 0x01, 0xe7, 0xdf, 0xff, 0xdf, 0xff, 
		0xc1, 0xe3, 0xdf, 0xff, 0xdf, 0xff, 0xc1, 0xe3, 0x9f, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 
		0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xfc, 0x20, 0xc0, 0x00, 0x4f, 
		0xff, 0xef, 0xfb, 0x6d, 0xf1, 0xcf, 0xff, 0xef, 0xfc, 0x0e, 0xf1, 0xe0, 0xf3, 0xf0, 0x70, 0x00, 
		0x27, 0xff, 0xf7, 0xfb, 0xb7, 0x7b, 0xe0, 0xf8, 0xf7, 0xff, 0xf7, 0xfa, 0x07, 0x7c, 0xe0, 0xf8, 
		0xf7, 0xff, 0xf7, 0xf9, 0x05, 0x78, 0x57, 0xfa, 0x97, 0x7a, 0xe7, 0xff, 0xf7, 0xf9, 0x07, 0x78, 
		0x77, 0xfa, 0x77, 0x7b, 0xe7, 0xff, 0xc5, 0x58, 0x30, 0x00, 0x77, 0xfa, 0x77, 0x7c, 0xe1, 0xf8, 
		0xf7, 0xfd, 0xc7, 0x78, 0xe7, 0xfa, 0x45, 0x78, 0x57, 0xf8, 0x97, 0x7c, 0xe0, 0xf8, 0xf7, 0xfc, 
		0xc7, 0x79, 0xe7, 0xf9, 0x47, 0x78, 0x77, 0xf8, 0x70, 0xd8, 0x57, 0xf8, 0x97, 0x7c, 0xe0, 0xf8, 
		0xf7, 0xfb, 0xc7, 0x7a, 0xe4, 0x58, 0x40, 0x00, 0x77, 0xf8, 0x77, 0x78, 0x77, 0xf8, 0x70, 0xd8, 
		0x57, 0xfa, 0x97, 0x7a, 0xe7, 0xfe, 0xc7, 0x78, 0xe0, 0xf8, 0xf7, 0x80, 0x47, 0x78, 0x77, 0xfa, 
		0x77, 0x7b, 0xe7, 0xfd, 0xc7, 0x79, 0xe0, 0xf8, 0xf7, 0xfa, 0x47, 0x7c, 0xe7, 0xfc, 0xc7, 0x7a, 
		0xe7, 0xfa, 0x41, 0xd8, 0x57, 0xf8, 0x97, 0x7c, 0xe8, 0x08, 0x14, 0x1b, 0xfe, 0x3b, 0xbc, 0xfc, 
		0x20, 0x00, 0x29, 0xfe, 0x5d, 0xde, 0x1d, 0xfe, 0x1c, 0x36, 0x15, 0xfe, 0x25, 0xde, 0xfd, 0xff, 
		0x6d, 0xde, 0x3c, 0x1e, 0x7d, 0x16, 0x0c, 0x00, 0x1d, 0xfe, 0x1d, 0xde, 0x1d, 0xfe, 0x1c, 0x36, 
		0x15, 0xfe, 0xe5, 0xbe, 0x38, 0x1e, 0x7d, 0xff, 0x71, 0xde, 0x38, 0x3e, 0x3d, 0xe0, 0x11, 0xde, 
		0x1d, 0xfe, 0xdd, 0xde, 0xb9, 0xff, 0x71, 0xde, 0x78, 0x3e, 0x3d, 0xfe, 0xd1, 0xde, 0xf9, 0xff, 
		0x31, 0xde, 0xb9, 0xfe, 0xd1, 0xdf, 0x39, 0xff, 0x31, 0xde, 0xb9, 0xfe, 0x91, 0x3e, 0x15, 0xff, 
		0xfd, 0xfe, 0x95, 0xde, 0xb9, 0xfe, 0x51, 0xde, 0x1d, 0xff, 0xfd, 0xff, 0x8c, 0xca, 0x1d, 0x06, 
		0x15, 0xff, 0xfd, 0xff, 0x85, 0xde, 0x39, 0xff, 0xfd, 0xff, 0x81, 0xde, 0x79, 0xff, 0xfd, 0xff, 
		0x41, 0xde, 0xb9, 0xff, 0xfd, 0xfe, 0xb8, 
	};
} HSpr_twylogo;

// "unionflag16" (GIF orig:123 raw_payload:277 shrunk_payload:92 total:100 bytes)
// Compared to GIF: 81.30% 	Compared to raw: 36.10%
// ./heatshrink -w 8 -l 7 (background = 0; )

FL_PROGMEM const struct HSpr_unionflag16 {
	uint16_t datasize = 92;
	uint16_t frames = 1;
	uint16_t duration = 1000;
	uint8_t flags = 0;
	uint8_t palette_entries = 7;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0x00, 0x00, 0x00,  // original palette index 1
		// 0x7f, 0x7f, 0xcd,  // original palette index 5
		// 0x00, 0x00, 0x9b,  // original palette index 3
		// 0xff, 0x00, 0x00,  // original palette index 2
		// 0xc7, 0xc7, 0xea,  // original palette index 6
		// 0xff, 0x50, 0x50,  // original palette index 4
	};
	uint8_t hs_data[92] = {
		0x00, 0x05, 0xbf, 0xdf, 0xf9, 0xb0, 0x08, 0x06, 0x6f, 0xff, 0x00, 0x80, 0x71, 0xf8, 0xfe, 0xaf, 
		0xfd, 0x42, 0xa1, 0x01, 0x00, 0x1e, 0x1f, 0x90, 0x81, 0x40, 0xc0, 0x00, 0xa0, 0x10, 0x48, 0x24, 
		0x00, 0x0e, 0x0e, 0x0b, 0x06, 0x83, 0x41, 0x02, 0x20, 0xc1, 0xe1, 0x60, 0xa0, 0xc0, 0x40, 0x40, 
		0x90, 0x20, 0x78, 0x30, 0x40, 0x48, 0x18, 0xd4, 0x30, 0x3c, 0x10, 0x20, 0x38, 0x00, 0xe8, 0xbc, 
		0x7c, 0x0c, 0x96, 0x0a, 0x0d, 0x05, 0x07, 0x83, 0x04, 0x04, 0x34, 0x82, 0x02, 0x02, 0x37, 0x86, 
		0x08, 0x83, 0x06, 0x83, 0x47, 0x89, 0x81, 0x2b, 0x88, 0x37, 0xcf, 0x80, 
	};
} HSpr_unionflag16;

// "vn" (GIF orig:184 raw_payload:524 shrunk_payload:57 total:65 bytes)
// Compared to GIF: 35.33% 	Compared to raw: 12.40%
// using GIF index 4 as our transparency index 0 (blackened)
// ./heatshrink -w 8 -l 7 (background = 0; loop = 0; transparency = 4; )

FL_PROGMEM const struct HSpr_vn {
	uint16_t datasize = 57;
	uint16_t frames = 2;
	uint16_t duration = 500;
	uint8_t flags = 0;
	uint8_t palette_entries = 4;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 4
		// 0x00, 0x00, 0x00,  // original palette index 0
		// 0xb7, 0xff, 0xb3,  // original palette index 3
		// 0x05, 0x70, 0x00,  // original palette index 2
	};
	uint8_t hs_data[57] = {
		0x00, 0x05, 0xdb, 0xff, 0xf6, 0x70, 0x5b, 0x84, 0x02, 0x02, 0x00, 0x1f, 0x02, 0x00, 0x02, 0x07, 
		0x8b, 0x81, 0x80, 0x01, 0x08, 0x47, 0x80, 0xc1, 0x00, 0x43, 0x08, 0x42, 0x80, 0xc1, 0x00, 0x43, 
		0x07, 0xc3, 0x87, 0x85, 0x07, 0xc2, 0x07, 0x85, 0x0f, 0xef, 0x2f, 0xd0, 0x80, 0x0e, 0xbf, 0xd2, 
		0x88, 0x46, 0x87, 0xff, 0xaf, 0xd6, 0x80, 0x06, 0x00, 
	};
} HSpr_vn;

// "zx_k_ref" (GIF orig:186 raw_payload:521 shrunk_payload:56 total:64 bytes)
// Compared to GIF: 34.41% 	Compared to raw: 12.28%
// ./heatshrink -w 8 -l 7 (background = 15; loop = 0; )

FL_PROGMEM const struct HSpr_zx_k_ref {
	uint16_t datasize = 56;
	uint16_t frames = 2;
	uint16_t duration = 500;
	uint8_t flags = 0;
	uint8_t palette_entries = 3;
	uint8_t crgb[0] = {
		// 0x00, 0x00, 0x00,  // original palette index 15
		// 0xc0, 0xc0, 0xc0,  // original palette index 7
		// 0x00, 0x00, 0x00,  // original palette index 0
	};
	uint8_t hs_data[56] = {
		0x00, 0x02, 0xe0, 0x70, 0x38, 0x00, 0x50, 0x50, 0x10, 0x07, 0x58, 0x10, 0x00, 0x30, 0x3c, 0x40, 
		0x44, 0x18, 0x0c, 0x10, 0x3c, 0x58, 0x48, 0x20, 0x3c, 0x40, 0xcc, 0x28, 0x7c, 0xc8, 0xfc, 0x88, 
		0x40, 0x19, 0xbc, 0xb8, 0x03, 0xf8, 0x00, 0x83, 0x80, 0x20, 0x3c, 0x6a, 0xb0, 0x62, 0xec, 0x78, 
		0x7c, 0x80, 0xfc, 0x88, 0x84, 0x70, 0x00, 0xa8, 
	};
} HSpr_zx_k_ref;
